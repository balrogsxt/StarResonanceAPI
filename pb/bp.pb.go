// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: pb/bp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBodySize int32

const (
	EBodySize_BodySizeNull EBodySize = 0
	EBodySize_BodySizeS    EBodySize = 1
	EBodySize_BodySizeM    EBodySize = 2
	EBodySize_BodySizeL    EBodySize = 3
)

// Enum value maps for EBodySize.
var (
	EBodySize_name = map[int32]string{
		0: "BodySizeNull",
		1: "BodySizeS",
		2: "BodySizeM",
		3: "BodySizeL",
	}
	EBodySize_value = map[string]int32{
		"BodySizeNull": 0,
		"BodySizeS":    1,
		"BodySizeM":    2,
		"BodySizeL":    3,
	}
)

func (x EBodySize) Enum() *EBodySize {
	p := new(EBodySize)
	*p = x
	return p
}

func (x EBodySize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBodySize) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[0].Descriptor()
}

func (EBodySize) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[0]
}

func (x EBodySize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBodySize.Descriptor instead.
func (EBodySize) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{0}
}

type SystemType int32

const (
	SystemType_SystemType_Null    SystemType = 0
	SystemType_SystemType_Android SystemType = 1
	SystemType_SystemType_Ios     SystemType = 2
	SystemType_SystemType_Web     SystemType = 3
	SystemType_SystemType_Linux   SystemType = 4
	SystemType_SystemType_Windows SystemType = 5
)

// Enum value maps for SystemType.
var (
	SystemType_name = map[int32]string{
		0: "SystemType_Null",
		1: "SystemType_Android",
		2: "SystemType_Ios",
		3: "SystemType_Web",
		4: "SystemType_Linux",
		5: "SystemType_Windows",
	}
	SystemType_value = map[string]int32{
		"SystemType_Null":    0,
		"SystemType_Android": 1,
		"SystemType_Ios":     2,
		"SystemType_Web":     3,
		"SystemType_Linux":   4,
		"SystemType_Windows": 5,
	}
)

func (x SystemType) Enum() *SystemType {
	p := new(SystemType)
	*p = x
	return p
}

func (x SystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[1].Descriptor()
}

func (SystemType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[1]
}

func (x SystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemType.Descriptor instead.
func (SystemType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{1}
}

type LaunchPlatform int32

const (
	LaunchPlatform_LaunchPlatformNull  LaunchPlatform = 0
	LaunchPlatform_LaunchPlatformWeXin LaunchPlatform = 1001
	LaunchPlatform_LaunchPlatformQq    LaunchPlatform = 1002
)

// Enum value maps for LaunchPlatform.
var (
	LaunchPlatform_name = map[int32]string{
		0:    "LaunchPlatformNull",
		1001: "LaunchPlatformWeXin",
		1002: "LaunchPlatformQq",
	}
	LaunchPlatform_value = map[string]int32{
		"LaunchPlatformNull":  0,
		"LaunchPlatformWeXin": 1001,
		"LaunchPlatformQq":    1002,
	}
)

func (x LaunchPlatform) Enum() *LaunchPlatform {
	p := new(LaunchPlatform)
	*p = x
	return p
}

func (x LaunchPlatform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchPlatform) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[2].Descriptor()
}

func (LaunchPlatform) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[2]
}

func (x LaunchPlatform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchPlatform.Descriptor instead.
func (LaunchPlatform) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{2}
}

type EUserTransferType int32

const (
	EUserTransferType_EUserTransferTypeDefault       EUserTransferType = 0
	EUserTransferType_EUserTransferTypeScenePosition EUserTransferType = 1
	EUserTransferType_EUserTransferTypeScenePosId    EUserTransferType = 2
	EUserTransferType_EUserTransferTypePivot         EUserTransferType = 3
	EUserTransferType_EUserTransferTypeCutScene      EUserTransferType = 4
	EUserTransferType_EUserTransferTypeNear          EUserTransferType = 5
)

// Enum value maps for EUserTransferType.
var (
	EUserTransferType_name = map[int32]string{
		0: "EUserTransferTypeDefault",
		1: "EUserTransferTypeScenePosition",
		2: "EUserTransferTypeScenePosId",
		3: "EUserTransferTypePivot",
		4: "EUserTransferTypeCutScene",
		5: "EUserTransferTypeNear",
	}
	EUserTransferType_value = map[string]int32{
		"EUserTransferTypeDefault":       0,
		"EUserTransferTypeScenePosition": 1,
		"EUserTransferTypeScenePosId":    2,
		"EUserTransferTypePivot":         3,
		"EUserTransferTypeCutScene":      4,
		"EUserTransferTypeNear":          5,
	}
)

func (x EUserTransferType) Enum() *EUserTransferType {
	p := new(EUserTransferType)
	*p = x
	return p
}

func (x EUserTransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserTransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[3].Descriptor()
}

func (EUserTransferType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[3]
}

func (x EUserTransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EUserTransferType.Descriptor instead.
func (EUserTransferType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{3}
}

type ESceneLineStatus int32

const (
	ESceneLineStatus_SceneLineStatusNone    ESceneLineStatus = 0
	ESceneLineStatus_SceneLineStatusLow     ESceneLineStatus = 1
	ESceneLineStatus_SceneLineStatusMedium  ESceneLineStatus = 2
	ESceneLineStatus_SceneLineStatusHigh    ESceneLineStatus = 3
	ESceneLineStatus_SceneLineStatusFull    ESceneLineStatus = 4
	ESceneLineStatus_SceneLineStatusRecycle ESceneLineStatus = 5
)

// Enum value maps for ESceneLineStatus.
var (
	ESceneLineStatus_name = map[int32]string{
		0: "SceneLineStatusNone",
		1: "SceneLineStatusLow",
		2: "SceneLineStatusMedium",
		3: "SceneLineStatusHigh",
		4: "SceneLineStatusFull",
		5: "SceneLineStatusRecycle",
	}
	ESceneLineStatus_value = map[string]int32{
		"SceneLineStatusNone":    0,
		"SceneLineStatusLow":     1,
		"SceneLineStatusMedium":  2,
		"SceneLineStatusHigh":    3,
		"SceneLineStatusFull":    4,
		"SceneLineStatusRecycle": 5,
	}
)

func (x ESceneLineStatus) Enum() *ESceneLineStatus {
	p := new(ESceneLineStatus)
	*p = x
	return p
}

func (x ESceneLineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESceneLineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[4].Descriptor()
}

func (ESceneLineStatus) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[4]
}

func (x ESceneLineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESceneLineStatus.Descriptor instead.
func (ESceneLineStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{4}
}

type BodyPartState int32

const (
	BodyPartState_BodyPartStateDefault BodyPartState = 0
	BodyPartState_BodyPartStateInjury  BodyPartState = 1
	BodyPartState_BodyPartStateDead    BodyPartState = 2
)

// Enum value maps for BodyPartState.
var (
	BodyPartState_name = map[int32]string{
		0: "BodyPartStateDefault",
		1: "BodyPartStateInjury",
		2: "BodyPartStateDead",
	}
	BodyPartState_value = map[string]int32{
		"BodyPartStateDefault": 0,
		"BodyPartStateInjury":  1,
		"BodyPartStateDead":    2,
	}
)

func (x BodyPartState) Enum() *BodyPartState {
	p := new(BodyPartState)
	*p = x
	return p
}

func (x BodyPartState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyPartState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[5].Descriptor()
}

func (BodyPartState) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[5]
}

func (x BodyPartState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyPartState.Descriptor instead.
func (BodyPartState) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{5}
}

type EBuffEffectLogicPbType int32

const (
	EBuffEffectLogicPbType_PlayEffect              EBuffEffectLogicPbType = 0
	EBuffEffectLogicPbType_Gravity                 EBuffEffectLogicPbType = 1
	EBuffEffectLogicPbType_ParabolaEffect          EBuffEffectLogicPbType = 2
	EBuffEffectLogicPbType_Linking                 EBuffEffectLogicPbType = 3
	EBuffEffectLogicPbType_ConfusionEffect         EBuffEffectLogicPbType = 4
	EBuffEffectLogicPbType_ZoomScale               EBuffEffectLogicPbType = 5
	EBuffEffectLogicPbType_BuffProfessionEffect    EBuffEffectLogicPbType = 7
	EBuffEffectLogicPbType_TeleportBelt            EBuffEffectLogicPbType = 8
	EBuffEffectLogicPbType_BuffEffectRainbow       EBuffEffectLogicPbType = 9
	EBuffEffectLogicPbType_BuffEffectAttrHUD       EBuffEffectLogicPbType = 11
	EBuffEffectLogicPbType_BuffEffectStop          EBuffEffectLogicPbType = 12
	EBuffEffectLogicPbType_BuffEffectProgress      EBuffEffectLogicPbType = 13
	EBuffEffectLogicPbType_BuffEffectEnergyDisplay EBuffEffectLogicPbType = 14
	EBuffEffectLogicPbType_BuffEffectStopAll       EBuffEffectLogicPbType = 15
	EBuffEffectLogicPbType_BuffEffectLayerChange   EBuffEffectLogicPbType = 16
	EBuffEffectLogicPbType_Tension                 EBuffEffectLogicPbType = 17
)

// Enum value maps for EBuffEffectLogicPbType.
var (
	EBuffEffectLogicPbType_name = map[int32]string{
		0:  "PlayEffect",
		1:  "Gravity",
		2:  "ParabolaEffect",
		3:  "Linking",
		4:  "ConfusionEffect",
		5:  "ZoomScale",
		7:  "BuffProfessionEffect",
		8:  "TeleportBelt",
		9:  "BuffEffectRainbow",
		11: "BuffEffectAttrHUD",
		12: "BuffEffectStop",
		13: "BuffEffectProgress",
		14: "BuffEffectEnergyDisplay",
		15: "BuffEffectStopAll",
		16: "BuffEffectLayerChange",
		17: "Tension",
	}
	EBuffEffectLogicPbType_value = map[string]int32{
		"PlayEffect":              0,
		"Gravity":                 1,
		"ParabolaEffect":          2,
		"Linking":                 3,
		"ConfusionEffect":         4,
		"ZoomScale":               5,
		"BuffProfessionEffect":    7,
		"TeleportBelt":            8,
		"BuffEffectRainbow":       9,
		"BuffEffectAttrHUD":       11,
		"BuffEffectStop":          12,
		"BuffEffectProgress":      13,
		"BuffEffectEnergyDisplay": 14,
		"BuffEffectStopAll":       15,
		"BuffEffectLayerChange":   16,
		"Tension":                 17,
	}
)

func (x EBuffEffectLogicPbType) Enum() *EBuffEffectLogicPbType {
	p := new(EBuffEffectLogicPbType)
	*p = x
	return p
}

func (x EBuffEffectLogicPbType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBuffEffectLogicPbType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[6].Descriptor()
}

func (EBuffEffectLogicPbType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[6]
}

func (x EBuffEffectLogicPbType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBuffEffectLogicPbType.Descriptor instead.
func (EBuffEffectLogicPbType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{6}
}

type EDamageSource int32

const (
	EDamageSource_EDamageSourceSkill      EDamageSource = 0
	EDamageSource_EDamageSourceBullet     EDamageSource = 1
	EDamageSource_EDamageSourceBuff       EDamageSource = 2
	EDamageSource_EDamageSourceFall       EDamageSource = 3
	EDamageSource_EDamageSourceFakeBullet EDamageSource = 4
	EDamageSource_EDamageSourceOther      EDamageSource = 100
)

// Enum value maps for EDamageSource.
var (
	EDamageSource_name = map[int32]string{
		0:   "EDamageSourceSkill",
		1:   "EDamageSourceBullet",
		2:   "EDamageSourceBuff",
		3:   "EDamageSourceFall",
		4:   "EDamageSourceFakeBullet",
		100: "EDamageSourceOther",
	}
	EDamageSource_value = map[string]int32{
		"EDamageSourceSkill":      0,
		"EDamageSourceBullet":     1,
		"EDamageSourceBuff":       2,
		"EDamageSourceFall":       3,
		"EDamageSourceFakeBullet": 4,
		"EDamageSourceOther":      100,
	}
)

func (x EDamageSource) Enum() *EDamageSource {
	p := new(EDamageSource)
	*p = x
	return p
}

func (x EDamageSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDamageSource) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[7].Descriptor()
}

func (EDamageSource) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[7]
}

func (x EDamageSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDamageSource.Descriptor instead.
func (EDamageSource) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{7}
}

type EDamageProperty int32

const (
	EDamageProperty_General     EDamageProperty = 0
	EDamageProperty_Fire        EDamageProperty = 1
	EDamageProperty_Water       EDamageProperty = 2
	EDamageProperty_Electricity EDamageProperty = 3
	EDamageProperty_Wood        EDamageProperty = 4
	EDamageProperty_Wind        EDamageProperty = 5
	EDamageProperty_Rock        EDamageProperty = 6
	EDamageProperty_Light       EDamageProperty = 7
	EDamageProperty_Dark        EDamageProperty = 8
	EDamageProperty_Count       EDamageProperty = 9
)

// Enum value maps for EDamageProperty.
var (
	EDamageProperty_name = map[int32]string{
		0: "General",
		1: "Fire",
		2: "Water",
		3: "Electricity",
		4: "Wood",
		5: "Wind",
		6: "Rock",
		7: "Light",
		8: "Dark",
		9: "Count",
	}
	EDamageProperty_value = map[string]int32{
		"General":     0,
		"Fire":        1,
		"Water":       2,
		"Electricity": 3,
		"Wood":        4,
		"Wind":        5,
		"Rock":        6,
		"Light":       7,
		"Dark":        8,
		"Count":       9,
	}
)

func (x EDamageProperty) Enum() *EDamageProperty {
	p := new(EDamageProperty)
	*p = x
	return p
}

func (x EDamageProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDamageProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[8].Descriptor()
}

func (EDamageProperty) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[8]
}

func (x EDamageProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDamageProperty.Descriptor instead.
func (EDamageProperty) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{8}
}

type EDamageMode int32

const (
	EDamageMode_DamageNormal   EDamageMode = 0
	EDamageMode_DamagePhysical EDamageMode = 1
	EDamageMode_DamageMagical  EDamageMode = 2
)

// Enum value maps for EDamageMode.
var (
	EDamageMode_name = map[int32]string{
		0: "DamageNormal",
		1: "DamagePhysical",
		2: "DamageMagical",
	}
	EDamageMode_value = map[string]int32{
		"DamageNormal":   0,
		"DamagePhysical": 1,
		"DamageMagical":  2,
	}
)

func (x EDamageMode) Enum() *EDamageMode {
	p := new(EDamageMode)
	*p = x
	return p
}

func (x EDamageMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDamageMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[9].Descriptor()
}

func (EDamageMode) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[9]
}

func (x EDamageMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDamageMode.Descriptor instead.
func (EDamageMode) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{9}
}

type EDamageType int32

const (
	EDamageType_Normal   EDamageType = 0
	EDamageType_Miss     EDamageType = 1
	EDamageType_Heal     EDamageType = 2
	EDamageType_Immune   EDamageType = 3
	EDamageType_Fall     EDamageType = 4
	EDamageType_Absorbed EDamageType = 5
)

// Enum value maps for EDamageType.
var (
	EDamageType_name = map[int32]string{
		0: "Normal",
		1: "Miss",
		2: "Heal",
		3: "Immune",
		4: "Fall",
		5: "Absorbed",
	}
	EDamageType_value = map[string]int32{
		"Normal":   0,
		"Miss":     1,
		"Heal":     2,
		"Immune":   3,
		"Fall":     4,
		"Absorbed": 5,
	}
)

func (x EDamageType) Enum() *EDamageType {
	p := new(EDamageType)
	*p = x
	return p
}

func (x EDamageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDamageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[10].Descriptor()
}

func (EDamageType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[10]
}

func (x EDamageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDamageType.Descriptor instead.
func (EDamageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{10}
}

type EBuffEventType int32

const (
	EBuffEventType_BuffEventUnknown                   EBuffEventType = 0
	EBuffEventType_BuffEventAddTo                     EBuffEventType = 1
	EBuffEventType_BuffEventRemove                    EBuffEventType = 2
	EBuffEventType_BuffEventReplace                   EBuffEventType = 3
	EBuffEventType_BuffEventTimer                     EBuffEventType = 4
	EBuffEventType_BuffEventStackLayer                EBuffEventType = 5
	EBuffEventType_BuffEventRemoveLayer               EBuffEventType = 6
	EBuffEventType_BuffEventOnHitTargetBefore         EBuffEventType = 7
	EBuffEventType_BuffEventOnHitTargetAfter          EBuffEventType = 8
	EBuffEventType_BuffEventOnHittedBefore            EBuffEventType = 9
	EBuffEventType_BuffEventOnHittedAfter             EBuffEventType = 10
	EBuffEventType_BuffEventOnReachMaxLayer           EBuffEventType = 11
	EBuffEventType_BuffEventHostDeath                 EBuffEventType = 12
	EBuffEventType_BuffEventOnSkillHitAfter           EBuffEventType = 13
	EBuffEventType_BuffEventTrigTimingAura            EBuffEventType = 14
	EBuffEventType_BuffEventBodyPartDead              EBuffEventType = 15
	EBuffEventType_BuffEventBodyPartHit               EBuffEventType = 16
	EBuffEventType_BuffEventBodyPartStateChange       EBuffEventType = 17
	EBuffEventType_BuffEventOnPartHittedBefore        EBuffEventType = 18
	EBuffEventType_BuffEventOnPartHittedAfter         EBuffEventType = 19
	EBuffEventType_BuffEventGravitational             EBuffEventType = 20
	EBuffEventType_BuffEventFightResChange            EBuffEventType = 21
	EBuffEventType_BuffEventOnKillActor               EBuffEventType = 23
	EBuffEventType_BuffEventAttrWatcher               EBuffEventType = 24
	EBuffEventType_BuffEventOnHittedLHBefore          EBuffEventType = 25
	EBuffEventType_BuffEventOnBeHittedLHBefore        EBuffEventType = 26
	EBuffEventType_BuffEventAddByTarget               EBuffEventType = 27
	EBuffEventType_BuffEventRemoveByTarget            EBuffEventType = 28
	EBuffEventType_BuffEventInCombatState             EBuffEventType = 29
	EBuffEventType_BuffEventOutCombatState            EBuffEventType = 30
	EBuffEventType_BuffEventSkillBegin                EBuffEventType = 31
	EBuffEventType_BuffEventSkillEnd                  EBuffEventType = 32
	EBuffEventType_BuffEventSingingEnd                EBuffEventType = 34
	EBuffEventType_BuffEventSummonBuffAdd             EBuffEventType = 35
	EBuffEventType_BuffEventSummonEntity              EBuffEventType = 36
	EBuffEventType_BuffEventGuideEnd                  EBuffEventType = 37
	EBuffEventType_BuffEventOnDelayHit                EBuffEventType = 39
	EBuffEventType_BuffEventTeamBuffAdd               EBuffEventType = 40
	EBuffEventType_BuffEventChangeProfession          EBuffEventType = 41
	EBuffEventType_BuffEventDodgeSuccess              EBuffEventType = 42
	EBuffEventType_BuffEventHealBefore                EBuffEventType = 43
	EBuffEventType_BuffEventHealAfter                 EBuffEventType = 44
	EBuffEventType_BuffEventProduceHealBefore         EBuffEventType = 45
	EBuffEventType_BuffEventProduceHealAfter          EBuffEventType = 46
	EBuffEventType_BuffEventShieldBroken              EBuffEventType = 47
	EBuffEventType_BuffEventLinkingStart              EBuffEventType = 48
	EBuffEventType_BuffEventLinkingEnd                EBuffEventType = 49
	EBuffEventType_BuffEventLinkingWatcher            EBuffEventType = 50
	EBuffEventType_BuffEventSuperArmorBroken          EBuffEventType = 51
	EBuffEventType_BuffEventAddedByTargetTag          EBuffEventType = 52
	EBuffEventType_BuffEventAddToTargetTag            EBuffEventType = 53
	EBuffEventType_BuffEventOnBeHitLessenHp           EBuffEventType = 57
	EBuffEventType_BuffEventEnterBreaking             EBuffEventType = 58
	EBuffEventType_BuffEventTeleportBelt              EBuffEventType = 59
	EBuffEventType_BuffEventOnBeHitAfterOnly          EBuffEventType = 63
	EBuffEventType_BuffEventOnHitAfterOnly            EBuffEventType = 64
	EBuffEventType_BuffEventOnBeHealAfterOnly         EBuffEventType = 65
	EBuffEventType_BuffEventOnHealAfterOnly           EBuffEventType = 66
	EBuffEventType_BuffEventHealCalcAttrBefore        EBuffEventType = 67
	EBuffEventType_BuffEventProduceHealCalcAttrBefore EBuffEventType = 68
	EBuffEventType_BuffEventReviveSuccessEnd          EBuffEventType = 69
	EBuffEventType_BuffEventAfterReviveFirstMove      EBuffEventType = 70
	EBuffEventType_BuffEventMonsterIntoAlert          EBuffEventType = 71
	EBuffEventType_BuffEventMonsterOutAlert           EBuffEventType = 72
	EBuffEventType_BuffEventOnAddShieldCalcBefore     EBuffEventType = 73
	EBuffEventType_BuffEventOnAddShieldBefore         EBuffEventType = 74
	EBuffEventType_BuffEventOnAddShieldAfter          EBuffEventType = 75
	EBuffEventType_BuffEventOnBeAddedShieldCalcBefore EBuffEventType = 76
	EBuffEventType_BuffEventOnBeAddedShieldBefore     EBuffEventType = 77
	EBuffEventType_BuffEventOnBeAddedShieldAfter      EBuffEventType = 78
	EBuffEventType_BuffEventProgressWatcher           EBuffEventType = 79
	EBuffEventType_BuffEventOnLuckyDamage             EBuffEventType = 80
	EBuffEventType_BuffEventSkillCDEnd                EBuffEventType = 81
	EBuffEventType_BuffEventMotionless                EBuffEventType = 82
	EBuffEventType_BuffEventParticipateKill           EBuffEventType = 83
	EBuffEventType_BuffEventProfessionBDTypeChange    EBuffEventType = 84
	EBuffEventType_BuffEventSingingBegin              EBuffEventType = 85
	EBuffEventType_BuffEventGuideBegin                EBuffEventType = 86
	EBuffEventType_BuffEventRandTimer                 EBuffEventType = 87
	EBuffEventType_BuffEventIntoFractureState         EBuffEventType = 88
	EBuffEventType_BuffEventTakeOnRide                EBuffEventType = 89
	EBuffEventType_BuffEventTakeOffRide               EBuffEventType = 90
	EBuffEventType_BuffEventStartJump                 EBuffEventType = 91
	EBuffEventType_BuffEventPlayAction                EBuffEventType = 92
	EBuffEventType_BuffEventPlayEmote                 EBuffEventType = 93
	EBuffEventType_BuffEventCheck                     EBuffEventType = 1001
	EBuffEventType_BuffEventCustomize                 EBuffEventType = 1002
	EBuffEventType_BuffEventShapeshiftEndEvent        EBuffEventType = 1003
	EBuffEventType_BuffEventAttrRefresh               EBuffEventType = 1004
	EBuffEventType_BuffEventMonitorTeamKillActor      EBuffEventType = 1005
	EBuffEventType_BuffEventSpecialEffects            EBuffEventType = 10001
)

// Enum value maps for EBuffEventType.
var (
	EBuffEventType_name = map[int32]string{
		0:     "BuffEventUnknown",
		1:     "BuffEventAddTo",
		2:     "BuffEventRemove",
		3:     "BuffEventReplace",
		4:     "BuffEventTimer",
		5:     "BuffEventStackLayer",
		6:     "BuffEventRemoveLayer",
		7:     "BuffEventOnHitTargetBefore",
		8:     "BuffEventOnHitTargetAfter",
		9:     "BuffEventOnHittedBefore",
		10:    "BuffEventOnHittedAfter",
		11:    "BuffEventOnReachMaxLayer",
		12:    "BuffEventHostDeath",
		13:    "BuffEventOnSkillHitAfter",
		14:    "BuffEventTrigTimingAura",
		15:    "BuffEventBodyPartDead",
		16:    "BuffEventBodyPartHit",
		17:    "BuffEventBodyPartStateChange",
		18:    "BuffEventOnPartHittedBefore",
		19:    "BuffEventOnPartHittedAfter",
		20:    "BuffEventGravitational",
		21:    "BuffEventFightResChange",
		23:    "BuffEventOnKillActor",
		24:    "BuffEventAttrWatcher",
		25:    "BuffEventOnHittedLHBefore",
		26:    "BuffEventOnBeHittedLHBefore",
		27:    "BuffEventAddByTarget",
		28:    "BuffEventRemoveByTarget",
		29:    "BuffEventInCombatState",
		30:    "BuffEventOutCombatState",
		31:    "BuffEventSkillBegin",
		32:    "BuffEventSkillEnd",
		34:    "BuffEventSingingEnd",
		35:    "BuffEventSummonBuffAdd",
		36:    "BuffEventSummonEntity",
		37:    "BuffEventGuideEnd",
		39:    "BuffEventOnDelayHit",
		40:    "BuffEventTeamBuffAdd",
		41:    "BuffEventChangeProfession",
		42:    "BuffEventDodgeSuccess",
		43:    "BuffEventHealBefore",
		44:    "BuffEventHealAfter",
		45:    "BuffEventProduceHealBefore",
		46:    "BuffEventProduceHealAfter",
		47:    "BuffEventShieldBroken",
		48:    "BuffEventLinkingStart",
		49:    "BuffEventLinkingEnd",
		50:    "BuffEventLinkingWatcher",
		51:    "BuffEventSuperArmorBroken",
		52:    "BuffEventAddedByTargetTag",
		53:    "BuffEventAddToTargetTag",
		57:    "BuffEventOnBeHitLessenHp",
		58:    "BuffEventEnterBreaking",
		59:    "BuffEventTeleportBelt",
		63:    "BuffEventOnBeHitAfterOnly",
		64:    "BuffEventOnHitAfterOnly",
		65:    "BuffEventOnBeHealAfterOnly",
		66:    "BuffEventOnHealAfterOnly",
		67:    "BuffEventHealCalcAttrBefore",
		68:    "BuffEventProduceHealCalcAttrBefore",
		69:    "BuffEventReviveSuccessEnd",
		70:    "BuffEventAfterReviveFirstMove",
		71:    "BuffEventMonsterIntoAlert",
		72:    "BuffEventMonsterOutAlert",
		73:    "BuffEventOnAddShieldCalcBefore",
		74:    "BuffEventOnAddShieldBefore",
		75:    "BuffEventOnAddShieldAfter",
		76:    "BuffEventOnBeAddedShieldCalcBefore",
		77:    "BuffEventOnBeAddedShieldBefore",
		78:    "BuffEventOnBeAddedShieldAfter",
		79:    "BuffEventProgressWatcher",
		80:    "BuffEventOnLuckyDamage",
		81:    "BuffEventSkillCDEnd",
		82:    "BuffEventMotionless",
		83:    "BuffEventParticipateKill",
		84:    "BuffEventProfessionBDTypeChange",
		85:    "BuffEventSingingBegin",
		86:    "BuffEventGuideBegin",
		87:    "BuffEventRandTimer",
		88:    "BuffEventIntoFractureState",
		89:    "BuffEventTakeOnRide",
		90:    "BuffEventTakeOffRide",
		91:    "BuffEventStartJump",
		92:    "BuffEventPlayAction",
		93:    "BuffEventPlayEmote",
		1001:  "BuffEventCheck",
		1002:  "BuffEventCustomize",
		1003:  "BuffEventShapeshiftEndEvent",
		1004:  "BuffEventAttrRefresh",
		1005:  "BuffEventMonitorTeamKillActor",
		10001: "BuffEventSpecialEffects",
	}
	EBuffEventType_value = map[string]int32{
		"BuffEventUnknown":                   0,
		"BuffEventAddTo":                     1,
		"BuffEventRemove":                    2,
		"BuffEventReplace":                   3,
		"BuffEventTimer":                     4,
		"BuffEventStackLayer":                5,
		"BuffEventRemoveLayer":               6,
		"BuffEventOnHitTargetBefore":         7,
		"BuffEventOnHitTargetAfter":          8,
		"BuffEventOnHittedBefore":            9,
		"BuffEventOnHittedAfter":             10,
		"BuffEventOnReachMaxLayer":           11,
		"BuffEventHostDeath":                 12,
		"BuffEventOnSkillHitAfter":           13,
		"BuffEventTrigTimingAura":            14,
		"BuffEventBodyPartDead":              15,
		"BuffEventBodyPartHit":               16,
		"BuffEventBodyPartStateChange":       17,
		"BuffEventOnPartHittedBefore":        18,
		"BuffEventOnPartHittedAfter":         19,
		"BuffEventGravitational":             20,
		"BuffEventFightResChange":            21,
		"BuffEventOnKillActor":               23,
		"BuffEventAttrWatcher":               24,
		"BuffEventOnHittedLHBefore":          25,
		"BuffEventOnBeHittedLHBefore":        26,
		"BuffEventAddByTarget":               27,
		"BuffEventRemoveByTarget":            28,
		"BuffEventInCombatState":             29,
		"BuffEventOutCombatState":            30,
		"BuffEventSkillBegin":                31,
		"BuffEventSkillEnd":                  32,
		"BuffEventSingingEnd":                34,
		"BuffEventSummonBuffAdd":             35,
		"BuffEventSummonEntity":              36,
		"BuffEventGuideEnd":                  37,
		"BuffEventOnDelayHit":                39,
		"BuffEventTeamBuffAdd":               40,
		"BuffEventChangeProfession":          41,
		"BuffEventDodgeSuccess":              42,
		"BuffEventHealBefore":                43,
		"BuffEventHealAfter":                 44,
		"BuffEventProduceHealBefore":         45,
		"BuffEventProduceHealAfter":          46,
		"BuffEventShieldBroken":              47,
		"BuffEventLinkingStart":              48,
		"BuffEventLinkingEnd":                49,
		"BuffEventLinkingWatcher":            50,
		"BuffEventSuperArmorBroken":          51,
		"BuffEventAddedByTargetTag":          52,
		"BuffEventAddToTargetTag":            53,
		"BuffEventOnBeHitLessenHp":           57,
		"BuffEventEnterBreaking":             58,
		"BuffEventTeleportBelt":              59,
		"BuffEventOnBeHitAfterOnly":          63,
		"BuffEventOnHitAfterOnly":            64,
		"BuffEventOnBeHealAfterOnly":         65,
		"BuffEventOnHealAfterOnly":           66,
		"BuffEventHealCalcAttrBefore":        67,
		"BuffEventProduceHealCalcAttrBefore": 68,
		"BuffEventReviveSuccessEnd":          69,
		"BuffEventAfterReviveFirstMove":      70,
		"BuffEventMonsterIntoAlert":          71,
		"BuffEventMonsterOutAlert":           72,
		"BuffEventOnAddShieldCalcBefore":     73,
		"BuffEventOnAddShieldBefore":         74,
		"BuffEventOnAddShieldAfter":          75,
		"BuffEventOnBeAddedShieldCalcBefore": 76,
		"BuffEventOnBeAddedShieldBefore":     77,
		"BuffEventOnBeAddedShieldAfter":      78,
		"BuffEventProgressWatcher":           79,
		"BuffEventOnLuckyDamage":             80,
		"BuffEventSkillCDEnd":                81,
		"BuffEventMotionless":                82,
		"BuffEventParticipateKill":           83,
		"BuffEventProfessionBDTypeChange":    84,
		"BuffEventSingingBegin":              85,
		"BuffEventGuideBegin":                86,
		"BuffEventRandTimer":                 87,
		"BuffEventIntoFractureState":         88,
		"BuffEventTakeOnRide":                89,
		"BuffEventTakeOffRide":               90,
		"BuffEventStartJump":                 91,
		"BuffEventPlayAction":                92,
		"BuffEventPlayEmote":                 93,
		"BuffEventCheck":                     1001,
		"BuffEventCustomize":                 1002,
		"BuffEventShapeshiftEndEvent":        1003,
		"BuffEventAttrRefresh":               1004,
		"BuffEventMonitorTeamKillActor":      1005,
		"BuffEventSpecialEffects":            10001,
	}
)

func (x EBuffEventType) Enum() *EBuffEventType {
	p := new(EBuffEventType)
	*p = x
	return p
}

func (x EBuffEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBuffEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[11].Descriptor()
}

func (EBuffEventType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[11]
}

func (x EBuffEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBuffEventType.Descriptor instead.
func (EBuffEventType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{11}
}

type ESkillCDType int32

const (
	ESkillCDType_ESkillCDNormal ESkillCDType = 0
	ESkillCDType_ESkillCDCharge ESkillCDType = 1
)

// Enum value maps for ESkillCDType.
var (
	ESkillCDType_name = map[int32]string{
		0: "ESkillCDNormal",
		1: "ESkillCDCharge",
	}
	ESkillCDType_value = map[string]int32{
		"ESkillCDNormal": 0,
		"ESkillCDCharge": 1,
	}
)

func (x ESkillCDType) Enum() *ESkillCDType {
	p := new(ESkillCDType)
	*p = x
	return p
}

func (x ESkillCDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESkillCDType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[12].Descriptor()
}

func (ESkillCDType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[12]
}

func (x ESkillCDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESkillCDType.Descriptor instead.
func (ESkillCDType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{12}
}

type EEntityType int32

const (
	EEntityType_EntErrType        EEntityType = 0
	EEntityType_EntMonster        EEntityType = 1
	EEntityType_EntNpc            EEntityType = 2
	EEntityType_EntSceneObject    EEntityType = 3
	EEntityType_EntZone           EEntityType = 5
	EEntityType_EntBullet         EEntityType = 6
	EEntityType_EntClientBullet   EEntityType = 7
	EEntityType_EntPet            EEntityType = 8
	EEntityType_EntChar           EEntityType = 10
	EEntityType_EntDummy          EEntityType = 11
	EEntityType_EntDrop           EEntityType = 12
	EEntityType_EntField          EEntityType = 14
	EEntityType_EntTrap           EEntityType = 15
	EEntityType_EntCollection     EEntityType = 16
	EEntityType_EntStaticObject   EEntityType = 18
	EEntityType_EntVehicle        EEntityType = 19
	EEntityType_EntToy            EEntityType = 20
	EEntityType_EntCommunityHouse EEntityType = 21
	EEntityType_EntHouseItem      EEntityType = 22
	EEntityType_EntCount          EEntityType = 23
)

// Enum value maps for EEntityType.
var (
	EEntityType_name = map[int32]string{
		0:  "EntErrType",
		1:  "EntMonster",
		2:  "EntNpc",
		3:  "EntSceneObject",
		5:  "EntZone",
		6:  "EntBullet",
		7:  "EntClientBullet",
		8:  "EntPet",
		10: "EntChar",
		11: "EntDummy",
		12: "EntDrop",
		14: "EntField",
		15: "EntTrap",
		16: "EntCollection",
		18: "EntStaticObject",
		19: "EntVehicle",
		20: "EntToy",
		21: "EntCommunityHouse",
		22: "EntHouseItem",
		23: "EntCount",
	}
	EEntityType_value = map[string]int32{
		"EntErrType":        0,
		"EntMonster":        1,
		"EntNpc":            2,
		"EntSceneObject":    3,
		"EntZone":           5,
		"EntBullet":         6,
		"EntClientBullet":   7,
		"EntPet":            8,
		"EntChar":           10,
		"EntDummy":          11,
		"EntDrop":           12,
		"EntField":          14,
		"EntTrap":           15,
		"EntCollection":     16,
		"EntStaticObject":   18,
		"EntVehicle":        19,
		"EntToy":            20,
		"EntCommunityHouse": 21,
		"EntHouseItem":      22,
		"EntCount":          23,
	}
)

func (x EEntityType) Enum() *EEntityType {
	p := new(EEntityType)
	*p = x
	return p
}

func (x EEntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[13].Descriptor()
}

func (EEntityType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[13]
}

func (x EEntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EEntityType.Descriptor instead.
func (EEntityType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{13}
}

type EAppearType int32

const (
	EAppearType_EAppearNull               EAppearType = 0
	EAppearType_EAppearTransferIn         EAppearType = 1
	EAppearType_EAppearTransferPassLineIn EAppearType = 2
)

// Enum value maps for EAppearType.
var (
	EAppearType_name = map[int32]string{
		0: "EAppearNull",
		1: "EAppearTransferIn",
		2: "EAppearTransferPassLineIn",
	}
	EAppearType_value = map[string]int32{
		"EAppearNull":               0,
		"EAppearTransferIn":         1,
		"EAppearTransferPassLineIn": 2,
	}
)

func (x EAppearType) Enum() *EAppearType {
	p := new(EAppearType)
	*p = x
	return p
}

func (x EAppearType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EAppearType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[14].Descriptor()
}

func (EAppearType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[14]
}

func (x EAppearType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EAppearType.Descriptor instead.
func (EAppearType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{14}
}

type EDisappearType int32

const (
	EDisappearType_EDisappearNormal                EDisappearType = 0
	EDisappearType_EDisappearDead                  EDisappearType = 1
	EDisappearType_EDisappearDestroy               EDisappearType = 2
	EDisappearType_EDisappearTransferLeave         EDisappearType = 3
	EDisappearType_EDisappearTransferPassLineLeave EDisappearType = 4
)

// Enum value maps for EDisappearType.
var (
	EDisappearType_name = map[int32]string{
		0: "EDisappearNormal",
		1: "EDisappearDead",
		2: "EDisappearDestroy",
		3: "EDisappearTransferLeave",
		4: "EDisappearTransferPassLineLeave",
	}
	EDisappearType_value = map[string]int32{
		"EDisappearNormal":                0,
		"EDisappearDead":                  1,
		"EDisappearDestroy":               2,
		"EDisappearTransferLeave":         3,
		"EDisappearTransferPassLineLeave": 4,
	}
)

func (x EDisappearType) Enum() *EDisappearType {
	p := new(EDisappearType)
	*p = x
	return p
}

func (x EDisappearType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDisappearType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[15].Descriptor()
}

func (EDisappearType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[15]
}

func (x EDisappearType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDisappearType.Descriptor instead.
func (EDisappearType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{15}
}

type EGender int32

const (
	EGender_GenderNull   EGender = 0
	EGender_GenderMale   EGender = 1
	EGender_GenderFemale EGender = 2
)

// Enum value maps for EGender.
var (
	EGender_name = map[int32]string{
		0: "GenderNull",
		1: "GenderMale",
		2: "GenderFemale",
	}
	EGender_value = map[string]int32{
		"GenderNull":   0,
		"GenderMale":   1,
		"GenderFemale": 2,
	}
)

func (x EGender) Enum() *EGender {
	p := new(EGender)
	*p = x
	return p
}

func (x EGender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EGender) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[16].Descriptor()
}

func (EGender) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[16]
}

func (x EGender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EGender.Descriptor instead.
func (EGender) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{16}
}

type EErrorCode int32

const (
	EErrorCode_ErrSuccess                                    EErrorCode = 0
	EErrorCode_ErrNoRecord                                   EErrorCode = 101
	EErrorCode_ErrExceptionCancel                            EErrorCode = 102
	EErrorCode_ErrDBException                                EErrorCode = 103
	EErrorCode_ErrDBSeqException                             EErrorCode = 104
	EErrorCode_ErrDBSceneException                           EErrorCode = 105
	EErrorCode_ErrDBTokenException                           EErrorCode = 106
	EErrorCode_ErrCancelled                                  EErrorCode = 201
	EErrorCode_ErrUnknownRpc                                 EErrorCode = 202
	EErrorCode_ErrInvalidArgument                            EErrorCode = 203
	EErrorCode_ErrDeadlineExceeded                           EErrorCode = 204
	EErrorCode_ErrNotFound                                   EErrorCode = 205
	EErrorCode_ErrAlreadyExists                              EErrorCode = 206
	EErrorCode_ErrPermissionDenied                           EErrorCode = 207
	EErrorCode_ErrResourceExhausted                          EErrorCode = 208
	EErrorCode_ErrFailedPrecondition                         EErrorCode = 209
	EErrorCode_ErrAborted                                    EErrorCode = 210
	EErrorCode_ErrOutOfRange                                 EErrorCode = 211
	EErrorCode_ErrUnimplemented                              EErrorCode = 212
	EErrorCode_ErrInternal                                   EErrorCode = 213
	EErrorCode_ErrUnavailable                                EErrorCode = 214
	EErrorCode_ErrDataLoss                                   EErrorCode = 215
	EErrorCode_ErrUnauthenticated                            EErrorCode = 216
	EErrorCode_ErrSystemMax                                  EErrorCode = 999
	EErrorCode_ErrDBError                                    EErrorCode = 1000
	EErrorCode_ErrCreateOpenInfo                             EErrorCode = 1001
	EErrorCode_ErrCreateAccountInfo                          EErrorCode = 1002
	EErrorCode_ErrCreateCharInfo                             EErrorCode = 1003
	EErrorCode_ErrCreateAccountToken                         EErrorCode = 1004
	EErrorCode_ErrGetOpenInfo                                EErrorCode = 1005
	EErrorCode_ErrGetAccountInfo                             EErrorCode = 1006
	EErrorCode_ErrGetCharInfo                                EErrorCode = 1007
	EErrorCode_ErrGetAccountToken                            EErrorCode = 1008
	EErrorCode_ErrLoginInQueue                               EErrorCode = 1009
	EErrorCode_ErrOtherLogin                                 EErrorCode = 1010
	EErrorCode_ErrServerError                                EErrorCode = 1011
	EErrorCode_ErrNoAccountInfo                              EErrorCode = 1012
	EErrorCode_ErrNoCharInfo                                 EErrorCode = 1013
	EErrorCode_ErrTokenExpired                               EErrorCode = 1014
	EErrorCode_ErrUpdateTokenFail                            EErrorCode = 1015
	EErrorCode_ErrRegIntoSceneError                          EErrorCode = 1016
	EErrorCode_ErrLoginTypeErr                               EErrorCode = 1017
	EErrorCode_ErrChangeMapErr                               EErrorCode = 1018
	EErrorCode_ErrLoginPlatformErr                           EErrorCode = 1019
	EErrorCode_ErrVersionErr                                 EErrorCode = 1020
	EErrorCode_ErrDelayOffLineKickOff                        EErrorCode = 1021
	EErrorCode_ErrServiceLanguageError                       EErrorCode = 1022
	EErrorCode_NoEnterScene                                  EErrorCode = 1023
	EErrorCode_ModIDNotOpen                                  EErrorCode = 1024
	EErrorCode_ErrFaceData                                   EErrorCode = 1025
	EErrorCode_ErrInitProfession                             EErrorCode = 1026
	EErrorCode_ErrSceneCloseKickoff                          EErrorCode = 1027
	EErrorCode_ErrLoginReconnectKick                         EErrorCode = 1028
	EErrorCode_ErrLoginErrorResume                           EErrorCode = 1029
	EErrorCode_ErrRepeatedLogin                              EErrorCode = 1030
	EErrorCode_ErrRestrictLogin                              EErrorCode = 1031
	EErrorCode_ErrRestrictBlack                              EErrorCode = 1032
	EErrorCode_ErrSdkVerifyFail                              EErrorCode = 1033
	EErrorCode_ErrSdkTokenExpired                            EErrorCode = 1034
	EErrorCode_ErrServerNotOpen                              EErrorCode = 1035
	EErrorCode_ErrServerEndOpen                              EErrorCode = 1036
	EErrorCode_ErrNormalKick                                 EErrorCode = 1037
	EErrorCode_ErrServerBusy                                 EErrorCode = 1038
	EErrorCode_ErrServerClose                                EErrorCode = 1039
	EErrorCode_ErrExitGame                                   EErrorCode = 1040
	EErrorCode_ErrHopeKick                                   EErrorCode = 1041
	EErrorCode_ErrClientVersionError                         EErrorCode = 1042
	EErrorCode_ErrInvalidDeviceId                            EErrorCode = 1043
	EErrorCode_ErrInvalidSystemType                          EErrorCode = 1044
	EErrorCode_ErrDeleteChar                                 EErrorCode = 1045
	EErrorCode_ErrCancelDeleteChar                           EErrorCode = 1046
	EErrorCode_ErrCancelDeleteCharIsDelete                   EErrorCode = 1047
	EErrorCode_ErrIntoSceneOwnerFail                         EErrorCode = 1048
	EErrorCode_ErrSceneQueueUp                               EErrorCode = 1050
	EErrorCode_ErrProtocolVersionErr                         EErrorCode = 1051
	EErrorCode_ErrConfigVersionErr                           EErrorCode = 1052
	EErrorCode_ErrStateEventFailed                           EErrorCode = 1053
	EErrorCode_ErrSelectCharDoing                            EErrorCode = 1054
	EErrorCode_ErrSelectCharDeleted                          EErrorCode = 1055
	EErrorCode_ErrLoginChannelMax                            EErrorCode = 1056
	EErrorCode_ErrDeleteAccountKick                          EErrorCode = 1057
	EErrorCode_ErrIsDeleteAccount                            EErrorCode = 1058
	EErrorCode_ErrIsVersionKick                              EErrorCode = 1059
	EErrorCode_ErrNotQQChnnel                                EErrorCode = 1060
	EErrorCode_ErrIncorrectLaunchPlatform                    EErrorCode = 1061
	EErrorCode_ErrConditionWrong                             EErrorCode = 1062
	EErrorCode_ErrNotSupportLoginType                        EErrorCode = 1063
	EErrorCode_ErrSceneNotExist                              EErrorCode = 2001
	EErrorCode_ErrUserNotExist                               EErrorCode = 2002
	EErrorCode_ErrComponentNotExist                          EErrorCode = 2003
	EErrorCode_ErrSceneConfigNotExist                        EErrorCode = 2004
	EErrorCode_ErrServiceNotExist                            EErrorCode = 2005
	EErrorCode_ErrDataContainerNotExist                      EErrorCode = 2006
	EErrorCode_ErrAsynchronousReturn                         EErrorCode = 2007
	EErrorCode_ErrConfigNotExist                             EErrorCode = 2008
	EErrorCode_ErrNotUser                                    EErrorCode = 2009
	EErrorCode_ErrConfigError                                EErrorCode = 2010
	EErrorCode_ErrActorNotExist                              EErrorCode = 2011
	EErrorCode_ErrCutSceneAlreadyPlayed                      EErrorCode = 2012
	EErrorCode_ErrFunctionUnlock                             EErrorCode = 2020
	EErrorCode_ErrFunctionClosed                             EErrorCode = 2021
	EErrorCode_ErrUserPlayerNotFurniturePackage              EErrorCode = 2022
	EErrorCode_ErrSysInnerError                              EErrorCode = 2200
	EErrorCode_ErrSysWebClientNull                           EErrorCode = 2201
	EErrorCode_ErrSysWebRequestTimeOut                       EErrorCode = 2202
	EErrorCode_ErrSysWebReturnError                          EErrorCode = 2203
	EErrorCode_ErrRequestTooFrequently                       EErrorCode = 2204
	EErrorCode_ErrArgStringTooLong                           EErrorCode = 2251
	EErrorCode_ErrArgStringEmpty                             EErrorCode = 2252
	EErrorCode_ErrArgArrayTooBig                             EErrorCode = 2253
	EErrorCode_ErrArgArrayEmpty                              EErrorCode = 2254
	EErrorCode_ErrArgMapTooBig                               EErrorCode = 2255
	EErrorCode_ErrArgMapEmpty                                EErrorCode = 2256
	EErrorCode_ErrItemNotExist                               EErrorCode = 2300
	EErrorCode_ErrPackageNotExist                            EErrorCode = 2301
	EErrorCode_ErrPackageFull                                EErrorCode = 2302
	EErrorCode_ErrItemExpireTime                             EErrorCode = 2303
	EErrorCode_ErrItemPackageGridNotEnough                   EErrorCode = 2304
	EErrorCode_ErrItemUUIDError                              EErrorCode = 2305
	EErrorCode_ErrItemNotEnough                              EErrorCode = 2306
	EErrorCode_ErrOptTypeError                               EErrorCode = 2307
	EErrorCode_ErrItemInCoolDown                             EErrorCode = 2308
	EErrorCode_ErrItemNotUse                                 EErrorCode = 2309
	EErrorCode_ErrItemEffectTypeError                        EErrorCode = 2310
	EErrorCode_ErrItemParamError                             EErrorCode = 2311
	EErrorCode_ErrItemAddBuffError                           EErrorCode = 2312
	EErrorCode_ErrItemAdd                                    EErrorCode = 2313
	EErrorCode_ErrUseItemState                               EErrorCode = 2314
	EErrorCode_ErrBatchUse                                   EErrorCode = 2315
	EErrorCode_ErrFullSendMail                               EErrorCode = 2316
	EErrorCode_ErrItemNumZero                                EErrorCode = 2317
	EErrorCode_ErrItemSelectAwardIllegalNum                  EErrorCode = 2318
	EErrorCode_ErrItemSelectAwardIllegalPos                  EErrorCode = 2319
	EErrorCode_ErrItemSelectLimit                            EErrorCode = 2320
	EErrorCode_ErrItemPeriodGainExceeded                     EErrorCode = 2321
	EErrorCode_ErrItemNoRecycle                              EErrorCode = 2322
	EErrorCode_ErrItemRecycleBeyondMaxGrid                   EErrorCode = 2323
	EErrorCode_ErrItemRecycleBeyondMaxNum                    EErrorCode = 2324
	EErrorCode_ErrItemRecycleIdNoMatchItemId                 EErrorCode = 2325
	EErrorCode_ErrItemRecycleIllegalId                       EErrorCode = 2326
	EErrorCode_ErrItemLimitCount                             EErrorCode = 2327
	EErrorCode_ErrItemFriendPontExceeded                     EErrorCode = 2328
	EErrorCode_ErrItemToySingleEntUseExceeded                EErrorCode = 2329
	EErrorCode_ErrItemToySceneUseExceeded                    EErrorCode = 2330
	EErrorCode_ErrItemToyUseInDisableArea                    EErrorCode = 2331
	EErrorCode_ErrItemToySingleCellUseExceeded               EErrorCode = 2332
	EErrorCode_ErrMonthlyCardNotExists                       EErrorCode = 2380
	EErrorCode_ErrMonthlyCardDataError                       EErrorCode = 2381
	EErrorCode_ErrMonthlyCardDayAwardReceived                EErrorCode = 2382
	EErrorCode_ErrMonthlyCardLimitCount                      EErrorCode = 2383
	EErrorCode_ErrCommunityNoHome                            EErrorCode = 2400
	EErrorCode_ErrNotHouseOwner                              EErrorCode = 2401
	EErrorCode_ErrHomeLandExisted                            EErrorCode = 2402
	EErrorCode_ErrHomeLandContentWrongful                    EErrorCode = 2403
	EErrorCode_ErrHouseLivetogetherCD                        EErrorCode = 2404
	EErrorCode_ErrHomeLandNotExisted                         EErrorCode = 2405
	EErrorCode_ErrHomeLandNotInScene                         EErrorCode = 2406
	EErrorCode_ErrHomeLandIsInvitation                       EErrorCode = 2407
	EErrorCode_ErrHomeLandInsufficientAuthority              EErrorCode = 2408
	EErrorCode_ErrHomeLandTransferRequestPending             EErrorCode = 2409
	EErrorCode_ErrHomeLandTransferRequestTimeout             EErrorCode = 2410
	EErrorCode_ErrHomeLandTransferCD                         EErrorCode = 2411
	EErrorCode_ErrHomelandTargetIsHasHome                    EErrorCode = 2412
	EErrorCode_ErrHomelandTargetIsOwner                      EErrorCode = 2413
	EErrorCode_ErrHomelandNotOwnerCannotOperate              EErrorCode = 2414
	EErrorCode_ErrHomeLandHasHouse                           EErrorCode = 2415
	EErrorCode_ErrHomeLandContentTooLong                     EErrorCode = 2416
	EErrorCode_ErrHomeLandClutterNotExist                    EErrorCode = 2417
	EErrorCode_ErrHouseNameOrStatementCD                     EErrorCode = 2418
	EErrorCode_ErrHouseIntroductionStatementCD               EErrorCode = 2419
	EErrorCode_ErrCommunityBuildInvalidRecipeId              EErrorCode = 2420
	EErrorCode_ErrCommunityBuildRecipeIsUnlock               EErrorCode = 2421
	EErrorCode_ErrCommunityBuildMax                          EErrorCode = 2422
	EErrorCode_ErrCommunityBuildNoAuthority                  EErrorCode = 2423
	EErrorCode_ErrCommunityNotBuildCannotCancel              EErrorCode = 2424
	EErrorCode_ErrCommunityBuildNotSelfCannotCancel          EErrorCode = 2425
	EErrorCode_ErrCommunityNotBuildCannotAccelerate          EErrorCode = 2426
	EErrorCode_ErrCommunityBuildNotSelfCannotAccelerate      EErrorCode = 2427
	EErrorCode_ErrCommunityBuildCannotAccelerate             EErrorCode = 2428
	EErrorCode_ErrCommunityBuildAlreadyAccelerate            EErrorCode = 2429
	EErrorCode_ErrCommunityBuildInDungeon                    EErrorCode = 2430
	EErrorCode_ErrCommunityBuildRecipeIsLock                 EErrorCode = 2431
	EErrorCode_ErrCommunityBuildRecipeNotItemUnlock          EErrorCode = 2432
	EErrorCode_ErrCommunityBuildInvalidCount                 EErrorCode = 2433
	EErrorCode_ErrCommunityNotBuildCannotReceive             EErrorCode = 2434
	EErrorCode_ErrCommunityCanNotBuild                       EErrorCode = 2435
	EErrorCode_ErrHomeLandCohabitantLimit                    EErrorCode = 2436
	EErrorCode_ErrHomeLandRootNotQuitCohabitant              EErrorCode = 2437
	EErrorCode_ErrHomeLandNotOwnerCannotQuitCohabitant       EErrorCode = 2438
	EErrorCode_ErrHomeLandCohabitantIsExiting                EErrorCode = 2439
	EErrorCode_ErrHomeLandCohabitantNotExists                EErrorCode = 2440
	EErrorCode_ErrHomeLandCohabitantExitRequestExists        EErrorCode = 2441
	EErrorCode_ErrHomeLandCohabitantDismiss                  EErrorCode = 2442
	EErrorCode_ErrHomeLandNotInvitation                      EErrorCode = 2443
	EErrorCode_ErrHomeLandCohabitantInvitationTimeout        EErrorCode = 2444
	EErrorCode_ErrHomeLandCohabitantNotFriend                EErrorCode = 2445
	EErrorCode_ErrHomeLandCohabitantFriendLevel              EErrorCode = 2446
	EErrorCode_ErrHomeLandCohabitantLevel                    EErrorCode = 2447
	EErrorCode_ErrHomeLandInviteCohabitantNotOwner           EErrorCode = 2448
	EErrorCode_ErrCommunityWarehouseGridFull                 EErrorCode = 2451
	EErrorCode_ErrCommunityWarehouseNoAuthority              EErrorCode = 2452
	EErrorCode_ErrCommunityWarehouseGridPosItemNoEnough      EErrorCode = 2453
	EErrorCode_ErrHomeLandInsufficientFurniture              EErrorCode = 2454
	EErrorCode_ErrCommunityWarehouseTakeOutCountLimit        EErrorCode = 2455
	EErrorCode_ErrHomeLandTaskNotExist                       EErrorCode = 2456
	EErrorCode_ErrHomeLandTaskTimeNotEnough                  EErrorCode = 2457
	EErrorCode_ErrHomeLandTaskAlreadyFinished                EErrorCode = 2458
	EErrorCode_ErrHomeLandTaskItemNotEnough                  EErrorCode = 2459
	EErrorCode_ErrHomeLandCurLevelError                      EErrorCode = 2461
	EErrorCode_ErrHomeLandExpNotEnough                       EErrorCode = 2462
	EErrorCode_ErrHomeLandAlreadyMaxLevel                    EErrorCode = 2463
	EErrorCode_ErrHomeLandLevelLocked                        EErrorCode = 2464
	EErrorCode_ErrHomeLandLevelConfigError                   EErrorCode = 2465
	EErrorCode_ErrCommunityEditorNotEditable                 EErrorCode = 2466
	EErrorCode_ErrCommunityEditorNotFurniture                EErrorCode = 2467
	EErrorCode_ErrCommunityEditorNotOutdoor                  EErrorCode = 2468
	EErrorCode_ErrCommunityEditorNotIndoor                   EErrorCode = 2469
	EErrorCode_ErrCommunityEditorOverMax                     EErrorCode = 2470
	EErrorCode_ErrCommunityEditorOverTypeMax                 EErrorCode = 2471
	EErrorCode_ErrCommunityEditorFurnitureNotEnough          EErrorCode = 2472
	EErrorCode_ErrCommunityEditorFurnitureNotExist           EErrorCode = 2473
	EErrorCode_ErrCommunityEditorOverMaxGroup                EErrorCode = 2474
	EErrorCode_ErrCommunityEditorNoStructure                 EErrorCode = 2475
	EErrorCode_ErrCommunityEditorGroupMaxStructure           EErrorCode = 2476
	EErrorCode_ErrCommunityEditorStructureInGroup            EErrorCode = 2477
	EErrorCode_ErrCommunityEditorGroupNotExist               EErrorCode = 2478
	EErrorCode_ErrCommunityEditorAlreadyExist                EErrorCode = 2479
	EErrorCode_ErrHomeLandSellItemNotExist                   EErrorCode = 2481
	EErrorCode_ErrHomeLandLeftNumNotEnough                   EErrorCode = 2482
	EErrorCode_ErrHomeLandSellShopLocked                     EErrorCode = 2483
	EErrorCode_ErrHomeLandSeedExist                          EErrorCode = 2486
	EErrorCode_ErrHomeLandItemNotOwner                       EErrorCode = 2487
	EErrorCode_ErrHomeLandSeedStateError                     EErrorCode = 2488
	EErrorCode_ErrHomeLandNoSeed                             EErrorCode = 2489
	EErrorCode_ErrHomeLandNoWater                            EErrorCode = 2490
	EErrorCode_ErrHomeLandFertilizerMaxNumLimit              EErrorCode = 2491
	EErrorCode_ErrHomeLandNotFertilize                       EErrorCode = 2492
	EErrorCode_ErrHomeLandNotPollen                          EErrorCode = 2493
	EErrorCode_ErrHomeLandAlreadyPollen                      EErrorCode = 2494
	EErrorCode_ErrHomeLandNotHarvest                         EErrorCode = 2495
	EErrorCode_ErrHomeLandPickUpSinglePlayerLimit            EErrorCode = 2496
	EErrorCode_ErrHomeLandPickUpTotalLimit                   EErrorCode = 2497
	EErrorCode_ErrHomeLandPickUpFlowerNotFinished            EErrorCode = 2498
	EErrorCode_ErrHomeLandPickUpOwner                        EErrorCode = 2499
	EErrorCode_ErrHomeLandGainNotOwner                       EErrorCode = 2500
	EErrorCode_ErrHomeLandItemFullGrid                       EErrorCode = 2501
	EErrorCode_ErrHomeLandFurnitureFull                      EErrorCode = 2502
	EErrorCode_ErrComposeItemNotEnough                       EErrorCode = 2571
	EErrorCode_ErrComposeFailed                              EErrorCode = 2572
	EErrorCode_ErrRedemptionItemNotExist                     EErrorCode = 2573
	EErrorCode_ErrRedemptionItemMaxCount                     EErrorCode = 2574
	EErrorCode_ErrRedemptionItemNotEnough                    EErrorCode = 2575
	EErrorCode_ErrRedemptionItemGender                       EErrorCode = 2576
	EErrorCode_ErrAwardConfigNotFound                        EErrorCode = 2600
	EErrorCode_ErrAwardConfigWeightError                     EErrorCode = 2601
	EErrorCode_ErrAwardConfigLimitAndContentNotMatch         EErrorCode = 2602
	EErrorCode_ErrAwardConfigContentSizeError                EErrorCode = 2603
	EErrorCode_ErrAwardConfigContentRatesSizeError           EErrorCode = 2604
	EErrorCode_ErrAwardConfigContentWeightSizeError          EErrorCode = 2605
	EErrorCode_ErrAwardConfigGroupContentEmpty               EErrorCode = 2606
	EErrorCode_ErrAwardConfigGroupNumEmpty                   EErrorCode = 2607
	EErrorCode_ErrAwardConfigGroupContentNoMatchGroupNum     EErrorCode = 2608
	EErrorCode_ErrAwardConfigNoRandomDrop                    EErrorCode = 2609
	EErrorCode_ErrAwardConfigNoSelectAward                   EErrorCode = 2610
	EErrorCode_ErrAwardConfigSelfSelectContentNoItem         EErrorCode = 2611
	EErrorCode_ErrAwardConfigWeightRateMustOne               EErrorCode = 2612
	EErrorCode_ErrAwardConfigGroupContentRandomNoMatch       EErrorCode = 2613
	EErrorCode_ErrAwardConfigGroupContentError               EErrorCode = 2614
	EErrorCode_ErrAwardConfigPackageContentRandomNoMatch     EErrorCode = 2615
	EErrorCode_ErrAwardConfigLevelUpPackConfigPackageNoMatch EErrorCode = 2616
	EErrorCode_ErrAwardConfigProItemRuleNoMatch              EErrorCode = 2617
	EErrorCode_ErrAwardConfigPackageContentEmpty             EErrorCode = 2618
	EErrorCode_ErrAwardConfigDropContentSize                 EErrorCode = 2619
	EErrorCode_ErrAwardConfigDropContentNum                  EErrorCode = 2620
	EErrorCode_ErrAwardConfigGroupRateEmpty                  EErrorCode = 2621
	EErrorCode_ErrAwardConfigGroupWeightEmpty                EErrorCode = 2622
	EErrorCode_ErrAwardInnerError                            EErrorCode = 2623
	EErrorCode_ErrAwardIllegalRandomType                     EErrorCode = 2624
	EErrorCode_ErrAwardConditionNoMeet                       EErrorCode = 2625
	EErrorCode_ErrAwardRandomTypeNone                        EErrorCode = 2626
	EErrorCode_ErrAwardRandomTypeNoMatch                     EErrorCode = 2627
	EErrorCode_ErrAwardActorIsNull                           EErrorCode = 2628
	EErrorCode_ErrEquipWashAttrNotExist                      EErrorCode = 2700
	EErrorCode_ErrNotEquipInCombat                           EErrorCode = 2701
	EErrorCode_ErrEquipPart                                  EErrorCode = 2702
	EErrorCode_ErrComposeItemNotExist                        EErrorCode = 2750
	EErrorCode_ErrPickupDropItemDistance                     EErrorCode = 2800
	EErrorCode_ErrPickupDropItemPackageFull                  EErrorCode = 2801
	EErrorCode_ErrPickupDropItemNoAuthority                  EErrorCode = 2802
	EErrorCode_ErrLayerActorExist                            EErrorCode = 2851
	EErrorCode_ErrTeamCreateHas                              EErrorCode = 2900
	EErrorCode_ErrTeamIllTarget                              EErrorCode = 2901
	EErrorCode_ErrTeamCreateTryLater                         EErrorCode = 2902
	EErrorCode_ErrTeamGetNo                                  EErrorCode = 2903
	EErrorCode_ErrTeamListEmpty                              EErrorCode = 2904
	EErrorCode_ErrTeamInner                                  EErrorCode = 2905
	EErrorCode_ErrTeamNoLeader                               EErrorCode = 2906
	EErrorCode_ErrTeamInMatch                                EErrorCode = 2907
	EErrorCode_ErrTeamCustomizeTarget                        EErrorCode = 2908
	EErrorCode_ErrTeamNoOwn                                  EErrorCode = 2909
	EErrorCode_ErrTeamTickSelf                               EErrorCode = 2910
	EErrorCode_ErrTeamNoMem                                  EErrorCode = 2911
	EErrorCode_ErrTeamApplyingLeader                         EErrorCode = 2912
	EErrorCode_ErrTeamHasBeLeader                            EErrorCode = 2913
	EErrorCode_ErrTeamNoTransferSelf                         EErrorCode = 2914
	EErrorCode_ErrTeamNoLeaderTransfer                       EErrorCode = 2915
	EErrorCode_ErrTeamHasOwnTeam                             EErrorCode = 2916
	EErrorCode_ErrTeamNoExist                                EErrorCode = 2917
	EErrorCode_ErrTeamApplyInCD                              EErrorCode = 2918
	EErrorCode_ErrTeamApplyExpire                            EErrorCode = 2919
	EErrorCode_ErrTeamJoinOther                              EErrorCode = 2920
	EErrorCode_ErrTeamMemMax                                 EErrorCode = 2921
	EErrorCode_ErrTeamNoInvited                              EErrorCode = 2924
	EErrorCode_ErrTeamIsMatching                             EErrorCode = 2925
	EErrorCode_ErrTeamIllegalTag                             EErrorCode = 2926
	EErrorCode_ErrTeamNoMatching                             EErrorCode = 2927
	EErrorCode_ErrTeamIllegalActivity                        EErrorCode = 2928
	EErrorCode_ErrTeamInActivity                             EErrorCode = 2929
	EErrorCode_ErrTeamNoMeetCondition                        EErrorCode = 2930
	EErrorCode_ErrTeamWaitVoting                             EErrorCode = 2931
	EErrorCode_ErrTeamDoingActivity                          EErrorCode = 2932
	EErrorCode_ErrTeamNoInVoting                             EErrorCode = 2933
	EErrorCode_ErrTeamVoteEnd                                EErrorCode = 2934
	EErrorCode_ErrTeamHasVoted                               EErrorCode = 2935
	EErrorCode_ErrTeamInviteCD                               EErrorCode = 2936
	EErrorCode_ErrTeamApplyLeadCD                            EErrorCode = 2937
	EErrorCode_ErrTeamMoreMaxWorlds                          EErrorCode = 2938
	EErrorCode_ErrTeamValidApplyInfo                         EErrorCode = 2939
	EErrorCode_ErrTeamInMatchCancelCD                        EErrorCode = 2940
	EErrorCode_ErrTeamMatchFinished                          EErrorCode = 2941
	EErrorCode_ErrTeamMatchWaitSec                           EErrorCode = 2942
	EErrorCode_ErrTeamMemWorldFull                           EErrorCode = 2943
	EErrorCode_ErrTeamMemNotLeader                           EErrorCode = 2944
	EErrorCode_ErrTeamLeaderNotStaticScene                   EErrorCode = 2945
	EErrorCode_ErrTeamLeaderCallDoing                        EErrorCode = 2946
	EErrorCode_ErrTeamIllegalCallOperator                    EErrorCode = 2947
	EErrorCode_ErrTeamLeaderIllegalCallOperator              EErrorCode = 2948
	EErrorCode_ErrTeamNoMemCall                              EErrorCode = 2949
	EErrorCode_ErrTeamLeaderCallEnd                          EErrorCode = 2950
	EErrorCode_ErrTeamSameScene                              EErrorCode = 2951
	EErrorCode_ErrTeamNotSameScene                           EErrorCode = 2952
	EErrorCode_ErrTeamMemTooMore                             EErrorCode = 2953
	EErrorCode_ErrTeamMemInDungeon                           EErrorCode = 2954
	EErrorCode_ErrTeamMemTooLess                             EErrorCode = 2955
	EErrorCode_ErrTeamIllegalInviteType                      EErrorCode = 2956
	EErrorCode_ErrTeamMemberNotInScene                       EErrorCode = 2957
	EErrorCode_ErrTeamLeaderReadyCheckTimeNotReady           EErrorCode = 2958
	EErrorCode_ErrTeamExistDungeonCheck                      EErrorCode = 2959
	EErrorCode_ErrTeamTargetMatchTalentLimit                 EErrorCode = 2960
	EErrorCode_ErrTeamEditGroupNotAllowed                    EErrorCode = 2961
	EErrorCode_ErrTeamGroupNotExist                          EErrorCode = 2962
	EErrorCode_ErrTeamTargetNoMatchMemberType                EErrorCode = 2963
	EErrorCode_ErrDecomposeItemNotExist                      EErrorCode = 3000
	EErrorCode_ErrDecomposeItemNotEnough                     EErrorCode = 3001
	EErrorCode_ErrRefineEnergyNotEnough                      EErrorCode = 3002
	EErrorCode_ErrRefineItemMaxCount                         EErrorCode = 3003
	EErrorCode_ErrRefineItemNotExist                         EErrorCode = 3004
	EErrorCode_ErrRefineItemColumnNotUnlock                  EErrorCode = 3005
	EErrorCode_ErrRefineItemColumnUnlock                     EErrorCode = 3006
	EErrorCode_ErrRefineItemExist                            EErrorCode = 3007
	EErrorCode_ErrEnergyLimitMax                             EErrorCode = 3008
	EErrorCode_ErrRefineItemColumnNotEmpty                   EErrorCode = 3009
	EErrorCode_ErrProfessionNotExist                         EErrorCode = 3056
	EErrorCode_ErrModSlotNotUnlock                           EErrorCode = 3058
	EErrorCode_ErrChangeProfessionStateFail                  EErrorCode = 3065
	EErrorCode_ErrChangeProfessionCDFail                     EErrorCode = 3066
	EErrorCode_ErrProfessionSkinNotActive                    EErrorCode = 3071
	EErrorCode_ErrProfessionSkinActive                       EErrorCode = 3072
	EErrorCode_ErrProfessionNotUseSkin                       EErrorCode = 3073
	EErrorCode_ErrProfessionSkillSkinActive                  EErrorCode = 3074
	EErrorCode_ErrProfessionSkillSkinNotActive               EErrorCode = 3075
	EErrorCode_ErrProfessionSkillNotActive                   EErrorCode = 3076
	EErrorCode_ErrCharOffline                                EErrorCode = 3101
	EErrorCode_ErrUserDataBaseError                          EErrorCode = 3102
	EErrorCode_ErrCharGetFail                                EErrorCode = 3103
	EErrorCode_ErrAlreadyAlive                               EErrorCode = 3200
	EErrorCode_ErrReviveParam                                EErrorCode = 3201
	EErrorCode_ErrStateIllegal                               EErrorCode = 3202
	EErrorCode_ErrStateNoChange                              EErrorCode = 3203
	EErrorCode_ErrReviveConsumeNotEnough                     EErrorCode = 3204
	EErrorCode_ErrReviveByOtherForbid                        EErrorCode = 3205
	EErrorCode_ErrReviveTimeNotArrived                       EErrorCode = 3206
	EErrorCode_ErrReviveBossBattle                           EErrorCode = 3207
	EErrorCode_ErrReviveCountLimit                           EErrorCode = 3208
	EErrorCode_ErrReviveInDeadTp                             EErrorCode = 3209
	EErrorCode_ErrDungeonPlayTypeError                       EErrorCode = 3301
	EErrorCode_ErrDungeonNotExist                            EErrorCode = 3302
	EErrorCode_ErrDungeonCreateError                         EErrorCode = 3303
	EErrorCode_ErrCantChangeDungeon                          EErrorCode = 3304
	EErrorCode_ErrDungeonLock                                EErrorCode = 3305
	EErrorCode_ErrPioneerFail                                EErrorCode = 3306
	EErrorCode_ErrAwardFail                                  EErrorCode = 3307
	EErrorCode_ErrGsNotEnough                                EErrorCode = 3308
	EErrorCode_ErrQuestNotCompleted                          EErrorCode = 3309
	EErrorCode_ErrDungeonNotClear                            EErrorCode = 3310
	EErrorCode_ErrConditionNotExist                          EErrorCode = 3311
	EErrorCode_ErrAwardReceived                              EErrorCode = 3312
	EErrorCode_ErrCantRepeatedPlay                           EErrorCode = 3313
	EErrorCode_ErrNeedPassPreRoom                            EErrorCode = 3314
	EErrorCode_ErrDungeonEnterCountLimit                     EErrorCode = 3315
	EErrorCode_ErrDungeonScoreError                          EErrorCode = 3316
	EErrorCode_ErrDungeonRepeatedVote                        EErrorCode = 3317
	EErrorCode_ErrDungeonChallengeAwardState                 EErrorCode = 3318
	EErrorCode_ErrDungeonChallengeAffixNotFound              EErrorCode = 3319
	EErrorCode_ErrDungeonStateNotActive                      EErrorCode = 3320
	EErrorCode_ErrDungeonCantVoteSelf                        EErrorCode = 3321
	EErrorCode_ErrDungeonPlayerNotEnough                     EErrorCode = 3322
	EErrorCode_ErrDungeonPlayerFull                          EErrorCode = 3323
	EErrorCode_ErrDungeonCantHeroKey                         EErrorCode = 3324
	EErrorCode_ErrDungeonNotSettlement                       EErrorCode = 3325
	EErrorCode_ErrDungeonNotFindRollItem                     EErrorCode = 3326
	EErrorCode_ErrDungeonCantRoll                            EErrorCode = 3327
	EErrorCode_ErrDungeonRollFinish                          EErrorCode = 3328
	EErrorCode_ErrDungeonSelectError                         EErrorCode = 3329
	EErrorCode_ErrDungeonAiModeError                         EErrorCode = 3330
	EErrorCode_ErrDungeonTargetNotFinish                     EErrorCode = 3331
	EErrorCode_ErrDungeonTargetBeAward                       EErrorCode = 3332
	EErrorCode_ErrDungeonSinglePlayerMore                    EErrorCode = 3333
	EErrorCode_ErrDungeonAiGroupNotEnough                    EErrorCode = 3334
	EErrorCode_ErrDungeonNoPass                              EErrorCode = 3335
	EErrorCode_ErrDungeonCloseSceneId                        EErrorCode = 3336
	EErrorCode_ErrDungeonEnterTypeError                      EErrorCode = 3337
	EErrorCode_ErrDungeonActorCount                          EErrorCode = 3338
	EErrorCode_ErrDungeonDiffLocked                          EErrorCode = 3339
	EErrorCode_ErrDungeonPreBattleVoteCd                     EErrorCode = 3340
	EErrorCode_ErrDungeonBossInvalid                         EErrorCode = 3341
	EErrorCode_ErrDungeonNoUser                              EErrorCode = 3342
	EErrorCode_ErrDungeonUserInvalid                         EErrorCode = 3343
	EErrorCode_ErrDungeonAwardualification                   EErrorCode = 3344
	EErrorCode_ErrDungeonAwardTriesLimit                     EErrorCode = 3345
	EErrorCode_ErrFashionIsLimit                             EErrorCode = 3401
	EErrorCode_ErrFashionNotFound                            EErrorCode = 3402
	EErrorCode_ErrFashionSlotEmpty                           EErrorCode = 3403
	EErrorCode_ErrFashionIDNotFound                          EErrorCode = 3404
	EErrorCode_ErrFashionLock                                EErrorCode = 3405
	EErrorCode_ErrFashCollectionAwardAlread                  EErrorCode = 3406
	EErrorCode_ErrFashCollectionScoreNotEnough               EErrorCode = 3407
	EErrorCode_ErrFashCollectionAwardAlreadMonth             EErrorCode = 3408
	EErrorCode_ErrFashionAlreadUnlock                        EErrorCode = 3409
	EErrorCode_ErrFashionAdvanceNotExist                     EErrorCode = 3410
	EErrorCode_ErrFashionBaseNotUnlock                       EErrorCode = 3411
	EErrorCode_ErrFashionAdvanceAlreadyUnlock                EErrorCode = 3412
	EErrorCode_ErrCameraNoExistAlbum                         EErrorCode = 3501
	EErrorCode_ErrCameraBeyondPhotoNum                       EErrorCode = 3502
	EErrorCode_ErrCameraBeyondAlumNum                        EErrorCode = 3503
	EErrorCode_ErrCameraNoAccessRight                        EErrorCode = 3504
	EErrorCode_ErrCameraNoExistPhoto                         EErrorCode = 3505
	EErrorCode_ErrCameraBeyondWordNum                        EErrorCode = 3506
	EErrorCode_ErrCameraPhotoNoInAlbum                       EErrorCode = 3507
	EErrorCode_ErrCameraInnerError                           EErrorCode = 3508
	EErrorCode_ErrCameraIllegalRight                         EErrorCode = 3509
	EErrorCode_ErrCameraNoExistChar                          EErrorCode = 3510
	EErrorCode_ErrCameraNoDelCloudAlbum                      EErrorCode = 3511
	EErrorCode_ErrCameraBeyondMaxURlLen                      EErrorCode = 3512
	EErrorCode_ErrCameraBeyondMaxXMLLen                      EErrorCode = 3513
	EErrorCode_ErrCameraBeyondMaxNameLen                     EErrorCode = 3514
	EErrorCode_ErrCameraIllegalUrl                           EErrorCode = 3515
	EErrorCode_ErrCameraRenderInfoEmpty                      EErrorCode = 3516
	EErrorCode_ErrCameraBeyondPhotoMaxSize                   EErrorCode = 3517
	EErrorCode_ErrCameraIllegalPictureType                   EErrorCode = 3518
	EErrorCode_ErrCameraTypeRepeated                         EErrorCode = 3519
	EErrorCode_ErrCameraWithoutOriginal                      EErrorCode = 3520
	EErrorCode_ErrCameraWithoutThumbnailOrRender             EErrorCode = 3521
	EErrorCode_ErrCameraPhotoNameEmpty                       EErrorCode = 3522
	EErrorCode_ErrCameraPhotoNameOutMaxLen                   EErrorCode = 3523
	EErrorCode_ErrCameraAlbumNameEmpty                       EErrorCode = 3524
	EErrorCode_ErrCameraPhotoHasDel                          EErrorCode = 3525
	EErrorCode_ErrCameraSysInnerError                        EErrorCode = 3526
	EErrorCode_ErrCameraIllegalPictureId                     EErrorCode = 3527
	EErrorCode_ErrCameraBeyondMaxExtraLen                    EErrorCode = 3528
	EErrorCode_ErrCameraNoIncludeOriginal                    EErrorCode = 3529
	EErrorCode_ErrCameraNoDealingPhoto                       EErrorCode = 3530
	EErrorCode_ErrCameraNoDealingPhotoType                   EErrorCode = 3531
	EErrorCode_ErrCameraNoAnyAlbum                           EErrorCode = 3532
	EErrorCode_ErrCameraNoPassReview                         EErrorCode = 3533
	EErrorCode_ErrCameraPhotoMissImage                       EErrorCode = 3534
	EErrorCode_ErrCameraWithoutThumbnail                     EErrorCode = 3535
	EErrorCode_ErrCameraBeyondMaxUploadTimes                 EErrorCode = 3536
	EErrorCode_ErrInvalidLifeProfessionId                    EErrorCode = 3601
	EErrorCode_ErrLifeProfessionIsUnlock                     EErrorCode = 3602
	EErrorCode_ErrLifeProfessionMaxLevel                     EErrorCode = 3603
	EErrorCode_ErrLifeProfessionLevelNotEnough               EErrorCode = 3604
	EErrorCode_ErrLifeProfessionLevelRewardGot               EErrorCode = 3605
	EErrorCode_ErrInvalidLifeProfessionSpecializationId      EErrorCode = 3606
	EErrorCode_ErrLifeProfessionSpecializationNotEnough      EErrorCode = 3607
	EErrorCode_ErrLifeProfessionSpecializationUpgradeError   EErrorCode = 3608
	EErrorCode_ErrLifeProfessionPointNotEnough               EErrorCode = 3609
	EErrorCode_ErrInvalidLifeProfessionTargetId              EErrorCode = 3610
	EErrorCode_ErrLifeProfessionTargetNotEnough              EErrorCode = 3611
	EErrorCode_ErrLifeProfessionRewardCanNotGet              EErrorCode = 3612
	EErrorCode_ErrLifeProfessionEnergyChange                 EErrorCode = 3613
	EErrorCode_ErrLifeProfessionRecipeIsUnlock               EErrorCode = 3614
	EErrorCode_ErrLifeProfessionRecipeNotExist               EErrorCode = 3615
	EErrorCode_ErrLifeProfessionRecipeNotUnlock              EErrorCode = 3616
	EErrorCode_ErrLifeProfessionMaxRDRecipeCount             EErrorCode = 3617
	EErrorCode_ErrLifeProfessionWorkingNotEnd                EErrorCode = 3618
	EErrorCode_ErrLifeProfessionAlreadyWorking               EErrorCode = 3619
	EErrorCode_ErrLifeProfessionNotWorking                   EErrorCode = 3620
	EErrorCode_ErrLifeProfessionWorkingIsEnd                 EErrorCode = 3621
	EErrorCode_ErrLifeProfessionUnActiveSpecialization       EErrorCode = 3622
	EErrorCode_ErrCurLevelConfigNotExist                     EErrorCode = 4001
	EErrorCode_ErrNeedBreakthrough                           EErrorCode = 4002
	EErrorCode_ErrExperienceConfigNotExist                   EErrorCode = 4003
	EErrorCode_ErrExperienceMismatch                         EErrorCode = 4004
	EErrorCode_ErrNotNeedToBreakthrough                      EErrorCode = 4005
	EErrorCode_ErrConsumeConfigError                         EErrorCode = 4006
	EErrorCode_ErrSkillNotExist                              EErrorCode = 4007
	EErrorCode_ErrSkillLevelMax                              EErrorCode = 4008
	EErrorCode_ErrSkillLevelNotExist                         EErrorCode = 4009
	EErrorCode_ErrSkillConfigError                           EErrorCode = 4010
	EErrorCode_ErrStarNotExist                               EErrorCode = 4011
	EErrorCode_ErrMaxStar                                    EErrorCode = 4012
	EErrorCode_ErrMaxLevel                                   EErrorCode = 4013
	EErrorCode_ErrSkillLevelNotEnough                        EErrorCode = 4014
	EErrorCode_ErrCanNotChangeActionState                    EErrorCode = 4051
	EErrorCode_ErrActionNotExist                             EErrorCode = 4052
	EErrorCode_ErrIsInteracting                              EErrorCode = 4053
	EErrorCode_ErrState                                      EErrorCode = 4054
	EErrorCode_ErrRequestExpired                             EErrorCode = 4055
	EErrorCode_ErrStateSetFailed                             EErrorCode = 4071
	EErrorCode_ErrCollectIdError                             EErrorCode = 4072
	EErrorCode_ErrCollectStateFailed                         EErrorCode = 4073
	EErrorCode_ErrCollectActorErr                            EErrorCode = 4074
	EErrorCode_ErrCollectOutRange                            EErrorCode = 4075
	EErrorCode_ErrCollectConditionEquip                      EErrorCode = 4076
	EErrorCode_ErrCollectConditionQuest                      EErrorCode = 4077
	EErrorCode_ErrAlreadyCollected                           EErrorCode = 4078
	EErrorCode_ErrMailGetFailed                              EErrorCode = 4101
	EErrorCode_ErrMailIllegality                             EErrorCode = 4102
	EErrorCode_ErrMailIsGet                                  EErrorCode = 4103
	EErrorCode_ErrMailIsDel                                  EErrorCode = 4104
	EErrorCode_ErrMailAcceptorEmpty                          EErrorCode = 4105
	EErrorCode_ErrMailTokenInvalid                           EErrorCode = 4106
	EErrorCode_ErrUnRegisterType                             EErrorCode = 4201
	EErrorCode_ErrIndexNotFound                              EErrorCode = 4202
	EErrorCode_ErrCantOpenTreasureBox                        EErrorCode = 4203
	EErrorCode_ErrPersonalStateEnd                           EErrorCode = 4204
	EErrorCode_ErrPersonalObjectStatus                       EErrorCode = 4205
	EErrorCode_ErrExp                                        EErrorCode = 4301
	EErrorCode_ErrLevel                                      EErrorCode = 4302
	EErrorCode_ErrAward                                      EErrorCode = 4303
	EErrorCode_ErrReceivedLevelAward                         EErrorCode = 4304
	EErrorCode_ErrLevelNotEnough                             EErrorCode = 4305
	EErrorCode_ErrRoleLevelNoRewards                         EErrorCode = 4306
	EErrorCode_ErrUnionNotHaveLimit                          EErrorCode = 4401
	EErrorCode_ErrUnionIsNotMember                           EErrorCode = 4402
	EErrorCode_ErrUnionOfficialNotExits                      EErrorCode = 4403
	EErrorCode_ErrUnionOfficialTooMany                       EErrorCode = 4404
	EErrorCode_ErrUnionHas                                   EErrorCode = 4405
	EErrorCode_ErrUnionReqCd                                 EErrorCode = 4406
	EErrorCode_ErrUnionReqHas                                EErrorCode = 4407
	EErrorCode_ErrUnionFull                                  EErrorCode = 4408
	EErrorCode_ErrUnionFailed                                EErrorCode = 4409
	EErrorCode_ErrUnionNameWrongful                          EErrorCode = 4410
	EErrorCode_ErrUnionNameUsed                              EErrorCode = 4411
	EErrorCode_ErrUnionNameOccupied                          EErrorCode = 4412
	EErrorCode_ErrApplyMax                                   EErrorCode = 4415
	EErrorCode_ErrUnionChangeNameCD                          EErrorCode = 4416
	EErrorCode_ErrUnionNameSizeError                         EErrorCode = 4417
	EErrorCode_ErrDeclarationSize                            EErrorCode = 4418
	EErrorCode_ErrDeclarationError                           EErrorCode = 4419
	EErrorCode_ErrOfficialNameRepeat                         EErrorCode = 4420
	EErrorCode_ErrDeclarationCd                              EErrorCode = 4421
	EErrorCode_ErrUnionInfoCd                                EErrorCode = 4422
	EErrorCode_ErrUnionNotExist                              EErrorCode = 4423
	EErrorCode_ErrUnionIllegalConditionType                  EErrorCode = 4424
	EErrorCode_ErrUnionRecruitSloganTooLong                  EErrorCode = 4425
	EErrorCode_ErrUnionRecruitDescriptionTooLong             EErrorCode = 4426
	EErrorCode_ErrUnionCreateTooOften                        EErrorCode = 4427
	EErrorCode_ErrUnionTagNoExist                            EErrorCode = 4428
	EErrorCode_ErrUnionIconTooMuch                           EErrorCode = 4429
	EErrorCode_ErrUnionGetListCd                             EErrorCode = 4430
	EErrorCode_ErrUnionBatchSearchUnionIdsTooMuch            EErrorCode = 4431
	EErrorCode_ErrUnionBatchSearchCd                         EErrorCode = 4432
	EErrorCode_ErrUnionGetCollectedIdsCd                     EErrorCode = 4433
	EErrorCode_ErrUnionBeyondMaxCollectedNum                 EErrorCode = 4434
	EErrorCode_ErrUnionIdHasCollected                        EErrorCode = 4435
	EErrorCode_ErrUnionIdNoCollected                         EErrorCode = 4436
	EErrorCode_ErrUnionActiveValueNotEnough                  EErrorCode = 4437
	EErrorCode_ErrUnionIllegalActiveId                       EErrorCode = 4438
	EErrorCode_ErrUnionTooShortForAwards                     EErrorCode = 4439
	EErrorCode_ErrUnionHasActiveAwards                       EErrorCode = 4440
	EErrorCode_ErrUnionNoJoin                                EErrorCode = 4441
	EErrorCode_ErrUnionOnlyEnterSelf                         EErrorCode = 4442
	EErrorCode_ErrUnionNoUnlockScene                         EErrorCode = 4443
	EErrorCode_ErrUnionBuildingMaxLevel                      EErrorCode = 4444
	EErrorCode_ErrUnionBuildingUpgrading                     EErrorCode = 4445
	EErrorCode_ErrUnionBuildingUpgradeNoFinish               EErrorCode = 4446
	EErrorCode_ErrUnionPrefixBuildNoMeet                     EErrorCode = 4447
	EErrorCode_ErrUnionExperienceNoEnough                    EErrorCode = 4448
	EErrorCode_ErrUnionMoneyNoEnough                         EErrorCode = 4449
	EErrorCode_ErrUnionBuildingNoUpgrading                   EErrorCode = 4450
	EErrorCode_ErrUnionSpeedUpItemNoEnough                   EErrorCode = 4451
	EErrorCode_ErrUnionSpeedUpTimesOut                       EErrorCode = 4452
	EErrorCode_ErrUnionTryLater                              EErrorCode = 4453
	EErrorCode_ErrUnionSpeedUpLevelError                     EErrorCode = 4454
	EErrorCode_ErrUnionUpgradeHasCompleted                   EErrorCode = 4455
	EErrorCode_ErrUnionIllegalBuildIdLv                      EErrorCode = 4456
	EErrorCode_ErrUnionBeyMaxCount                           EErrorCode = 4457
	EErrorCode_ErrUnionUserNoApply                           EErrorCode = 4458
	EErrorCode_ErrUnionNoOneKeyNoMuch                        EErrorCode = 4459
	EErrorCode_ErrUnionActivityNotStart                      EErrorCode = 4460
	EErrorCode_ErrUnionActivityNotProgress                   EErrorCode = 4461
	EErrorCode_ErrUnionActivityAwardGet                      EErrorCode = 4462
	EErrorCode_ErrUnionActivityNotEnjoy                      EErrorCode = 4463
	EErrorCode_ErrUnionCreateTimeTooShort                    EErrorCode = 4464
	EErrorCode_ErrUnionFunctionLock                          EErrorCode = 4465
	EErrorCode_ErrUnionEScreenLock                           EErrorCode = 4466
	EErrorCode_ErrUnionEScreenPositionLock                   EErrorCode = 4467
	EErrorCode_ErrUnionEScreenNoSet                          EErrorCode = 4468
	EErrorCode_ErrUnionEScreenPositionNoSet                  EErrorCode = 4469
	EErrorCode_ErrUnionEffectGridLock                        EErrorCode = 4470
	EErrorCode_ErrUnionEffectIdLock                          EErrorCode = 4471
	EErrorCode_ErrUnionEffectPosNoSet                        EErrorCode = 4472
	EErrorCode_ErrUnionEffectPosHasEnd                       EErrorCode = 4473
	EErrorCode_ErrUnionCrowFuncHasEnd                        EErrorCode = 4474
	EErrorCode_ErrUnionCrowFuncPosHasUsed                    EErrorCode = 4475
	EErrorCode_ErrUnionCrowFuncHasJoined                     EErrorCode = 4476
	EErrorCode_ErrUnionCrowFuncNoBegin                       EErrorCode = 4477
	EErrorCode_ErrUnionNoFinishBaseBuilding                  EErrorCode = 4478
	EErrorCode_ErrUnionCrowFuncIllegalFuncPos                EErrorCode = 4479
	EErrorCode_ErrUnionEScreenBeyondMaxTimes                 EErrorCode = 4480
	EErrorCode_ErrUnionTargetFunctionLock                    EErrorCode = 4481
	EErrorCode_ErrUnionNoMeet                                EErrorCode = 4482
	EErrorCode_ErrUnionActivityAwardCd                       EErrorCode = 4483
	EErrorCode_ErrUnionManagerNoKicked                       EErrorCode = 4484
	EErrorCode_ErrUnionDanceNoBegin                          EErrorCode = 4485
	EErrorCode_ErrUnionDanceEnd                              EErrorCode = 4486
	EErrorCode_ErrUnionDanceDrawnBox                         EErrorCode = 4487
	EErrorCode_ErrUnionDanceBoxDrawn                         EErrorCode = 4488
	EErrorCode_ErrUnionDanceNoDanceId                        EErrorCode = 4489
	EErrorCode_ErrUnionNoJoinDance                           EErrorCode = 4490
	EErrorCode_ErrUnionDanceNoDancing                        EErrorCode = 4491
	EErrorCode_ErrUnionRejectInvite                          EErrorCode = 4492
	EErrorCode_ErrUnionActivityHuntEnd                       EErrorCode = 4493
	EErrorCode_ErrUnionApplyListFull                         EErrorCode = 4494
	EErrorCode_ErrUionApplyListExist                         EErrorCode = 4495
	EErrorCode_ErrUnionGroupIvalid                           EErrorCode = 4496
	EErrorCode_ErrRepeatedRequest                            EErrorCode = 4501
	EErrorCode_ErrHasBeenBlackened                           EErrorCode = 4502
	EErrorCode_ErrNotFoundCharInfo                           EErrorCode = 4503
	EErrorCode_ErrInner                                      EErrorCode = 4504
	EErrorCode_ErrParam                                      EErrorCode = 4505
	EErrorCode_ErrSetShowPicture                             EErrorCode = 4506
	EErrorCode_ErrSetSignature                               EErrorCode = 4507
	EErrorCode_ErrSetHobbyMark                               EErrorCode = 4508
	EErrorCode_ErrSetTimeMark                                EErrorCode = 4509
	EErrorCode_ErrSetRemind                                  EErrorCode = 4510
	EErrorCode_ErrSetTop                                     EErrorCode = 4511
	EErrorCode_ErrAddFriend                                  EErrorCode = 4512
	EErrorCode_ErrSetProcessed                               EErrorCode = 4513
	EErrorCode_ErrSetRemark                                  EErrorCode = 4514
	EErrorCode_ErrDeleteFriend                               EErrorCode = 4515
	EErrorCode_ErrNotFoundGroup                              EErrorCode = 4516
	EErrorCode_ErrNotExistInGroup                            EErrorCode = 4517
	EErrorCode_ErrChangeGroup                                EErrorCode = 4518
	EErrorCode_ErrPersonalState                              EErrorCode = 4519
	EErrorCode_ErrOtherFriendMax                             EErrorCode = 4520
	EErrorCode_ErrCurFriendMax                               EErrorCode = 4521
	EErrorCode_ErrConfig                                     EErrorCode = 4522
	EErrorCode_ErrAlreadyFriend                              EErrorCode = 4523
	EErrorCode_ErrSearchSelf                                 EErrorCode = 4524
	EErrorCode_ErrSuggestionCd                               EErrorCode = 4525
	EErrorCode_ErrGroupMax                                   EErrorCode = 4526
	EErrorCode_ErrGroupNotExist                              EErrorCode = 4527
	EErrorCode_ErrGroupNameEmpty                             EErrorCode = 4528
	EErrorCode_ErrIllegalCharacter                           EErrorCode = 4529
	EErrorCode_ErrStringMax                                  EErrorCode = 4530
	EErrorCode_ErrOtherApplicationMax                        EErrorCode = 4531
	EErrorCode_ErrFriendlinessAwardHasRecord                 EErrorCode = 4532
	EErrorCode_ErrFriendlinessLevelLowAwardLevel             EErrorCode = 4533
	EErrorCode_ErrFriendBeyondAllFriendNum                   EErrorCode = 4534
	EErrorCode_ErrFriendIsNoUserFriend                       EErrorCode = 4535
	EErrorCode_ErrFriendlinessIllegalAwardLevel              EErrorCode = 4536
	EErrorCode_ErrFriendlinessLevelAwardIsEmpty              EErrorCode = 4537
	EErrorCode_ErrFriendBeBlackenedByTarget                  EErrorCode = 4538
	EErrorCode_ErrFriendApplyEachOther                       EErrorCode = 4539
	EErrorCode_ErrFriendCallBySmallerCharId                  EErrorCode = 4540
	EErrorCode_ErrFriendCallByBiggerCharId                   EErrorCode = 4541
	EErrorCode_ErrFriendBeBlackenedBySmaller                 EErrorCode = 4542
	EErrorCode_ErrFriendBeBlackenedByBigger                  EErrorCode = 4543
	EErrorCode_ErrFriendNoApply                              EErrorCode = 4544
	EErrorCode_ErrFriendApplySelf                            EErrorCode = 4545
	EErrorCode_ErrUserNameFormat                             EErrorCode = 4546
	EErrorCode_ErrFriendGetBaseTooOften                      EErrorCode = 4547
	EErrorCode_ErrFriendOnlyGetSelfBaseInfo                  EErrorCode = 4548
	EErrorCode_ErrActorGetFailed                             EErrorCode = 4601
	EErrorCode_ErrPivotIsActive                              EErrorCode = 4602
	EErrorCode_ErrPivotIsNotActive                           EErrorCode = 4603
	EErrorCode_ErrBreakPointIsGet                            EErrorCode = 4604
	EErrorCode_ErrActorIsNotPivot                            EErrorCode = 4605
	EErrorCode_ErrActorIsNotBreakPoint                       EErrorCode = 4606
	EErrorCode_ErrActorIsBreakPointNotFull                   EErrorCode = 4607
	EErrorCode_ErrPivotRewardIsGiven                         EErrorCode = 4608
	EErrorCode_ErrNotInsight                                 EErrorCode = 4609
	EErrorCode_ErrLearnSkillFail                             EErrorCode = 4651
	EErrorCode_ErrRemoveSkillFail                            EErrorCode = 4652
	EErrorCode_ErrUpdateSkillFail                            EErrorCode = 4653
	EErrorCode_ErrSkillOperatorType                          EErrorCode = 4654
	EErrorCode_ErrContainerOperator                          EErrorCode = 4655
	EErrorCode_ErrExchangeFail                               EErrorCode = 4656
	EErrorCode_ErrExchangeFailInCombat                       EErrorCode = 4657
	EErrorCode_ErrAvatarBeyondMaxPictureSize                 EErrorCode = 4671
	EErrorCode_ErrGetTokenFailed                             EErrorCode = 4672
	EErrorCode_ErrPictureVerifyFailed                        EErrorCode = 4673
	EErrorCode_ErrPictureIllegalType                         EErrorCode = 4674
	EErrorCode_ErrPictureErrorInfo                           EErrorCode = 4675
	EErrorCode_ErrPictureSizeInconsistent                    EErrorCode = 4676
	EErrorCode_ErrPictureFuncTypeIllegal                     EErrorCode = 4677
	EErrorCode_ErrPictureCallBackJudgeIllegal                EErrorCode = 4678
	EErrorCode_ErrPictureVerifyNoPass                        EErrorCode = 4679
	EErrorCode_ErrPictureVerifyBackParamIllegal              EErrorCode = 4680
	EErrorCode_ErrPictureCallBackParamIllegal                EErrorCode = 4681
	EErrorCode_ErrPictureIllegalId                           EErrorCode = 4682
	EErrorCode_ErrPictureCosErrors                           EErrorCode = 4683
	EErrorCode_ErrPictureInnerSysErr                         EErrorCode = 4684
	EErrorCode_ErrPictureNoSetEnvCosSecretId                 EErrorCode = 4685
	EErrorCode_ErrPictureNoSetEnvCosSecretKey                EErrorCode = 4686
	EErrorCode_ErrPictureCheckInMachineLocked                EErrorCode = 4687
	EErrorCode_ErrPictureNoTryOutItem                        EErrorCode = 4688
	EErrorCode_ErrPictureNoUploadItem                        EErrorCode = 4689
	EErrorCode_ErrPictureNoUnion                             EErrorCode = 4690
	EErrorCode_ErrNameSizeError                              EErrorCode = 4701
	EErrorCode_ErrSensitiveContent                           EErrorCode = 4702
	EErrorCode_ErrChangeNameFail                             EErrorCode = 4703
	EErrorCode_ErrChangeNameCardNotEnough                    EErrorCode = 4704
	EErrorCode_ErrChangeSameName                             EErrorCode = 4705
	EErrorCode_ErrCheckMuteWordsFailed                       EErrorCode = 4706
	EErrorCode_ErrCheckMuteWordsEmpty                        EErrorCode = 4708
	EErrorCode_ErrChangeShowIdFail                           EErrorCode = 4711
	EErrorCode_ErrChangeShowIdDuplicated                     EErrorCode = 4712
	EErrorCode_ErrChangeShowIdCardNotEnough                  EErrorCode = 4713
	EErrorCode_ErrFaceItemLock                               EErrorCode = 4721
	EErrorCode_ErrFaceItemGender                             EErrorCode = 4722
	EErrorCode_ErrFaceNoUploading                            EErrorCode = 4723
	EErrorCode_ErrFaceNoSupportFileSuffix                    EErrorCode = 4724
	EErrorCode_ErrFaceFileSuffixEmpty                        EErrorCode = 4725
	EErrorCode_ErrFaceIllegalCosKey                          EErrorCode = 4726
	EErrorCode_ErrFaceParseSuffixFailed                      EErrorCode = 4727
	EErrorCode_ErrFaceParseShortGuidFailed                   EErrorCode = 4728
	EErrorCode_ErrProficiencyNeedUnlock                      EErrorCode = 4751
	EErrorCode_ErrProficiencyUnlock                          EErrorCode = 4752
	EErrorCode_ErrUnlockItemNotEnough                        EErrorCode = 4753
	EErrorCode_ErrTaskNotFinish                              EErrorCode = 4771
	EErrorCode_ErrStickerAwardIsGet                          EErrorCode = 4772
	EErrorCode_ErrBookAwardIsGet                             EErrorCode = 4773
	EErrorCode_ErrInCd                                       EErrorCode = 4791
	EErrorCode_ErrMoneyNotEnough                             EErrorCode = 4801
	EErrorCode_ErrShopItemCantBuy                            EErrorCode = 4802
	EErrorCode_ErrShopBuyBusy                                EErrorCode = 4803
	EErrorCode_ErrPaymentConfigNotFound                      EErrorCode = 4804
	EErrorCode_ErrRefreshShopCountExceed                     EErrorCode = 4806
	EErrorCode_ErrShopCouponNotEnough                        EErrorCode = 4807
	EErrorCode_ErrShopCouponLimitNum                         EErrorCode = 4808
	EErrorCode_ErrShopCantBuyNoPrice                         EErrorCode = 4809
	EErrorCode_ErrNotFoundMonster                            EErrorCode = 4901
	EErrorCode_ErrNotMonster                                 EErrorCode = 4902
	EErrorCode_ErrMonsterUnlockExist                         EErrorCode = 4903
	EErrorCode_ErrMonsterAwardIsGet                          EErrorCode = 4904
	EErrorCode_ErrMonsterTargetNotFinish                     EErrorCode = 4905
	EErrorCode_ErrDropTypeNotSupport                         EErrorCode = 4906
	EErrorCode_ErrCounterNotEnough                           EErrorCode = 4907
	EErrorCode_ErrDropItemAlreadyPicked                      EErrorCode = 4908
	EErrorCode_ErrInteractionDoing                           EErrorCode = 4941
	EErrorCode_ErrInteractionCondition                       EErrorCode = 4942
	EErrorCode_ErrInteractionNotMore                         EErrorCode = 4943
	EErrorCode_ErrInteractionExistPos                        EErrorCode = 4944
	EErrorCode_ErrInteractionNotExist                        EErrorCode = 4945
	EErrorCode_ErrInteractionEntityNotExist                  EErrorCode = 4946
	EErrorCode_ErrInteractionHandleNotExist                  EErrorCode = 4947
	EErrorCode_ErrInteractionType                            EErrorCode = 4948
	EErrorCode_ErrInteractionBan                             EErrorCode = 4949
	EErrorCode_ErrInteractionConfig                          EErrorCode = 4950
	EErrorCode_ErrInteractionNotOneself                      EErrorCode = 4951
	EErrorCode_ErrInteractionDistance                        EErrorCode = 4952
	EErrorCode_ErrShowPieceIllegalPieceType                  EErrorCode = 4961
	EErrorCode_ErrShowPieceIllegalPieceId                    EErrorCode = 4962
	EErrorCode_ErrShowPieceNoInOftenUseList                  EErrorCode = 4963
	EErrorCode_ErrShowPieceNoUnlockList                      EErrorCode = 4964
	EErrorCode_ErrShowPieceRoulettePositionNoSet             EErrorCode = 4965
	EErrorCode_ErrShowPieceBeyondOftenUseMaxLen              EErrorCode = 4966
	EErrorCode_ErrShowPieceBeyondOftenRoulettePositionNum    EErrorCode = 4967
	EErrorCode_ErrShowPieceNoCommonPiece                     EErrorCode = 4968
	EErrorCode_ErrShowPieceNoTakeOn                          EErrorCode = 4969
	EErrorCode_ErrProfessionActivated                        EErrorCode = 5001
	EErrorCode_ErrProfessionNotHas                           EErrorCode = 5002
	EErrorCode_ErrProfessionSlotErr                          EErrorCode = 5003
	EErrorCode_ErrProfessionRemoveErr                        EErrorCode = 5004
	EErrorCode_ErrProfessionChangePlanFail                   EErrorCode = 5005
	EErrorCode_ErrProfessionStarConfigNotExist               EErrorCode = 5006
	EErrorCode_ErrProfessionStarNodeUnlock                   EErrorCode = 5007
	EErrorCode_ErrProfessionStarNodeNotUnlock                EErrorCode = 5008
	EErrorCode_ErrProfessionReplaceSkillNotExist             EErrorCode = 5009
	EErrorCode_ErrProfessionUpgradeNotGreaterCurLevel        EErrorCode = 5010
	EErrorCode_ErrProfessionProfessionBeForged               EErrorCode = 5011
	EErrorCode_ErrProfessionSlotTwoNotUnlock                 EErrorCode = 5012
	EErrorCode_ErrProfessionSkillAlreadyActive               EErrorCode = 5013
	EErrorCode_ErrProfessionSkillRemodelLevelWrong           EErrorCode = 5014
	EErrorCode_ErrAoyiSkillAlreadyActive                     EErrorCode = 5015
	EErrorCode_ErrAoyiSkillRemodelConfigNotExist             EErrorCode = 5016
	EErrorCode_ErrAoyiSkillRemodelLevelWrong                 EErrorCode = 5017
	EErrorCode_ErrProfessionEquipInCombat                    EErrorCode = 5018
	EErrorCode_ErrProfessionSwitchInCombat                   EErrorCode = 5019
	EErrorCode_ErrProfessionDungeonNotAllowSwitch            EErrorCode = 5020
	EErrorCode_ErrTalentIllegalTalentPoolId                  EErrorCode = 5101
	EErrorCode_ErrTalentBeyondCurTalentMaxPlanNum            EErrorCode = 5102
	EErrorCode_ErrTalentPoolNoActive                         EErrorCode = 5108
	EErrorCode_ErrTalentPlanNoActive                         EErrorCode = 5109
	EErrorCode_ErrTalentIllegalTalentId                      EErrorCode = 5110
	EErrorCode_ErrTalentTalentHasUnlocked                    EErrorCode = 5111
	EErrorCode_ErrTalentTalentNoUnlocked                     EErrorCode = 5112
	EErrorCode_ErrTalentChangeLvPassiveTalentMoreThanInPool  EErrorCode = 5113
	EErrorCode_ErrTalentRepeatedTalentId                     EErrorCode = 5114
	EErrorCode_ErrTalentNoPoolPassiveTalent                  EErrorCode = 5115
	EErrorCode_ErrTalentTalentPointsNoEnough                 EErrorCode = 5116
	EErrorCode_ErrTalentPassiveTalentListNoEmpty             EErrorCode = 5118
	EErrorCode_ErrTalentIllegalTalentLevel                   EErrorCode = 5119
	EErrorCode_ErrTalentNoMeetUpgradeCondition               EErrorCode = 5120
	EErrorCode_ErrTalentNoSupportDownLevelNow                EErrorCode = 5121
	EErrorCode_ErrTalentNoMeetPrevTalentLv                   EErrorCode = 5122
	EErrorCode_ErrTalentNoMeetPrevTalentPoint                EErrorCode = 5123
	EErrorCode_ErrTalentTreeNodeBDExclusive                  EErrorCode = 5124
	EErrorCode_ErrTalentTotalTalentPointNotEnough            EErrorCode = 5125
	EErrorCode_ErrTalentPreTalentNodeNotActivated            EErrorCode = 5126
	EErrorCode_ErrTalentResetTalentInCombat                  EErrorCode = 5127
	EErrorCode_ErrCookBookNotExist                           EErrorCode = 5151
	EErrorCode_ErrCookFoodNotEnough                          EErrorCode = 5152
	EErrorCode_ErrCookTypeMore                               EErrorCode = 5153
	EErrorCode_ErrCookCountMore                              EErrorCode = 5154
	EErrorCode_ErrCookHasBook                                EErrorCode = 5155
	EErrorCode_ErrCookMaterialNotMatch                       EErrorCode = 5156
	EErrorCode_ErrChatIllegalPrivateChatTarget               EErrorCode = 5201
	EErrorCode_ErrChatInTargetBlockList                      EErrorCode = 5202
	EErrorCode_ErrChatSendMsgBeyondMaxWords                  EErrorCode = 5203
	EErrorCode_ErrChatWorldChannelIdIsZero                   EErrorCode = 5204
	EErrorCode_ErrChatWorldChannelIdBeyondMaxId              EErrorCode = 5205
	EErrorCode_ErrChatIllegalChannelType                     EErrorCode = 5206
	EErrorCode_ErrChatIllegalMsgType                         EErrorCode = 5207
	EErrorCode_ErrChatNoInGoalChannel                        EErrorCode = 5208
	EErrorCode_ErrChatNeedConfigIdNotZero                    EErrorCode = 5209
	EErrorCode_ErrChatNeedMsgTextNotEmpty                    EErrorCode = 5210
	EErrorCode_ErrChatSendCdNoEnd                            EErrorCode = 5211
	EErrorCode_ErrChatRecordListIsEmpty                      EErrorCode = 5212
	EErrorCode_ErrChatTargetNotInPrivateList                 EErrorCode = 5213
	EErrorCode_ErrChatMsgIdMoreThanMaxReadMsgId              EErrorCode = 5214
	EErrorCode_ErrChatBeyondBlockListLimit                   EErrorCode = 5215
	EErrorCode_ErrChatWorldChannelIdBeyondMaxNum             EErrorCode = 5216
	EErrorCode_ErrChatBeyondMaxRecordId                      EErrorCode = 5217
	EErrorCode_ErrChatNoCreatePrivateSession                 EErrorCode = 5218
	EErrorCode_ErrChatPrivateSessionHasExit                  EErrorCode = 5219
	EErrorCode_ErrChatBeBan                                  EErrorCode = 5220
	EErrorCode_ErrChatFileIdTooLong                          EErrorCode = 5221
	EErrorCode_ErrChatFileIdEmpty                            EErrorCode = 5222
	EErrorCode_ErrChatMsgInfoEmpty                           EErrorCode = 5223
	EErrorCode_ErrChatNoShareChannel                         EErrorCode = 5224
	EErrorCode_ErrChatIllegalShareType                       EErrorCode = 5225
	EErrorCode_ErrChatIllegalHolderType                      EErrorCode = 5226
	EErrorCode_ErrChatNoSupportShareType                     EErrorCode = 5227
	EErrorCode_ErrChatShareTpeNoChatId                       EErrorCode = 5228
	EErrorCode_ErrChatShareNoFishRank                        EErrorCode = 5229
	EErrorCode_ErrChatLevelLimit                             EErrorCode = 5230
	EErrorCode_ErrChatNoFoundBlockListLimit                  EErrorCode = 5231
	EErrorCode_ErrTalentModTalentTagNotExist                 EErrorCode = 5301
	EErrorCode_ErrTextCheckForbidden                         EErrorCode = 5351
	EErrorCode_ErrTextCheckNoSceneType                       EErrorCode = 5352
	EErrorCode_ErrTextCheckIllegal                           EErrorCode = 5353
	EErrorCode_ErrTextCheckHttpError                         EErrorCode = 5354
	EErrorCode_ErrTextCheckTooManyItems                      EErrorCode = 5355
	EErrorCode_ErrConditionTimerOpen                         EErrorCode = 5401
	EErrorCode_ErrConditionOpenServer                        EErrorCode = 5402
	EErrorCode_ErrSkillDisable                               EErrorCode = 5700
	EErrorCode_ErrSkillIsCD                                  EErrorCode = 5701
	EErrorCode_ErrSkillMaxPassiveCount                       EErrorCode = 5702
	EErrorCode_ErrSkillInit                                  EErrorCode = 5703
	EErrorCode_ErrSkillInfo                                  EErrorCode = 5704
	EErrorCode_ErrUseSkillFightResInsufficient               EErrorCode = 5705
	EErrorCode_ErrUseSkillBuffNotEnough                      EErrorCode = 5706
	EErrorCode_ErrUseSkillItemInsufficient                   EErrorCode = 5707
	EErrorCode_ErrUseSkillAttrInsufficient                   EErrorCode = 5708
	EErrorCode_ErrUseSkillEnduranceInsufficient              EErrorCode = 5709
	EErrorCode_ErrUseSkillStateChange                        EErrorCode = 5710
	EErrorCode_ErrUseSkillClientSkillUuid                    EErrorCode = 5711
	EErrorCode_ErrFightLogicConditionBlockInvalid            EErrorCode = 5730
	EErrorCode_ErrFightLogicActionGroupInvalid               EErrorCode = 5731
	EErrorCode_ErrFightLogicConditionNotMatch                EErrorCode = 5732
	EErrorCode_ErrFightLogicRunDataInvalid                   EErrorCode = 5733
	EErrorCode_ErrSkillStageNotFind                          EErrorCode = 5734
	EErrorCode_ErrConditionCfgSize                           EErrorCode = 6000
	EErrorCode_ErrConditionDissatisfy                        EErrorCode = 6001
	EErrorCode_ErrConditionObjectIsNull                      EErrorCode = 6002
	EErrorCode_ErrConditionTypeNotFound                      EErrorCode = 6003
	EErrorCode_ErrConditionEntityDeath                       EErrorCode = 6004
	EErrorCode_ErrConditionUnionLevel                        EErrorCode = 6005
	EErrorCode_ErrConditionUnionMoney                        EErrorCode = 6006
	EErrorCode_ErrConditionNotMeet                           EErrorCode = 6007
	EErrorCode_ErrConditionNotInShapeShift                   EErrorCode = 6008
	EErrorCode_ErrSeasonAchievementNoExist                   EErrorCode = 6101
	EErrorCode_ErrSeasonAchievementNoFinish                  EErrorCode = 6102
	EErrorCode_ErrSeasonAchievementHasReceived               EErrorCode = 6103
	EErrorCode_ErrSeasonAchievementPrevIdNoReceived          EErrorCode = 6104
	EErrorCode_ErrSeasonAchievementPrevIdNoExist             EErrorCode = 6105
	EErrorCode_ErrSeasonAchievementTargetConfigError         EErrorCode = 6106
	EErrorCode_ErrSeasonRankHasMax                           EErrorCode = 6151
	EErrorCode_ErrSeasonRankHasReceived                      EErrorCode = 6152
	EErrorCode_ErrSeasonRankNoAchieve                        EErrorCode = 6153
	EErrorCode_ErrSeasonRankCurSeasonIdZero                  EErrorCode = 6154
	EErrorCode_ErrSeasonRankNoMeetCondition                  EErrorCode = 6155
	EErrorCode_ErrSeasonRankSeasonNoSame                     EErrorCode = 6156
	EErrorCode_ErrBattlePassBuyLevel                         EErrorCode = 6201
	EErrorCode_ErrBattlePassBuyMaterial                      EErrorCode = 6202
	EErrorCode_ErrBattlePassAwardGet                         EErrorCode = 6203
	EErrorCode_ErrBattlePassAwardNotUnlock                   EErrorCode = 6204
	EErrorCode_ErrBattlePassBuyWeekExpLimit                  EErrorCode = 6205
	EErrorCode_ErrBattlePassLevelError                       EErrorCode = 6206
	EErrorCode_ErrNoRefreshTimes                             EErrorCode = 6207
	EErrorCode_ErrTargetNotCompleted                         EErrorCode = 6208
	EErrorCode_ErrOnlinePeriodTooMore                        EErrorCode = 6251
	EErrorCode_ErrPersonalTagTooMore                         EErrorCode = 6252
	EErrorCode_ErrPersonalTagNotFound                        EErrorCode = 6253
	EErrorCode_ErrPersonalAvatarUnearned                     EErrorCode = 6254
	EErrorCode_ErrPersonalAvatarFrameUnearned                EErrorCode = 6255
	EErrorCode_ErrPersonalCardStyleUnearned                  EErrorCode = 6256
	EErrorCode_ErrPersonalPhotoTooMore                       EErrorCode = 6257
	EErrorCode_ErrPersonalMedalUnearned                      EErrorCode = 6258
	EErrorCode_ErrPersonalTargetUnlock                       EErrorCode = 6259
	EErrorCode_ErrPersonalTargetAlreadyGet                   EErrorCode = 6260
	EErrorCode_ErrPersonalMedalInvalidSlot                   EErrorCode = 6261
	EErrorCode_ErrPersonalMedalDuplicateValue                EErrorCode = 6262
	EErrorCode_ErrOnlinePeriodDuplicate                      EErrorCode = 6263
	EErrorCode_ErrPersonalTagDuplicate                       EErrorCode = 6264
	EErrorCode_ErrPersonalPhotoInvalidSlot                   EErrorCode = 6265
	EErrorCode_ErrPersonalPhotoDuplicateValue                EErrorCode = 6266
	EErrorCode_ErrSeasonMedalNoMeetActiveCondition           EErrorCode = 6301
	EErrorCode_ErrSeasonMedalNoMeetUpgradeCondition          EErrorCode = 6302
	EErrorCode_ErrSeasonMedalActiveMeetNoEnough              EErrorCode = 6303
	EErrorCode_ErrSeasonMedalUpgradeMeetNoEnough             EErrorCode = 6304
	EErrorCode_ErrSeasonMedalIllegalNodeId                   EErrorCode = 6305
	EErrorCode_ErrSeasonMedalChooseNodeIdBeyondMax           EErrorCode = 6306
	EErrorCode_ErrSeasonMedalHoleNoExist                     EErrorCode = 6307
	EErrorCode_ErrSeasonMedalHoleLock                        EErrorCode = 6308
	EErrorCode_ErrSeasonMedalNodeNoExist                     EErrorCode = 6309
	EErrorCode_ErrSeasonMedalHoleNoGet                       EErrorCode = 6310
	EErrorCode_ErrSeasonMedalMaxHoleLevel                    EErrorCode = 6311
	EErrorCode_ErrSeasonMedalCoreHoleLock                    EErrorCode = 6312
	EErrorCode_ErrSeasonMedalUpgradeMoneyNoEnough            EErrorCode = 6313
	EErrorCode_ErrSeasonNoCoreHole                           EErrorCode = 6314
	EErrorCode_ErrSeasonNoNormalHole                         EErrorCode = 6315
	EErrorCode_ErrSeasonMedalNoUpgradeNormalHoleItem         EErrorCode = 6316
	EErrorCode_ErrSceneLineNotExists                         EErrorCode = 6351
	EErrorCode_ErrSceneLineRefreshCd                         EErrorCode = 6352
	EErrorCode_ErrSceneLineNotSameScene                      EErrorCode = 6353
	EErrorCode_ErrSceneLineSameLine                          EErrorCode = 6354
	EErrorCode_ErrSceneLineInteracting                       EErrorCode = 6355
	EErrorCode_ErrSceneLineUserDead                          EErrorCode = 6356
	EErrorCode_ErrSceneLineFull                              EErrorCode = 6357
	EErrorCode_ErrSceneLineChangeCd                          EErrorCode = 6358
	EErrorCode_ErrSceneVersionRecycle                        EErrorCode = 6359
	EErrorCode_ErrSceneLineKick                              EErrorCode = 6360
	EErrorCode_ErrInstallSlotFailed                          EErrorCode = 6401
	EErrorCode_ErrUseSlotFailed                              EErrorCode = 6402
	EErrorCode_ErrUseSlotInCd                                EErrorCode = 6403
	EErrorCode_ErrInstatallSlotFailedInCombat                EErrorCode = 6404
	EErrorCode_ErrSlotSkillUnLoad                            EErrorCode = 6405
	EErrorCode_ErrUseCfgSkillFailed                          EErrorCode = 6406
	EErrorCode_ErrResonanceNotExists                         EErrorCode = 6407
	EErrorCode_ErrResonanceUnLoad                            EErrorCode = 6408
	EErrorCode_ErrUseDodgeFailed                             EErrorCode = 6409
	EErrorCode_ErrUseFixedSkillFailed                        EErrorCode = 6410
	EErrorCode_ErrUseBlockedSkill                            EErrorCode = 6411
	EErrorCode_ErrInstallBlockedSkill                        EErrorCode = 6412
	EErrorCode_ErrExchangeNotFound                           EErrorCode = 6451
	EErrorCode_ErrExchangeNotEnough                          EErrorCode = 6452
	EErrorCode_ErrExchangeItemLimit                          EErrorCode = 6453
	EErrorCode_ErrExchangeStepRange                          EErrorCode = 6454
	EErrorCode_ErrExchangeItemFull                           EErrorCode = 6455
	EErrorCode_ErrExchangePackageFull                        EErrorCode = 6456
	EErrorCode_ErrExchangePriceItemNotFind                   EErrorCode = 6457
	EErrorCode_ErrExchangeBuyNumNotEnough                    EErrorCode = 6458
	EErrorCode_ErrExchangeBuyItemNotFound                    EErrorCode = 6459
	EErrorCode_ErrExchangeTakeFailDelayTime                  EErrorCode = 6460
	EErrorCode_ErrExchangeTakeFailSellNum                    EErrorCode = 6461
	EErrorCode_ErrExchangeTakeItemNotFound                   EErrorCode = 6462
	EErrorCode_ErrExchangeWithdrawNoMoney                    EErrorCode = 6463
	EErrorCode_ErrExchangeDepositNotEnough                   EErrorCode = 6464
	EErrorCode_ErrExchangeItemNotBindOrCooldownNotExpire     EErrorCode = 6465
	EErrorCode_ErrExchangeInCd                               EErrorCode = 6466
	EErrorCode_ErrExchangeBuyCurrencyNoEnough                EErrorCode = 6467
	EErrorCode_ErrExchangeItemDelayTimeOver                  EErrorCode = 6468
	EErrorCode_ErrExchangeItemIsNotWithdraw                  EErrorCode = 6469
	EErrorCode_ErrExchangeBuyItemLimit                       EErrorCode = 6470
	EErrorCode_ErrExchangeItemIsNotNoticeShopItem            EErrorCode = 6471
	EErrorCode_ErrExchangeItemIsPreBuyAlready                EErrorCode = 6472
	EErrorCode_ErrExchangeItemNotPublic                      EErrorCode = 6473
	EErrorCode_ErrExchangeSaleRankExist                      EErrorCode = 6474
	EErrorCode_ErrExchangeSaleItemFull                       EErrorCode = 6475
	EErrorCode_ErrExchangeSaleDiamondNotEnough               EErrorCode = 6476
	EErrorCode_ErrExchangeSaleItemNotExists                  EErrorCode = 6477
	EErrorCode_ErrExchangeBuySaleCurrencyNoEnough            EErrorCode = 6478
	EErrorCode_ErrExchangeDiamondNotEnough                   EErrorCode = 6479
	EErrorCode_ErrExchangeSaleTakeOffCd                      EErrorCode = 6480
	EErrorCode_ErrExchangeSaleRateInvalid                    EErrorCode = 6481
	EErrorCode_ErrExchangePreItemFull                        EErrorCode = 6482
	EErrorCode_ErrExchangeSaleNumInvalid                     EErrorCode = 6483
	EErrorCode_ErrExchangeCareItemAlready                    EErrorCode = 6484
	EErrorCode_ErrExchangePriceRange                         EErrorCode = 6485
	EErrorCode_ErrExchangeRequestLimit                       EErrorCode = 6486
	EErrorCode_ErrExchangeItemBanned                         EErrorCode = 6487
	EErrorCode_ErrExchangePriceNotLow                        EErrorCode = 6488
	EErrorCode_ErrExchangeItemNotFind                        EErrorCode = 6489
	EErrorCode_ErrExchangeItemExistMinPrice                  EErrorCode = 6490
	EErrorCode_ErrExchangeNoticeItemMin                      EErrorCode = 6491
	EErrorCode_ErrExchangePreBuyUserFull                     EErrorCode = 6492
	EErrorCode_ErrModHoleNotUnlock                           EErrorCode = 6501
	EErrorCode_ErrModNotExist                                EErrorCode = 6502
	EErrorCode_ErrModSimilarRepeated                         EErrorCode = 6503
	EErrorCode_ErrModTypeLimitExceeded                       EErrorCode = 6504
	EErrorCode_ErrModPartNotExist                            EErrorCode = 6505
	EErrorCode_ErrModPartEnhanceLimit                        EErrorCode = 6506
	EErrorCode_ErrModInUse                                   EErrorCode = 6507
	EErrorCode_ErrModAlreadyInstalled                        EErrorCode = 6508
	EErrorCode_ErrModInitConfigNotExist                      EErrorCode = 6509
	EErrorCode_ErrModPartOverflow                            EErrorCode = 6510
	EErrorCode_ErrModCanNotLink                              EErrorCode = 6511
	EErrorCode_ErrFishingNotUseBait                          EErrorCode = 6551
	EErrorCode_ErrFishingRandomFailed                        EErrorCode = 6552
	EErrorCode_ErrFishingAlreadyGetFishItem                  EErrorCode = 6553
	EErrorCode_ErrFishingGetFishIdWrong                      EErrorCode = 6554
	EErrorCode_ErrFishingNotGet                              EErrorCode = 6555
	EErrorCode_ErrFishingNotResearchYet                      EErrorCode = 6556
	EErrorCode_ErrFishingNotUseRod                           EErrorCode = 6557
	EErrorCode_ErrFishingNoSeat                              EErrorCode = 6558
	EErrorCode_ErrFishingCantResearch                        EErrorCode = 6559
	EErrorCode_ErrFishDrawnLevelAward                        EErrorCode = 6560
	EErrorCode_ErrFishCannotDrawLevelAward                   EErrorCode = 6561
	EErrorCode_ErrFishDrawnNoLevelAward                      EErrorCode = 6562
	EErrorCode_ErrFreightNoRefreshGoods                      EErrorCode = 6601
	EErrorCode_ErrFreightBeyondMaxValue                      EErrorCode = 6602
	EErrorCode_ErrFreightDownMinValue                        EErrorCode = 6603
	EErrorCode_ErrFreightHasSetOff                           EErrorCode = 6604
	EErrorCode_ErrFreightNoSetOff                            EErrorCode = 6605
	EErrorCode_ErrFreightHasReward                           EErrorCode = 6606
	EErrorCode_ErrFreightIllegalGoodsId                      EErrorCode = 6607
	EErrorCode_ErrFreightItemNoEnough                        EErrorCode = 6608
	EErrorCode_ErrFreightNoUpSetOffTime                      EErrorCode = 6609
	EErrorCode_ErrFreightNoUpRewardTime                      EErrorCode = 6610
	EErrorCode_ErrFreightAutoSetOff                          EErrorCode = 6611
	EErrorCode_ErrTrialRoadAwardNotFinished                  EErrorCode = 6651
	EErrorCode_ErrTrialRoadAwardRoomGet                      EErrorCode = 6652
	EErrorCode_ErrNotCanRide                                 EErrorCode = 6701
	EErrorCode_ErrCombatStateNotRide                         EErrorCode = 6702
	EErrorCode_ErrAlreadyRide                                EErrorCode = 6703
	EErrorCode_ErrRideNotEnough                              EErrorCode = 6704
	EErrorCode_ErrCreateVehicleActorFailed                   EErrorCode = 6705
	EErrorCode_ErrNotVehicleOwner                            EErrorCode = 6706
	EErrorCode_ErrVehicleHasController                       EErrorCode = 6707
	EErrorCode_ErrVehicleNoSeat                              EErrorCode = 6708
	EErrorCode_ErrVehicleHasSeat                             EErrorCode = 6709
	EErrorCode_ErrNotRideVehicle                             EErrorCode = 6710
	EErrorCode_ErrVehicleNotExits                            EErrorCode = 6711
	EErrorCode_ErrInvalidRidePropertyType                    EErrorCode = 6712
	EErrorCode_ErrRideApplyTargetUserNotExist                EErrorCode = 6713
	EErrorCode_ErrRideConfigNotFind                          EErrorCode = 6714
	EErrorCode_ErrRideNotUnlock                              EErrorCode = 6715
	EErrorCode_ErrRideNotFind                                EErrorCode = 6716
	EErrorCode_ErrInvalidRideType                            EErrorCode = 6717
	EErrorCode_ErrRideApplyAlreadyExist                      EErrorCode = 6718
	EErrorCode_ErrRideApplyNotRideVehicle                    EErrorCode = 6719
	EErrorCode_ErrRideApplyVehicleNotSeat                    EErrorCode = 6720
	EErrorCode_ErrRideAlReadyRide                            EErrorCode = 6721
	EErrorCode_ErrRideApplyTargetTooFar                      EErrorCode = 6722
	EErrorCode_ErrRideNotTake                                EErrorCode = 6723
	EErrorCode_ErrRideInteracting                            EErrorCode = 6724
	EErrorCode_ErrShapeshiftNotRide                          EErrorCode = 6725
	EErrorCode_ErrFishingNotRide                             EErrorCode = 6726
	EErrorCode_ErrRideStateReject                            EErrorCode = 6727
	EErrorCode_ErrRideTypeNotSupport                         EErrorCode = 6728
	EErrorCode_ErrRideNotControl                             EErrorCode = 6729
	EErrorCode_ErrRideNotFunction                            EErrorCode = 6730
	EErrorCode_ErrRideSkinNotSupport                         EErrorCode = 6731
	EErrorCode_ErrRideSkinNotUnlock                          EErrorCode = 6732
	EErrorCode_ErrRideSkinDataAddFailed                      EErrorCode = 6733
	EErrorCode_ErrRideSkinNotSkin                            EErrorCode = 6734
	EErrorCode_ErrRideSkinAlreadyActivate                    EErrorCode = 6735
	EErrorCode_ErrWarehouseHas                               EErrorCode = 7000
	EErrorCode_ErrWarehouseNoHas                             EErrorCode = 7001
	EErrorCode_ErrWarehouseNoMem                             EErrorCode = 7002
	EErrorCode_ErrWarehouseNoPresident                       EErrorCode = 7003
	EErrorCode_ErrWarehouseNoHasItem                         EErrorCode = 7004
	EErrorCode_ErrWarehouseItemNoDeposit                     EErrorCode = 7005
	EErrorCode_ErrWarehouseGridPosNoExist                    EErrorCode = 7006
	EErrorCode_ErrWarehouseGridPosItemNoEnough               EErrorCode = 7007
	EErrorCode_ErrWarehouseNoInviteSelf                      EErrorCode = 7008
	EErrorCode_ErrWarehouseInviteesHas                       EErrorCode = 7009
	EErrorCode_ErrWarehouseMemBeyondMax                      EErrorCode = 7010
	EErrorCode_ErrWarehouseGridBeyondMax                     EErrorCode = 7011
	EErrorCode_ErrWarehouseNoSelf                            EErrorCode = 7012
	EErrorCode_ErrWarehouseIsMem                             EErrorCode = 7013
	EErrorCode_ErrWarehouseNoExist                           EErrorCode = 7014
	EErrorCode_ErrWarehouseDepositBeyondMax                  EErrorCode = 7015
	EErrorCode_ErrWarehouseTakeOutBeyondMax                  EErrorCode = 7016
	EErrorCode_ErrWarehouseItemIdNotSame                     EErrorCode = 7017
	EErrorCode_ErrWarehouseParams                            EErrorCode = 7018
	EErrorCode_ErrWarehouseNoKickSelf                        EErrorCode = 7019
	EErrorCode_ErrWarehousePresidentNoExit                   EErrorCode = 7020
	EErrorCode_ErrGashaDrawCount                             EErrorCode = 7021
	EErrorCode_ErrGashaDrawLimit                             EErrorCode = 7022
	EErrorCode_ErrGashaInvalidWishId                         EErrorCode = 7023
	EErrorCode_EErGashaWishRepeated                          EErrorCode = 7026
	EErrorCode_EErGashaWishCountNoEnough                     EErrorCode = 7027
	EErrorCode_ErrWarehouseAuthority                         EErrorCode = 7028
	EErrorCode_ErrEquipCantDecompose                         EErrorCode = 7051
	EErrorCode_ErrEquipNotRecastRecord                       EErrorCode = 7052
	EErrorCode_ErrEquipOnCantUsedRecastConsume               EErrorCode = 7053
	EErrorCode_ErrEquipWeaponNotEqualProfession              EErrorCode = 7054
	EErrorCode_ErrEquipSlotRefineBlessNotFit                 EErrorCode = 7055
	EErrorCode_ErrEquipNotRecast                             EErrorCode = 7056
	EErrorCode_ErrEquipEnchantItemMismatch                   EErrorCode = 7057
	EErrorCode_ErrEquipEnchantAlreadyEnchanted               EErrorCode = 7058
	EErrorCode_ErrEquipAnyItemMismatch                       EErrorCode = 7059
	EErrorCode_ErrEquipSlotRefineBlessNumTooMuch             EErrorCode = 7060
	EErrorCode_ErrEquipNameGroupNoMatch                      EErrorCode = 7061
	EErrorCode_ErrEquipPerfectionNoMatch                     EErrorCode = 7062
	EErrorCode_ErrEquipNotBreak                              EErrorCode = 7063
	EErrorCode_ErrEquipPutOnIng                              EErrorCode = 7064
	EErrorCode_ErrUserIsMatching                             EErrorCode = 7101
	EErrorCode_ErrUserNotInMatching                          EErrorCode = 7102
	EErrorCode_ErrUseNotWaitReady                            EErrorCode = 7103
	EErrorCode_ErrDungeonCantMatch                           EErrorCode = 7104
	EErrorCode_ErrMatchQueueFull                             EErrorCode = 7105
	EErrorCode_ErrCommonAwardCantReceive                     EErrorCode = 7151
	EErrorCode_ErrCommonAwardHasReceived                     EErrorCode = 7152
	EErrorCode_ErrCraftEnergyNotEnough                       EErrorCode = 7201
	EErrorCode_ErrCraftEnergyFull                            EErrorCode = 7202
	EErrorCode_ErrRecommendPlayNotOpen                       EErrorCode = 7250
	EErrorCode_ErrWeeklyTowerNoStart                         EErrorCode = 7251
	EErrorCode_ErrWeeklyTowerHasEnd                          EErrorCode = 7252
	EErrorCode_ErrWeeklyNoMeetProcessAward                   EErrorCode = 7253
	EErrorCode_ErrWeeklyHasRewardProcessAward                EErrorCode = 7254
	EErrorCode_ErrWeeklyNoLayerStageAward                    EErrorCode = 7255
	EErrorCode_ErrWeekOnlyCurSeasonAward                     EErrorCode = 7256
	EErrorCode_ErrWeeklyTowerCannotEnterLayer                EErrorCode = 7257
	EErrorCode_ErrWeeklyTowerBoxHasOpen                      EErrorCode = 7258
	EErrorCode_ErrWeeklyTowerNoBox                           EErrorCode = 7259
	EErrorCode_ErrWeeklyTowerNoStageAward                    EErrorCode = 7260
	EErrorCode_ErrWeeklyTowerNoTowerDungeon                  EErrorCode = 7261
	EErrorCode_ErrFunctionNoAward                            EErrorCode = 7271
	EErrorCode_ErrFunctionHasDrawn                           EErrorCode = 7272
	EErrorCode_ErrTLogIllegalExportArea                      EErrorCode = 7281
	EErrorCode_ErrPayOrderFail                               EErrorCode = 7300
	EErrorCode_ErrPayCostNotEnough                           EErrorCode = 7301
	EErrorCode_ErrPayCantBuy                                 EErrorCode = 7302
	EErrorCode_ErrPayCantExplore                             EErrorCode = 7303
	EErrorCode_ErrActivityNotFind                            EErrorCode = 7350
	EErrorCode_ErrActivityOffline                            EErrorCode = 7351
	EErrorCode_ErrActivityNotOpen                            EErrorCode = 7352
	EErrorCode_ErrActivityRewardNotFound                     EErrorCode = 7353
	EErrorCode_ErrActivityConditionNotFinish                 EErrorCode = 7354
	EErrorCode_ErrActivityAlreadyObtain                      EErrorCode = 7355
	EErrorCode_ErrActivityNotUnlock                          EErrorCode = 7356
	EErrorCode_ErrEmojiConfigError                           EErrorCode = 7401
	EErrorCode_ErrEmojiAlreadyUnlock                         EErrorCode = 7402
	EErrorCode_ErrEmojiUnlockItemError                       EErrorCode = 7403
	EErrorCode_ErrEmojiUnlockItemErrorItemNotEnough          EErrorCode = 7404
	EErrorCode_ErrEmojiUnlock                                EErrorCode = 7405
	EErrorCode_ErrGlobalConditionNotFound                    EErrorCode = 7406
	EErrorCode_ErrGlobalConditionNotLuckyValue               EErrorCode = 7407
	EErrorCode_ErrPathFindingCant                            EErrorCode = 7412
	EErrorCode_ErrPathFindingDataError                       EErrorCode = 7413
	EErrorCode_ErrPathFindingEndPosError                     EErrorCode = 7414
	EErrorCode_ErrPathFindingStartPosError                   EErrorCode = 7415
	EErrorCode_ErrPathFindingNoPath                          EErrorCode = 7416
	EErrorCode_ErrSignNotOpen                                EErrorCode = 7421
	EErrorCode_ErrSignNotSigned                              EErrorCode = 7422
	EErrorCode_ErrSignAlreadySigned                          EErrorCode = 7423
	EErrorCode_ErrSignTimeError                              EErrorCode = 7424
	EErrorCode_ErrTokenBucketLimit                           EErrorCode = 9998
	EErrorCode_ErrUnknown                                    EErrorCode = 9999
)

// Enum value maps for EErrorCode.
var (
	EErrorCode_name = map[int32]string{
		0:    "ErrSuccess",
		101:  "ErrNoRecord",
		102:  "ErrExceptionCancel",
		103:  "ErrDBException",
		104:  "ErrDBSeqException",
		105:  "ErrDBSceneException",
		106:  "ErrDBTokenException",
		201:  "ErrCancelled",
		202:  "ErrUnknownRpc",
		203:  "ErrInvalidArgument",
		204:  "ErrDeadlineExceeded",
		205:  "ErrNotFound",
		206:  "ErrAlreadyExists",
		207:  "ErrPermissionDenied",
		208:  "ErrResourceExhausted",
		209:  "ErrFailedPrecondition",
		210:  "ErrAborted",
		211:  "ErrOutOfRange",
		212:  "ErrUnimplemented",
		213:  "ErrInternal",
		214:  "ErrUnavailable",
		215:  "ErrDataLoss",
		216:  "ErrUnauthenticated",
		999:  "ErrSystemMax",
		1000: "ErrDBError",
		1001: "ErrCreateOpenInfo",
		1002: "ErrCreateAccountInfo",
		1003: "ErrCreateCharInfo",
		1004: "ErrCreateAccountToken",
		1005: "ErrGetOpenInfo",
		1006: "ErrGetAccountInfo",
		1007: "ErrGetCharInfo",
		1008: "ErrGetAccountToken",
		1009: "ErrLoginInQueue",
		1010: "ErrOtherLogin",
		1011: "ErrServerError",
		1012: "ErrNoAccountInfo",
		1013: "ErrNoCharInfo",
		1014: "ErrTokenExpired",
		1015: "ErrUpdateTokenFail",
		1016: "ErrRegIntoSceneError",
		1017: "ErrLoginTypeErr",
		1018: "ErrChangeMapErr",
		1019: "ErrLoginPlatformErr",
		1020: "ErrVersionErr",
		1021: "ErrDelayOffLineKickOff",
		1022: "ErrServiceLanguageError",
		1023: "NoEnterScene",
		1024: "ModIDNotOpen",
		1025: "ErrFaceData",
		1026: "ErrInitProfession",
		1027: "ErrSceneCloseKickoff",
		1028: "ErrLoginReconnectKick",
		1029: "ErrLoginErrorResume",
		1030: "ErrRepeatedLogin",
		1031: "ErrRestrictLogin",
		1032: "ErrRestrictBlack",
		1033: "ErrSdkVerifyFail",
		1034: "ErrSdkTokenExpired",
		1035: "ErrServerNotOpen",
		1036: "ErrServerEndOpen",
		1037: "ErrNormalKick",
		1038: "ErrServerBusy",
		1039: "ErrServerClose",
		1040: "ErrExitGame",
		1041: "ErrHopeKick",
		1042: "ErrClientVersionError",
		1043: "ErrInvalidDeviceId",
		1044: "ErrInvalidSystemType",
		1045: "ErrDeleteChar",
		1046: "ErrCancelDeleteChar",
		1047: "ErrCancelDeleteCharIsDelete",
		1048: "ErrIntoSceneOwnerFail",
		1050: "ErrSceneQueueUp",
		1051: "ErrProtocolVersionErr",
		1052: "ErrConfigVersionErr",
		1053: "ErrStateEventFailed",
		1054: "ErrSelectCharDoing",
		1055: "ErrSelectCharDeleted",
		1056: "ErrLoginChannelMax",
		1057: "ErrDeleteAccountKick",
		1058: "ErrIsDeleteAccount",
		1059: "ErrIsVersionKick",
		1060: "ErrNotQQChnnel",
		1061: "ErrIncorrectLaunchPlatform",
		1062: "ErrConditionWrong",
		1063: "ErrNotSupportLoginType",
		2001: "ErrSceneNotExist",
		2002: "ErrUserNotExist",
		2003: "ErrComponentNotExist",
		2004: "ErrSceneConfigNotExist",
		2005: "ErrServiceNotExist",
		2006: "ErrDataContainerNotExist",
		2007: "ErrAsynchronousReturn",
		2008: "ErrConfigNotExist",
		2009: "ErrNotUser",
		2010: "ErrConfigError",
		2011: "ErrActorNotExist",
		2012: "ErrCutSceneAlreadyPlayed",
		2020: "ErrFunctionUnlock",
		2021: "ErrFunctionClosed",
		2022: "ErrUserPlayerNotFurniturePackage",
		2200: "ErrSysInnerError",
		2201: "ErrSysWebClientNull",
		2202: "ErrSysWebRequestTimeOut",
		2203: "ErrSysWebReturnError",
		2204: "ErrRequestTooFrequently",
		2251: "ErrArgStringTooLong",
		2252: "ErrArgStringEmpty",
		2253: "ErrArgArrayTooBig",
		2254: "ErrArgArrayEmpty",
		2255: "ErrArgMapTooBig",
		2256: "ErrArgMapEmpty",
		2300: "ErrItemNotExist",
		2301: "ErrPackageNotExist",
		2302: "ErrPackageFull",
		2303: "ErrItemExpireTime",
		2304: "ErrItemPackageGridNotEnough",
		2305: "ErrItemUUIDError",
		2306: "ErrItemNotEnough",
		2307: "ErrOptTypeError",
		2308: "ErrItemInCoolDown",
		2309: "ErrItemNotUse",
		2310: "ErrItemEffectTypeError",
		2311: "ErrItemParamError",
		2312: "ErrItemAddBuffError",
		2313: "ErrItemAdd",
		2314: "ErrUseItemState",
		2315: "ErrBatchUse",
		2316: "ErrFullSendMail",
		2317: "ErrItemNumZero",
		2318: "ErrItemSelectAwardIllegalNum",
		2319: "ErrItemSelectAwardIllegalPos",
		2320: "ErrItemSelectLimit",
		2321: "ErrItemPeriodGainExceeded",
		2322: "ErrItemNoRecycle",
		2323: "ErrItemRecycleBeyondMaxGrid",
		2324: "ErrItemRecycleBeyondMaxNum",
		2325: "ErrItemRecycleIdNoMatchItemId",
		2326: "ErrItemRecycleIllegalId",
		2327: "ErrItemLimitCount",
		2328: "ErrItemFriendPontExceeded",
		2329: "ErrItemToySingleEntUseExceeded",
		2330: "ErrItemToySceneUseExceeded",
		2331: "ErrItemToyUseInDisableArea",
		2332: "ErrItemToySingleCellUseExceeded",
		2380: "ErrMonthlyCardNotExists",
		2381: "ErrMonthlyCardDataError",
		2382: "ErrMonthlyCardDayAwardReceived",
		2383: "ErrMonthlyCardLimitCount",
		2400: "ErrCommunityNoHome",
		2401: "ErrNotHouseOwner",
		2402: "ErrHomeLandExisted",
		2403: "ErrHomeLandContentWrongful",
		2404: "ErrHouseLivetogetherCD",
		2405: "ErrHomeLandNotExisted",
		2406: "ErrHomeLandNotInScene",
		2407: "ErrHomeLandIsInvitation",
		2408: "ErrHomeLandInsufficientAuthority",
		2409: "ErrHomeLandTransferRequestPending",
		2410: "ErrHomeLandTransferRequestTimeout",
		2411: "ErrHomeLandTransferCD",
		2412: "ErrHomelandTargetIsHasHome",
		2413: "ErrHomelandTargetIsOwner",
		2414: "ErrHomelandNotOwnerCannotOperate",
		2415: "ErrHomeLandHasHouse",
		2416: "ErrHomeLandContentTooLong",
		2417: "ErrHomeLandClutterNotExist",
		2418: "ErrHouseNameOrStatementCD",
		2419: "ErrHouseIntroductionStatementCD",
		2420: "ErrCommunityBuildInvalidRecipeId",
		2421: "ErrCommunityBuildRecipeIsUnlock",
		2422: "ErrCommunityBuildMax",
		2423: "ErrCommunityBuildNoAuthority",
		2424: "ErrCommunityNotBuildCannotCancel",
		2425: "ErrCommunityBuildNotSelfCannotCancel",
		2426: "ErrCommunityNotBuildCannotAccelerate",
		2427: "ErrCommunityBuildNotSelfCannotAccelerate",
		2428: "ErrCommunityBuildCannotAccelerate",
		2429: "ErrCommunityBuildAlreadyAccelerate",
		2430: "ErrCommunityBuildInDungeon",
		2431: "ErrCommunityBuildRecipeIsLock",
		2432: "ErrCommunityBuildRecipeNotItemUnlock",
		2433: "ErrCommunityBuildInvalidCount",
		2434: "ErrCommunityNotBuildCannotReceive",
		2435: "ErrCommunityCanNotBuild",
		2436: "ErrHomeLandCohabitantLimit",
		2437: "ErrHomeLandRootNotQuitCohabitant",
		2438: "ErrHomeLandNotOwnerCannotQuitCohabitant",
		2439: "ErrHomeLandCohabitantIsExiting",
		2440: "ErrHomeLandCohabitantNotExists",
		2441: "ErrHomeLandCohabitantExitRequestExists",
		2442: "ErrHomeLandCohabitantDismiss",
		2443: "ErrHomeLandNotInvitation",
		2444: "ErrHomeLandCohabitantInvitationTimeout",
		2445: "ErrHomeLandCohabitantNotFriend",
		2446: "ErrHomeLandCohabitantFriendLevel",
		2447: "ErrHomeLandCohabitantLevel",
		2448: "ErrHomeLandInviteCohabitantNotOwner",
		2451: "ErrCommunityWarehouseGridFull",
		2452: "ErrCommunityWarehouseNoAuthority",
		2453: "ErrCommunityWarehouseGridPosItemNoEnough",
		2454: "ErrHomeLandInsufficientFurniture",
		2455: "ErrCommunityWarehouseTakeOutCountLimit",
		2456: "ErrHomeLandTaskNotExist",
		2457: "ErrHomeLandTaskTimeNotEnough",
		2458: "ErrHomeLandTaskAlreadyFinished",
		2459: "ErrHomeLandTaskItemNotEnough",
		2461: "ErrHomeLandCurLevelError",
		2462: "ErrHomeLandExpNotEnough",
		2463: "ErrHomeLandAlreadyMaxLevel",
		2464: "ErrHomeLandLevelLocked",
		2465: "ErrHomeLandLevelConfigError",
		2466: "ErrCommunityEditorNotEditable",
		2467: "ErrCommunityEditorNotFurniture",
		2468: "ErrCommunityEditorNotOutdoor",
		2469: "ErrCommunityEditorNotIndoor",
		2470: "ErrCommunityEditorOverMax",
		2471: "ErrCommunityEditorOverTypeMax",
		2472: "ErrCommunityEditorFurnitureNotEnough",
		2473: "ErrCommunityEditorFurnitureNotExist",
		2474: "ErrCommunityEditorOverMaxGroup",
		2475: "ErrCommunityEditorNoStructure",
		2476: "ErrCommunityEditorGroupMaxStructure",
		2477: "ErrCommunityEditorStructureInGroup",
		2478: "ErrCommunityEditorGroupNotExist",
		2479: "ErrCommunityEditorAlreadyExist",
		2481: "ErrHomeLandSellItemNotExist",
		2482: "ErrHomeLandLeftNumNotEnough",
		2483: "ErrHomeLandSellShopLocked",
		2486: "ErrHomeLandSeedExist",
		2487: "ErrHomeLandItemNotOwner",
		2488: "ErrHomeLandSeedStateError",
		2489: "ErrHomeLandNoSeed",
		2490: "ErrHomeLandNoWater",
		2491: "ErrHomeLandFertilizerMaxNumLimit",
		2492: "ErrHomeLandNotFertilize",
		2493: "ErrHomeLandNotPollen",
		2494: "ErrHomeLandAlreadyPollen",
		2495: "ErrHomeLandNotHarvest",
		2496: "ErrHomeLandPickUpSinglePlayerLimit",
		2497: "ErrHomeLandPickUpTotalLimit",
		2498: "ErrHomeLandPickUpFlowerNotFinished",
		2499: "ErrHomeLandPickUpOwner",
		2500: "ErrHomeLandGainNotOwner",
		2501: "ErrHomeLandItemFullGrid",
		2502: "ErrHomeLandFurnitureFull",
		2571: "ErrComposeItemNotEnough",
		2572: "ErrComposeFailed",
		2573: "ErrRedemptionItemNotExist",
		2574: "ErrRedemptionItemMaxCount",
		2575: "ErrRedemptionItemNotEnough",
		2576: "ErrRedemptionItemGender",
		2600: "ErrAwardConfigNotFound",
		2601: "ErrAwardConfigWeightError",
		2602: "ErrAwardConfigLimitAndContentNotMatch",
		2603: "ErrAwardConfigContentSizeError",
		2604: "ErrAwardConfigContentRatesSizeError",
		2605: "ErrAwardConfigContentWeightSizeError",
		2606: "ErrAwardConfigGroupContentEmpty",
		2607: "ErrAwardConfigGroupNumEmpty",
		2608: "ErrAwardConfigGroupContentNoMatchGroupNum",
		2609: "ErrAwardConfigNoRandomDrop",
		2610: "ErrAwardConfigNoSelectAward",
		2611: "ErrAwardConfigSelfSelectContentNoItem",
		2612: "ErrAwardConfigWeightRateMustOne",
		2613: "ErrAwardConfigGroupContentRandomNoMatch",
		2614: "ErrAwardConfigGroupContentError",
		2615: "ErrAwardConfigPackageContentRandomNoMatch",
		2616: "ErrAwardConfigLevelUpPackConfigPackageNoMatch",
		2617: "ErrAwardConfigProItemRuleNoMatch",
		2618: "ErrAwardConfigPackageContentEmpty",
		2619: "ErrAwardConfigDropContentSize",
		2620: "ErrAwardConfigDropContentNum",
		2621: "ErrAwardConfigGroupRateEmpty",
		2622: "ErrAwardConfigGroupWeightEmpty",
		2623: "ErrAwardInnerError",
		2624: "ErrAwardIllegalRandomType",
		2625: "ErrAwardConditionNoMeet",
		2626: "ErrAwardRandomTypeNone",
		2627: "ErrAwardRandomTypeNoMatch",
		2628: "ErrAwardActorIsNull",
		2700: "ErrEquipWashAttrNotExist",
		2701: "ErrNotEquipInCombat",
		2702: "ErrEquipPart",
		2750: "ErrComposeItemNotExist",
		2800: "ErrPickupDropItemDistance",
		2801: "ErrPickupDropItemPackageFull",
		2802: "ErrPickupDropItemNoAuthority",
		2851: "ErrLayerActorExist",
		2900: "ErrTeamCreateHas",
		2901: "ErrTeamIllTarget",
		2902: "ErrTeamCreateTryLater",
		2903: "ErrTeamGetNo",
		2904: "ErrTeamListEmpty",
		2905: "ErrTeamInner",
		2906: "ErrTeamNoLeader",
		2907: "ErrTeamInMatch",
		2908: "ErrTeamCustomizeTarget",
		2909: "ErrTeamNoOwn",
		2910: "ErrTeamTickSelf",
		2911: "ErrTeamNoMem",
		2912: "ErrTeamApplyingLeader",
		2913: "ErrTeamHasBeLeader",
		2914: "ErrTeamNoTransferSelf",
		2915: "ErrTeamNoLeaderTransfer",
		2916: "ErrTeamHasOwnTeam",
		2917: "ErrTeamNoExist",
		2918: "ErrTeamApplyInCD",
		2919: "ErrTeamApplyExpire",
		2920: "ErrTeamJoinOther",
		2921: "ErrTeamMemMax",
		2924: "ErrTeamNoInvited",
		2925: "ErrTeamIsMatching",
		2926: "ErrTeamIllegalTag",
		2927: "ErrTeamNoMatching",
		2928: "ErrTeamIllegalActivity",
		2929: "ErrTeamInActivity",
		2930: "ErrTeamNoMeetCondition",
		2931: "ErrTeamWaitVoting",
		2932: "ErrTeamDoingActivity",
		2933: "ErrTeamNoInVoting",
		2934: "ErrTeamVoteEnd",
		2935: "ErrTeamHasVoted",
		2936: "ErrTeamInviteCD",
		2937: "ErrTeamApplyLeadCD",
		2938: "ErrTeamMoreMaxWorlds",
		2939: "ErrTeamValidApplyInfo",
		2940: "ErrTeamInMatchCancelCD",
		2941: "ErrTeamMatchFinished",
		2942: "ErrTeamMatchWaitSec",
		2943: "ErrTeamMemWorldFull",
		2944: "ErrTeamMemNotLeader",
		2945: "ErrTeamLeaderNotStaticScene",
		2946: "ErrTeamLeaderCallDoing",
		2947: "ErrTeamIllegalCallOperator",
		2948: "ErrTeamLeaderIllegalCallOperator",
		2949: "ErrTeamNoMemCall",
		2950: "ErrTeamLeaderCallEnd",
		2951: "ErrTeamSameScene",
		2952: "ErrTeamNotSameScene",
		2953: "ErrTeamMemTooMore",
		2954: "ErrTeamMemInDungeon",
		2955: "ErrTeamMemTooLess",
		2956: "ErrTeamIllegalInviteType",
		2957: "ErrTeamMemberNotInScene",
		2958: "ErrTeamLeaderReadyCheckTimeNotReady",
		2959: "ErrTeamExistDungeonCheck",
		2960: "ErrTeamTargetMatchTalentLimit",
		2961: "ErrTeamEditGroupNotAllowed",
		2962: "ErrTeamGroupNotExist",
		2963: "ErrTeamTargetNoMatchMemberType",
		3000: "ErrDecomposeItemNotExist",
		3001: "ErrDecomposeItemNotEnough",
		3002: "ErrRefineEnergyNotEnough",
		3003: "ErrRefineItemMaxCount",
		3004: "ErrRefineItemNotExist",
		3005: "ErrRefineItemColumnNotUnlock",
		3006: "ErrRefineItemColumnUnlock",
		3007: "ErrRefineItemExist",
		3008: "ErrEnergyLimitMax",
		3009: "ErrRefineItemColumnNotEmpty",
		3056: "ErrProfessionNotExist",
		3058: "ErrModSlotNotUnlock",
		3065: "ErrChangeProfessionStateFail",
		3066: "ErrChangeProfessionCDFail",
		3071: "ErrProfessionSkinNotActive",
		3072: "ErrProfessionSkinActive",
		3073: "ErrProfessionNotUseSkin",
		3074: "ErrProfessionSkillSkinActive",
		3075: "ErrProfessionSkillSkinNotActive",
		3076: "ErrProfessionSkillNotActive",
		3101: "ErrCharOffline",
		3102: "ErrUserDataBaseError",
		3103: "ErrCharGetFail",
		3200: "ErrAlreadyAlive",
		3201: "ErrReviveParam",
		3202: "ErrStateIllegal",
		3203: "ErrStateNoChange",
		3204: "ErrReviveConsumeNotEnough",
		3205: "ErrReviveByOtherForbid",
		3206: "ErrReviveTimeNotArrived",
		3207: "ErrReviveBossBattle",
		3208: "ErrReviveCountLimit",
		3209: "ErrReviveInDeadTp",
		3301: "ErrDungeonPlayTypeError",
		3302: "ErrDungeonNotExist",
		3303: "ErrDungeonCreateError",
		3304: "ErrCantChangeDungeon",
		3305: "ErrDungeonLock",
		3306: "ErrPioneerFail",
		3307: "ErrAwardFail",
		3308: "ErrGsNotEnough",
		3309: "ErrQuestNotCompleted",
		3310: "ErrDungeonNotClear",
		3311: "ErrConditionNotExist",
		3312: "ErrAwardReceived",
		3313: "ErrCantRepeatedPlay",
		3314: "ErrNeedPassPreRoom",
		3315: "ErrDungeonEnterCountLimit",
		3316: "ErrDungeonScoreError",
		3317: "ErrDungeonRepeatedVote",
		3318: "ErrDungeonChallengeAwardState",
		3319: "ErrDungeonChallengeAffixNotFound",
		3320: "ErrDungeonStateNotActive",
		3321: "ErrDungeonCantVoteSelf",
		3322: "ErrDungeonPlayerNotEnough",
		3323: "ErrDungeonPlayerFull",
		3324: "ErrDungeonCantHeroKey",
		3325: "ErrDungeonNotSettlement",
		3326: "ErrDungeonNotFindRollItem",
		3327: "ErrDungeonCantRoll",
		3328: "ErrDungeonRollFinish",
		3329: "ErrDungeonSelectError",
		3330: "ErrDungeonAiModeError",
		3331: "ErrDungeonTargetNotFinish",
		3332: "ErrDungeonTargetBeAward",
		3333: "ErrDungeonSinglePlayerMore",
		3334: "ErrDungeonAiGroupNotEnough",
		3335: "ErrDungeonNoPass",
		3336: "ErrDungeonCloseSceneId",
		3337: "ErrDungeonEnterTypeError",
		3338: "ErrDungeonActorCount",
		3339: "ErrDungeonDiffLocked",
		3340: "ErrDungeonPreBattleVoteCd",
		3341: "ErrDungeonBossInvalid",
		3342: "ErrDungeonNoUser",
		3343: "ErrDungeonUserInvalid",
		3344: "ErrDungeonAwardualification",
		3345: "ErrDungeonAwardTriesLimit",
		3401: "ErrFashionIsLimit",
		3402: "ErrFashionNotFound",
		3403: "ErrFashionSlotEmpty",
		3404: "ErrFashionIDNotFound",
		3405: "ErrFashionLock",
		3406: "ErrFashCollectionAwardAlread",
		3407: "ErrFashCollectionScoreNotEnough",
		3408: "ErrFashCollectionAwardAlreadMonth",
		3409: "ErrFashionAlreadUnlock",
		3410: "ErrFashionAdvanceNotExist",
		3411: "ErrFashionBaseNotUnlock",
		3412: "ErrFashionAdvanceAlreadyUnlock",
		3501: "ErrCameraNoExistAlbum",
		3502: "ErrCameraBeyondPhotoNum",
		3503: "ErrCameraBeyondAlumNum",
		3504: "ErrCameraNoAccessRight",
		3505: "ErrCameraNoExistPhoto",
		3506: "ErrCameraBeyondWordNum",
		3507: "ErrCameraPhotoNoInAlbum",
		3508: "ErrCameraInnerError",
		3509: "ErrCameraIllegalRight",
		3510: "ErrCameraNoExistChar",
		3511: "ErrCameraNoDelCloudAlbum",
		3512: "ErrCameraBeyondMaxURlLen",
		3513: "ErrCameraBeyondMaxXMLLen",
		3514: "ErrCameraBeyondMaxNameLen",
		3515: "ErrCameraIllegalUrl",
		3516: "ErrCameraRenderInfoEmpty",
		3517: "ErrCameraBeyondPhotoMaxSize",
		3518: "ErrCameraIllegalPictureType",
		3519: "ErrCameraTypeRepeated",
		3520: "ErrCameraWithoutOriginal",
		3521: "ErrCameraWithoutThumbnailOrRender",
		3522: "ErrCameraPhotoNameEmpty",
		3523: "ErrCameraPhotoNameOutMaxLen",
		3524: "ErrCameraAlbumNameEmpty",
		3525: "ErrCameraPhotoHasDel",
		3526: "ErrCameraSysInnerError",
		3527: "ErrCameraIllegalPictureId",
		3528: "ErrCameraBeyondMaxExtraLen",
		3529: "ErrCameraNoIncludeOriginal",
		3530: "ErrCameraNoDealingPhoto",
		3531: "ErrCameraNoDealingPhotoType",
		3532: "ErrCameraNoAnyAlbum",
		3533: "ErrCameraNoPassReview",
		3534: "ErrCameraPhotoMissImage",
		3535: "ErrCameraWithoutThumbnail",
		3536: "ErrCameraBeyondMaxUploadTimes",
		3601: "ErrInvalidLifeProfessionId",
		3602: "ErrLifeProfessionIsUnlock",
		3603: "ErrLifeProfessionMaxLevel",
		3604: "ErrLifeProfessionLevelNotEnough",
		3605: "ErrLifeProfessionLevelRewardGot",
		3606: "ErrInvalidLifeProfessionSpecializationId",
		3607: "ErrLifeProfessionSpecializationNotEnough",
		3608: "ErrLifeProfessionSpecializationUpgradeError",
		3609: "ErrLifeProfessionPointNotEnough",
		3610: "ErrInvalidLifeProfessionTargetId",
		3611: "ErrLifeProfessionTargetNotEnough",
		3612: "ErrLifeProfessionRewardCanNotGet",
		3613: "ErrLifeProfessionEnergyChange",
		3614: "ErrLifeProfessionRecipeIsUnlock",
		3615: "ErrLifeProfessionRecipeNotExist",
		3616: "ErrLifeProfessionRecipeNotUnlock",
		3617: "ErrLifeProfessionMaxRDRecipeCount",
		3618: "ErrLifeProfessionWorkingNotEnd",
		3619: "ErrLifeProfessionAlreadyWorking",
		3620: "ErrLifeProfessionNotWorking",
		3621: "ErrLifeProfessionWorkingIsEnd",
		3622: "ErrLifeProfessionUnActiveSpecialization",
		4001: "ErrCurLevelConfigNotExist",
		4002: "ErrNeedBreakthrough",
		4003: "ErrExperienceConfigNotExist",
		4004: "ErrExperienceMismatch",
		4005: "ErrNotNeedToBreakthrough",
		4006: "ErrConsumeConfigError",
		4007: "ErrSkillNotExist",
		4008: "ErrSkillLevelMax",
		4009: "ErrSkillLevelNotExist",
		4010: "ErrSkillConfigError",
		4011: "ErrStarNotExist",
		4012: "ErrMaxStar",
		4013: "ErrMaxLevel",
		4014: "ErrSkillLevelNotEnough",
		4051: "ErrCanNotChangeActionState",
		4052: "ErrActionNotExist",
		4053: "ErrIsInteracting",
		4054: "ErrState",
		4055: "ErrRequestExpired",
		4071: "ErrStateSetFailed",
		4072: "ErrCollectIdError",
		4073: "ErrCollectStateFailed",
		4074: "ErrCollectActorErr",
		4075: "ErrCollectOutRange",
		4076: "ErrCollectConditionEquip",
		4077: "ErrCollectConditionQuest",
		4078: "ErrAlreadyCollected",
		4101: "ErrMailGetFailed",
		4102: "ErrMailIllegality",
		4103: "ErrMailIsGet",
		4104: "ErrMailIsDel",
		4105: "ErrMailAcceptorEmpty",
		4106: "ErrMailTokenInvalid",
		4201: "ErrUnRegisterType",
		4202: "ErrIndexNotFound",
		4203: "ErrCantOpenTreasureBox",
		4204: "ErrPersonalStateEnd",
		4205: "ErrPersonalObjectStatus",
		4301: "ErrExp",
		4302: "ErrLevel",
		4303: "ErrAward",
		4304: "ErrReceivedLevelAward",
		4305: "ErrLevelNotEnough",
		4306: "ErrRoleLevelNoRewards",
		4401: "ErrUnionNotHaveLimit",
		4402: "ErrUnionIsNotMember",
		4403: "ErrUnionOfficialNotExits",
		4404: "ErrUnionOfficialTooMany",
		4405: "ErrUnionHas",
		4406: "ErrUnionReqCd",
		4407: "ErrUnionReqHas",
		4408: "ErrUnionFull",
		4409: "ErrUnionFailed",
		4410: "ErrUnionNameWrongful",
		4411: "ErrUnionNameUsed",
		4412: "ErrUnionNameOccupied",
		4415: "ErrApplyMax",
		4416: "ErrUnionChangeNameCD",
		4417: "ErrUnionNameSizeError",
		4418: "ErrDeclarationSize",
		4419: "ErrDeclarationError",
		4420: "ErrOfficialNameRepeat",
		4421: "ErrDeclarationCd",
		4422: "ErrUnionInfoCd",
		4423: "ErrUnionNotExist",
		4424: "ErrUnionIllegalConditionType",
		4425: "ErrUnionRecruitSloganTooLong",
		4426: "ErrUnionRecruitDescriptionTooLong",
		4427: "ErrUnionCreateTooOften",
		4428: "ErrUnionTagNoExist",
		4429: "ErrUnionIconTooMuch",
		4430: "ErrUnionGetListCd",
		4431: "ErrUnionBatchSearchUnionIdsTooMuch",
		4432: "ErrUnionBatchSearchCd",
		4433: "ErrUnionGetCollectedIdsCd",
		4434: "ErrUnionBeyondMaxCollectedNum",
		4435: "ErrUnionIdHasCollected",
		4436: "ErrUnionIdNoCollected",
		4437: "ErrUnionActiveValueNotEnough",
		4438: "ErrUnionIllegalActiveId",
		4439: "ErrUnionTooShortForAwards",
		4440: "ErrUnionHasActiveAwards",
		4441: "ErrUnionNoJoin",
		4442: "ErrUnionOnlyEnterSelf",
		4443: "ErrUnionNoUnlockScene",
		4444: "ErrUnionBuildingMaxLevel",
		4445: "ErrUnionBuildingUpgrading",
		4446: "ErrUnionBuildingUpgradeNoFinish",
		4447: "ErrUnionPrefixBuildNoMeet",
		4448: "ErrUnionExperienceNoEnough",
		4449: "ErrUnionMoneyNoEnough",
		4450: "ErrUnionBuildingNoUpgrading",
		4451: "ErrUnionSpeedUpItemNoEnough",
		4452: "ErrUnionSpeedUpTimesOut",
		4453: "ErrUnionTryLater",
		4454: "ErrUnionSpeedUpLevelError",
		4455: "ErrUnionUpgradeHasCompleted",
		4456: "ErrUnionIllegalBuildIdLv",
		4457: "ErrUnionBeyMaxCount",
		4458: "ErrUnionUserNoApply",
		4459: "ErrUnionNoOneKeyNoMuch",
		4460: "ErrUnionActivityNotStart",
		4461: "ErrUnionActivityNotProgress",
		4462: "ErrUnionActivityAwardGet",
		4463: "ErrUnionActivityNotEnjoy",
		4464: "ErrUnionCreateTimeTooShort",
		4465: "ErrUnionFunctionLock",
		4466: "ErrUnionEScreenLock",
		4467: "ErrUnionEScreenPositionLock",
		4468: "ErrUnionEScreenNoSet",
		4469: "ErrUnionEScreenPositionNoSet",
		4470: "ErrUnionEffectGridLock",
		4471: "ErrUnionEffectIdLock",
		4472: "ErrUnionEffectPosNoSet",
		4473: "ErrUnionEffectPosHasEnd",
		4474: "ErrUnionCrowFuncHasEnd",
		4475: "ErrUnionCrowFuncPosHasUsed",
		4476: "ErrUnionCrowFuncHasJoined",
		4477: "ErrUnionCrowFuncNoBegin",
		4478: "ErrUnionNoFinishBaseBuilding",
		4479: "ErrUnionCrowFuncIllegalFuncPos",
		4480: "ErrUnionEScreenBeyondMaxTimes",
		4481: "ErrUnionTargetFunctionLock",
		4482: "ErrUnionNoMeet",
		4483: "ErrUnionActivityAwardCd",
		4484: "ErrUnionManagerNoKicked",
		4485: "ErrUnionDanceNoBegin",
		4486: "ErrUnionDanceEnd",
		4487: "ErrUnionDanceDrawnBox",
		4488: "ErrUnionDanceBoxDrawn",
		4489: "ErrUnionDanceNoDanceId",
		4490: "ErrUnionNoJoinDance",
		4491: "ErrUnionDanceNoDancing",
		4492: "ErrUnionRejectInvite",
		4493: "ErrUnionActivityHuntEnd",
		4494: "ErrUnionApplyListFull",
		4495: "ErrUionApplyListExist",
		4496: "ErrUnionGroupIvalid",
		4501: "ErrRepeatedRequest",
		4502: "ErrHasBeenBlackened",
		4503: "ErrNotFoundCharInfo",
		4504: "ErrInner",
		4505: "ErrParam",
		4506: "ErrSetShowPicture",
		4507: "ErrSetSignature",
		4508: "ErrSetHobbyMark",
		4509: "ErrSetTimeMark",
		4510: "ErrSetRemind",
		4511: "ErrSetTop",
		4512: "ErrAddFriend",
		4513: "ErrSetProcessed",
		4514: "ErrSetRemark",
		4515: "ErrDeleteFriend",
		4516: "ErrNotFoundGroup",
		4517: "ErrNotExistInGroup",
		4518: "ErrChangeGroup",
		4519: "ErrPersonalState",
		4520: "ErrOtherFriendMax",
		4521: "ErrCurFriendMax",
		4522: "ErrConfig",
		4523: "ErrAlreadyFriend",
		4524: "ErrSearchSelf",
		4525: "ErrSuggestionCd",
		4526: "ErrGroupMax",
		4527: "ErrGroupNotExist",
		4528: "ErrGroupNameEmpty",
		4529: "ErrIllegalCharacter",
		4530: "ErrStringMax",
		4531: "ErrOtherApplicationMax",
		4532: "ErrFriendlinessAwardHasRecord",
		4533: "ErrFriendlinessLevelLowAwardLevel",
		4534: "ErrFriendBeyondAllFriendNum",
		4535: "ErrFriendIsNoUserFriend",
		4536: "ErrFriendlinessIllegalAwardLevel",
		4537: "ErrFriendlinessLevelAwardIsEmpty",
		4538: "ErrFriendBeBlackenedByTarget",
		4539: "ErrFriendApplyEachOther",
		4540: "ErrFriendCallBySmallerCharId",
		4541: "ErrFriendCallByBiggerCharId",
		4542: "ErrFriendBeBlackenedBySmaller",
		4543: "ErrFriendBeBlackenedByBigger",
		4544: "ErrFriendNoApply",
		4545: "ErrFriendApplySelf",
		4546: "ErrUserNameFormat",
		4547: "ErrFriendGetBaseTooOften",
		4548: "ErrFriendOnlyGetSelfBaseInfo",
		4601: "ErrActorGetFailed",
		4602: "ErrPivotIsActive",
		4603: "ErrPivotIsNotActive",
		4604: "ErrBreakPointIsGet",
		4605: "ErrActorIsNotPivot",
		4606: "ErrActorIsNotBreakPoint",
		4607: "ErrActorIsBreakPointNotFull",
		4608: "ErrPivotRewardIsGiven",
		4609: "ErrNotInsight",
		4651: "ErrLearnSkillFail",
		4652: "ErrRemoveSkillFail",
		4653: "ErrUpdateSkillFail",
		4654: "ErrSkillOperatorType",
		4655: "ErrContainerOperator",
		4656: "ErrExchangeFail",
		4657: "ErrExchangeFailInCombat",
		4671: "ErrAvatarBeyondMaxPictureSize",
		4672: "ErrGetTokenFailed",
		4673: "ErrPictureVerifyFailed",
		4674: "ErrPictureIllegalType",
		4675: "ErrPictureErrorInfo",
		4676: "ErrPictureSizeInconsistent",
		4677: "ErrPictureFuncTypeIllegal",
		4678: "ErrPictureCallBackJudgeIllegal",
		4679: "ErrPictureVerifyNoPass",
		4680: "ErrPictureVerifyBackParamIllegal",
		4681: "ErrPictureCallBackParamIllegal",
		4682: "ErrPictureIllegalId",
		4683: "ErrPictureCosErrors",
		4684: "ErrPictureInnerSysErr",
		4685: "ErrPictureNoSetEnvCosSecretId",
		4686: "ErrPictureNoSetEnvCosSecretKey",
		4687: "ErrPictureCheckInMachineLocked",
		4688: "ErrPictureNoTryOutItem",
		4689: "ErrPictureNoUploadItem",
		4690: "ErrPictureNoUnion",
		4701: "ErrNameSizeError",
		4702: "ErrSensitiveContent",
		4703: "ErrChangeNameFail",
		4704: "ErrChangeNameCardNotEnough",
		4705: "ErrChangeSameName",
		4706: "ErrCheckMuteWordsFailed",
		4708: "ErrCheckMuteWordsEmpty",
		4711: "ErrChangeShowIdFail",
		4712: "ErrChangeShowIdDuplicated",
		4713: "ErrChangeShowIdCardNotEnough",
		4721: "ErrFaceItemLock",
		4722: "ErrFaceItemGender",
		4723: "ErrFaceNoUploading",
		4724: "ErrFaceNoSupportFileSuffix",
		4725: "ErrFaceFileSuffixEmpty",
		4726: "ErrFaceIllegalCosKey",
		4727: "ErrFaceParseSuffixFailed",
		4728: "ErrFaceParseShortGuidFailed",
		4751: "ErrProficiencyNeedUnlock",
		4752: "ErrProficiencyUnlock",
		4753: "ErrUnlockItemNotEnough",
		4771: "ErrTaskNotFinish",
		4772: "ErrStickerAwardIsGet",
		4773: "ErrBookAwardIsGet",
		4791: "ErrInCd",
		4801: "ErrMoneyNotEnough",
		4802: "ErrShopItemCantBuy",
		4803: "ErrShopBuyBusy",
		4804: "ErrPaymentConfigNotFound",
		4806: "ErrRefreshShopCountExceed",
		4807: "ErrShopCouponNotEnough",
		4808: "ErrShopCouponLimitNum",
		4809: "ErrShopCantBuyNoPrice",
		4901: "ErrNotFoundMonster",
		4902: "ErrNotMonster",
		4903: "ErrMonsterUnlockExist",
		4904: "ErrMonsterAwardIsGet",
		4905: "ErrMonsterTargetNotFinish",
		4906: "ErrDropTypeNotSupport",
		4907: "ErrCounterNotEnough",
		4908: "ErrDropItemAlreadyPicked",
		4941: "ErrInteractionDoing",
		4942: "ErrInteractionCondition",
		4943: "ErrInteractionNotMore",
		4944: "ErrInteractionExistPos",
		4945: "ErrInteractionNotExist",
		4946: "ErrInteractionEntityNotExist",
		4947: "ErrInteractionHandleNotExist",
		4948: "ErrInteractionType",
		4949: "ErrInteractionBan",
		4950: "ErrInteractionConfig",
		4951: "ErrInteractionNotOneself",
		4952: "ErrInteractionDistance",
		4961: "ErrShowPieceIllegalPieceType",
		4962: "ErrShowPieceIllegalPieceId",
		4963: "ErrShowPieceNoInOftenUseList",
		4964: "ErrShowPieceNoUnlockList",
		4965: "ErrShowPieceRoulettePositionNoSet",
		4966: "ErrShowPieceBeyondOftenUseMaxLen",
		4967: "ErrShowPieceBeyondOftenRoulettePositionNum",
		4968: "ErrShowPieceNoCommonPiece",
		4969: "ErrShowPieceNoTakeOn",
		5001: "ErrProfessionActivated",
		5002: "ErrProfessionNotHas",
		5003: "ErrProfessionSlotErr",
		5004: "ErrProfessionRemoveErr",
		5005: "ErrProfessionChangePlanFail",
		5006: "ErrProfessionStarConfigNotExist",
		5007: "ErrProfessionStarNodeUnlock",
		5008: "ErrProfessionStarNodeNotUnlock",
		5009: "ErrProfessionReplaceSkillNotExist",
		5010: "ErrProfessionUpgradeNotGreaterCurLevel",
		5011: "ErrProfessionProfessionBeForged",
		5012: "ErrProfessionSlotTwoNotUnlock",
		5013: "ErrProfessionSkillAlreadyActive",
		5014: "ErrProfessionSkillRemodelLevelWrong",
		5015: "ErrAoyiSkillAlreadyActive",
		5016: "ErrAoyiSkillRemodelConfigNotExist",
		5017: "ErrAoyiSkillRemodelLevelWrong",
		5018: "ErrProfessionEquipInCombat",
		5019: "ErrProfessionSwitchInCombat",
		5020: "ErrProfessionDungeonNotAllowSwitch",
		5101: "ErrTalentIllegalTalentPoolId",
		5102: "ErrTalentBeyondCurTalentMaxPlanNum",
		5108: "ErrTalentPoolNoActive",
		5109: "ErrTalentPlanNoActive",
		5110: "ErrTalentIllegalTalentId",
		5111: "ErrTalentTalentHasUnlocked",
		5112: "ErrTalentTalentNoUnlocked",
		5113: "ErrTalentChangeLvPassiveTalentMoreThanInPool",
		5114: "ErrTalentRepeatedTalentId",
		5115: "ErrTalentNoPoolPassiveTalent",
		5116: "ErrTalentTalentPointsNoEnough",
		5118: "ErrTalentPassiveTalentListNoEmpty",
		5119: "ErrTalentIllegalTalentLevel",
		5120: "ErrTalentNoMeetUpgradeCondition",
		5121: "ErrTalentNoSupportDownLevelNow",
		5122: "ErrTalentNoMeetPrevTalentLv",
		5123: "ErrTalentNoMeetPrevTalentPoint",
		5124: "ErrTalentTreeNodeBDExclusive",
		5125: "ErrTalentTotalTalentPointNotEnough",
		5126: "ErrTalentPreTalentNodeNotActivated",
		5127: "ErrTalentResetTalentInCombat",
		5151: "ErrCookBookNotExist",
		5152: "ErrCookFoodNotEnough",
		5153: "ErrCookTypeMore",
		5154: "ErrCookCountMore",
		5155: "ErrCookHasBook",
		5156: "ErrCookMaterialNotMatch",
		5201: "ErrChatIllegalPrivateChatTarget",
		5202: "ErrChatInTargetBlockList",
		5203: "ErrChatSendMsgBeyondMaxWords",
		5204: "ErrChatWorldChannelIdIsZero",
		5205: "ErrChatWorldChannelIdBeyondMaxId",
		5206: "ErrChatIllegalChannelType",
		5207: "ErrChatIllegalMsgType",
		5208: "ErrChatNoInGoalChannel",
		5209: "ErrChatNeedConfigIdNotZero",
		5210: "ErrChatNeedMsgTextNotEmpty",
		5211: "ErrChatSendCdNoEnd",
		5212: "ErrChatRecordListIsEmpty",
		5213: "ErrChatTargetNotInPrivateList",
		5214: "ErrChatMsgIdMoreThanMaxReadMsgId",
		5215: "ErrChatBeyondBlockListLimit",
		5216: "ErrChatWorldChannelIdBeyondMaxNum",
		5217: "ErrChatBeyondMaxRecordId",
		5218: "ErrChatNoCreatePrivateSession",
		5219: "ErrChatPrivateSessionHasExit",
		5220: "ErrChatBeBan",
		5221: "ErrChatFileIdTooLong",
		5222: "ErrChatFileIdEmpty",
		5223: "ErrChatMsgInfoEmpty",
		5224: "ErrChatNoShareChannel",
		5225: "ErrChatIllegalShareType",
		5226: "ErrChatIllegalHolderType",
		5227: "ErrChatNoSupportShareType",
		5228: "ErrChatShareTpeNoChatId",
		5229: "ErrChatShareNoFishRank",
		5230: "ErrChatLevelLimit",
		5231: "ErrChatNoFoundBlockListLimit",
		5301: "ErrTalentModTalentTagNotExist",
		5351: "ErrTextCheckForbidden",
		5352: "ErrTextCheckNoSceneType",
		5353: "ErrTextCheckIllegal",
		5354: "ErrTextCheckHttpError",
		5355: "ErrTextCheckTooManyItems",
		5401: "ErrConditionTimerOpen",
		5402: "ErrConditionOpenServer",
		5700: "ErrSkillDisable",
		5701: "ErrSkillIsCD",
		5702: "ErrSkillMaxPassiveCount",
		5703: "ErrSkillInit",
		5704: "ErrSkillInfo",
		5705: "ErrUseSkillFightResInsufficient",
		5706: "ErrUseSkillBuffNotEnough",
		5707: "ErrUseSkillItemInsufficient",
		5708: "ErrUseSkillAttrInsufficient",
		5709: "ErrUseSkillEnduranceInsufficient",
		5710: "ErrUseSkillStateChange",
		5711: "ErrUseSkillClientSkillUuid",
		5730: "ErrFightLogicConditionBlockInvalid",
		5731: "ErrFightLogicActionGroupInvalid",
		5732: "ErrFightLogicConditionNotMatch",
		5733: "ErrFightLogicRunDataInvalid",
		5734: "ErrSkillStageNotFind",
		6000: "ErrConditionCfgSize",
		6001: "ErrConditionDissatisfy",
		6002: "ErrConditionObjectIsNull",
		6003: "ErrConditionTypeNotFound",
		6004: "ErrConditionEntityDeath",
		6005: "ErrConditionUnionLevel",
		6006: "ErrConditionUnionMoney",
		6007: "ErrConditionNotMeet",
		6008: "ErrConditionNotInShapeShift",
		6101: "ErrSeasonAchievementNoExist",
		6102: "ErrSeasonAchievementNoFinish",
		6103: "ErrSeasonAchievementHasReceived",
		6104: "ErrSeasonAchievementPrevIdNoReceived",
		6105: "ErrSeasonAchievementPrevIdNoExist",
		6106: "ErrSeasonAchievementTargetConfigError",
		6151: "ErrSeasonRankHasMax",
		6152: "ErrSeasonRankHasReceived",
		6153: "ErrSeasonRankNoAchieve",
		6154: "ErrSeasonRankCurSeasonIdZero",
		6155: "ErrSeasonRankNoMeetCondition",
		6156: "ErrSeasonRankSeasonNoSame",
		6201: "ErrBattlePassBuyLevel",
		6202: "ErrBattlePassBuyMaterial",
		6203: "ErrBattlePassAwardGet",
		6204: "ErrBattlePassAwardNotUnlock",
		6205: "ErrBattlePassBuyWeekExpLimit",
		6206: "ErrBattlePassLevelError",
		6207: "ErrNoRefreshTimes",
		6208: "ErrTargetNotCompleted",
		6251: "ErrOnlinePeriodTooMore",
		6252: "ErrPersonalTagTooMore",
		6253: "ErrPersonalTagNotFound",
		6254: "ErrPersonalAvatarUnearned",
		6255: "ErrPersonalAvatarFrameUnearned",
		6256: "ErrPersonalCardStyleUnearned",
		6257: "ErrPersonalPhotoTooMore",
		6258: "ErrPersonalMedalUnearned",
		6259: "ErrPersonalTargetUnlock",
		6260: "ErrPersonalTargetAlreadyGet",
		6261: "ErrPersonalMedalInvalidSlot",
		6262: "ErrPersonalMedalDuplicateValue",
		6263: "ErrOnlinePeriodDuplicate",
		6264: "ErrPersonalTagDuplicate",
		6265: "ErrPersonalPhotoInvalidSlot",
		6266: "ErrPersonalPhotoDuplicateValue",
		6301: "ErrSeasonMedalNoMeetActiveCondition",
		6302: "ErrSeasonMedalNoMeetUpgradeCondition",
		6303: "ErrSeasonMedalActiveMeetNoEnough",
		6304: "ErrSeasonMedalUpgradeMeetNoEnough",
		6305: "ErrSeasonMedalIllegalNodeId",
		6306: "ErrSeasonMedalChooseNodeIdBeyondMax",
		6307: "ErrSeasonMedalHoleNoExist",
		6308: "ErrSeasonMedalHoleLock",
		6309: "ErrSeasonMedalNodeNoExist",
		6310: "ErrSeasonMedalHoleNoGet",
		6311: "ErrSeasonMedalMaxHoleLevel",
		6312: "ErrSeasonMedalCoreHoleLock",
		6313: "ErrSeasonMedalUpgradeMoneyNoEnough",
		6314: "ErrSeasonNoCoreHole",
		6315: "ErrSeasonNoNormalHole",
		6316: "ErrSeasonMedalNoUpgradeNormalHoleItem",
		6351: "ErrSceneLineNotExists",
		6352: "ErrSceneLineRefreshCd",
		6353: "ErrSceneLineNotSameScene",
		6354: "ErrSceneLineSameLine",
		6355: "ErrSceneLineInteracting",
		6356: "ErrSceneLineUserDead",
		6357: "ErrSceneLineFull",
		6358: "ErrSceneLineChangeCd",
		6359: "ErrSceneVersionRecycle",
		6360: "ErrSceneLineKick",
		6401: "ErrInstallSlotFailed",
		6402: "ErrUseSlotFailed",
		6403: "ErrUseSlotInCd",
		6404: "ErrInstatallSlotFailedInCombat",
		6405: "ErrSlotSkillUnLoad",
		6406: "ErrUseCfgSkillFailed",
		6407: "ErrResonanceNotExists",
		6408: "ErrResonanceUnLoad",
		6409: "ErrUseDodgeFailed",
		6410: "ErrUseFixedSkillFailed",
		6411: "ErrUseBlockedSkill",
		6412: "ErrInstallBlockedSkill",
		6451: "ErrExchangeNotFound",
		6452: "ErrExchangeNotEnough",
		6453: "ErrExchangeItemLimit",
		6454: "ErrExchangeStepRange",
		6455: "ErrExchangeItemFull",
		6456: "ErrExchangePackageFull",
		6457: "ErrExchangePriceItemNotFind",
		6458: "ErrExchangeBuyNumNotEnough",
		6459: "ErrExchangeBuyItemNotFound",
		6460: "ErrExchangeTakeFailDelayTime",
		6461: "ErrExchangeTakeFailSellNum",
		6462: "ErrExchangeTakeItemNotFound",
		6463: "ErrExchangeWithdrawNoMoney",
		6464: "ErrExchangeDepositNotEnough",
		6465: "ErrExchangeItemNotBindOrCooldownNotExpire",
		6466: "ErrExchangeInCd",
		6467: "ErrExchangeBuyCurrencyNoEnough",
		6468: "ErrExchangeItemDelayTimeOver",
		6469: "ErrExchangeItemIsNotWithdraw",
		6470: "ErrExchangeBuyItemLimit",
		6471: "ErrExchangeItemIsNotNoticeShopItem",
		6472: "ErrExchangeItemIsPreBuyAlready",
		6473: "ErrExchangeItemNotPublic",
		6474: "ErrExchangeSaleRankExist",
		6475: "ErrExchangeSaleItemFull",
		6476: "ErrExchangeSaleDiamondNotEnough",
		6477: "ErrExchangeSaleItemNotExists",
		6478: "ErrExchangeBuySaleCurrencyNoEnough",
		6479: "ErrExchangeDiamondNotEnough",
		6480: "ErrExchangeSaleTakeOffCd",
		6481: "ErrExchangeSaleRateInvalid",
		6482: "ErrExchangePreItemFull",
		6483: "ErrExchangeSaleNumInvalid",
		6484: "ErrExchangeCareItemAlready",
		6485: "ErrExchangePriceRange",
		6486: "ErrExchangeRequestLimit",
		6487: "ErrExchangeItemBanned",
		6488: "ErrExchangePriceNotLow",
		6489: "ErrExchangeItemNotFind",
		6490: "ErrExchangeItemExistMinPrice",
		6491: "ErrExchangeNoticeItemMin",
		6492: "ErrExchangePreBuyUserFull",
		6501: "ErrModHoleNotUnlock",
		6502: "ErrModNotExist",
		6503: "ErrModSimilarRepeated",
		6504: "ErrModTypeLimitExceeded",
		6505: "ErrModPartNotExist",
		6506: "ErrModPartEnhanceLimit",
		6507: "ErrModInUse",
		6508: "ErrModAlreadyInstalled",
		6509: "ErrModInitConfigNotExist",
		6510: "ErrModPartOverflow",
		6511: "ErrModCanNotLink",
		6551: "ErrFishingNotUseBait",
		6552: "ErrFishingRandomFailed",
		6553: "ErrFishingAlreadyGetFishItem",
		6554: "ErrFishingGetFishIdWrong",
		6555: "ErrFishingNotGet",
		6556: "ErrFishingNotResearchYet",
		6557: "ErrFishingNotUseRod",
		6558: "ErrFishingNoSeat",
		6559: "ErrFishingCantResearch",
		6560: "ErrFishDrawnLevelAward",
		6561: "ErrFishCannotDrawLevelAward",
		6562: "ErrFishDrawnNoLevelAward",
		6601: "ErrFreightNoRefreshGoods",
		6602: "ErrFreightBeyondMaxValue",
		6603: "ErrFreightDownMinValue",
		6604: "ErrFreightHasSetOff",
		6605: "ErrFreightNoSetOff",
		6606: "ErrFreightHasReward",
		6607: "ErrFreightIllegalGoodsId",
		6608: "ErrFreightItemNoEnough",
		6609: "ErrFreightNoUpSetOffTime",
		6610: "ErrFreightNoUpRewardTime",
		6611: "ErrFreightAutoSetOff",
		6651: "ErrTrialRoadAwardNotFinished",
		6652: "ErrTrialRoadAwardRoomGet",
		6701: "ErrNotCanRide",
		6702: "ErrCombatStateNotRide",
		6703: "ErrAlreadyRide",
		6704: "ErrRideNotEnough",
		6705: "ErrCreateVehicleActorFailed",
		6706: "ErrNotVehicleOwner",
		6707: "ErrVehicleHasController",
		6708: "ErrVehicleNoSeat",
		6709: "ErrVehicleHasSeat",
		6710: "ErrNotRideVehicle",
		6711: "ErrVehicleNotExits",
		6712: "ErrInvalidRidePropertyType",
		6713: "ErrRideApplyTargetUserNotExist",
		6714: "ErrRideConfigNotFind",
		6715: "ErrRideNotUnlock",
		6716: "ErrRideNotFind",
		6717: "ErrInvalidRideType",
		6718: "ErrRideApplyAlreadyExist",
		6719: "ErrRideApplyNotRideVehicle",
		6720: "ErrRideApplyVehicleNotSeat",
		6721: "ErrRideAlReadyRide",
		6722: "ErrRideApplyTargetTooFar",
		6723: "ErrRideNotTake",
		6724: "ErrRideInteracting",
		6725: "ErrShapeshiftNotRide",
		6726: "ErrFishingNotRide",
		6727: "ErrRideStateReject",
		6728: "ErrRideTypeNotSupport",
		6729: "ErrRideNotControl",
		6730: "ErrRideNotFunction",
		6731: "ErrRideSkinNotSupport",
		6732: "ErrRideSkinNotUnlock",
		6733: "ErrRideSkinDataAddFailed",
		6734: "ErrRideSkinNotSkin",
		6735: "ErrRideSkinAlreadyActivate",
		7000: "ErrWarehouseHas",
		7001: "ErrWarehouseNoHas",
		7002: "ErrWarehouseNoMem",
		7003: "ErrWarehouseNoPresident",
		7004: "ErrWarehouseNoHasItem",
		7005: "ErrWarehouseItemNoDeposit",
		7006: "ErrWarehouseGridPosNoExist",
		7007: "ErrWarehouseGridPosItemNoEnough",
		7008: "ErrWarehouseNoInviteSelf",
		7009: "ErrWarehouseInviteesHas",
		7010: "ErrWarehouseMemBeyondMax",
		7011: "ErrWarehouseGridBeyondMax",
		7012: "ErrWarehouseNoSelf",
		7013: "ErrWarehouseIsMem",
		7014: "ErrWarehouseNoExist",
		7015: "ErrWarehouseDepositBeyondMax",
		7016: "ErrWarehouseTakeOutBeyondMax",
		7017: "ErrWarehouseItemIdNotSame",
		7018: "ErrWarehouseParams",
		7019: "ErrWarehouseNoKickSelf",
		7020: "ErrWarehousePresidentNoExit",
		7021: "ErrGashaDrawCount",
		7022: "ErrGashaDrawLimit",
		7023: "ErrGashaInvalidWishId",
		7026: "EErGashaWishRepeated",
		7027: "EErGashaWishCountNoEnough",
		7028: "ErrWarehouseAuthority",
		7051: "ErrEquipCantDecompose",
		7052: "ErrEquipNotRecastRecord",
		7053: "ErrEquipOnCantUsedRecastConsume",
		7054: "ErrEquipWeaponNotEqualProfession",
		7055: "ErrEquipSlotRefineBlessNotFit",
		7056: "ErrEquipNotRecast",
		7057: "ErrEquipEnchantItemMismatch",
		7058: "ErrEquipEnchantAlreadyEnchanted",
		7059: "ErrEquipAnyItemMismatch",
		7060: "ErrEquipSlotRefineBlessNumTooMuch",
		7061: "ErrEquipNameGroupNoMatch",
		7062: "ErrEquipPerfectionNoMatch",
		7063: "ErrEquipNotBreak",
		7064: "ErrEquipPutOnIng",
		7101: "ErrUserIsMatching",
		7102: "ErrUserNotInMatching",
		7103: "ErrUseNotWaitReady",
		7104: "ErrDungeonCantMatch",
		7105: "ErrMatchQueueFull",
		7151: "ErrCommonAwardCantReceive",
		7152: "ErrCommonAwardHasReceived",
		7201: "ErrCraftEnergyNotEnough",
		7202: "ErrCraftEnergyFull",
		7250: "ErrRecommendPlayNotOpen",
		7251: "ErrWeeklyTowerNoStart",
		7252: "ErrWeeklyTowerHasEnd",
		7253: "ErrWeeklyNoMeetProcessAward",
		7254: "ErrWeeklyHasRewardProcessAward",
		7255: "ErrWeeklyNoLayerStageAward",
		7256: "ErrWeekOnlyCurSeasonAward",
		7257: "ErrWeeklyTowerCannotEnterLayer",
		7258: "ErrWeeklyTowerBoxHasOpen",
		7259: "ErrWeeklyTowerNoBox",
		7260: "ErrWeeklyTowerNoStageAward",
		7261: "ErrWeeklyTowerNoTowerDungeon",
		7271: "ErrFunctionNoAward",
		7272: "ErrFunctionHasDrawn",
		7281: "ErrTLogIllegalExportArea",
		7300: "ErrPayOrderFail",
		7301: "ErrPayCostNotEnough",
		7302: "ErrPayCantBuy",
		7303: "ErrPayCantExplore",
		7350: "ErrActivityNotFind",
		7351: "ErrActivityOffline",
		7352: "ErrActivityNotOpen",
		7353: "ErrActivityRewardNotFound",
		7354: "ErrActivityConditionNotFinish",
		7355: "ErrActivityAlreadyObtain",
		7356: "ErrActivityNotUnlock",
		7401: "ErrEmojiConfigError",
		7402: "ErrEmojiAlreadyUnlock",
		7403: "ErrEmojiUnlockItemError",
		7404: "ErrEmojiUnlockItemErrorItemNotEnough",
		7405: "ErrEmojiUnlock",
		7406: "ErrGlobalConditionNotFound",
		7407: "ErrGlobalConditionNotLuckyValue",
		7412: "ErrPathFindingCant",
		7413: "ErrPathFindingDataError",
		7414: "ErrPathFindingEndPosError",
		7415: "ErrPathFindingStartPosError",
		7416: "ErrPathFindingNoPath",
		7421: "ErrSignNotOpen",
		7422: "ErrSignNotSigned",
		7423: "ErrSignAlreadySigned",
		7424: "ErrSignTimeError",
		9998: "ErrTokenBucketLimit",
		9999: "ErrUnknown",
	}
	EErrorCode_value = map[string]int32{
		"ErrSuccess":                                    0,
		"ErrNoRecord":                                   101,
		"ErrExceptionCancel":                            102,
		"ErrDBException":                                103,
		"ErrDBSeqException":                             104,
		"ErrDBSceneException":                           105,
		"ErrDBTokenException":                           106,
		"ErrCancelled":                                  201,
		"ErrUnknownRpc":                                 202,
		"ErrInvalidArgument":                            203,
		"ErrDeadlineExceeded":                           204,
		"ErrNotFound":                                   205,
		"ErrAlreadyExists":                              206,
		"ErrPermissionDenied":                           207,
		"ErrResourceExhausted":                          208,
		"ErrFailedPrecondition":                         209,
		"ErrAborted":                                    210,
		"ErrOutOfRange":                                 211,
		"ErrUnimplemented":                              212,
		"ErrInternal":                                   213,
		"ErrUnavailable":                                214,
		"ErrDataLoss":                                   215,
		"ErrUnauthenticated":                            216,
		"ErrSystemMax":                                  999,
		"ErrDBError":                                    1000,
		"ErrCreateOpenInfo":                             1001,
		"ErrCreateAccountInfo":                          1002,
		"ErrCreateCharInfo":                             1003,
		"ErrCreateAccountToken":                         1004,
		"ErrGetOpenInfo":                                1005,
		"ErrGetAccountInfo":                             1006,
		"ErrGetCharInfo":                                1007,
		"ErrGetAccountToken":                            1008,
		"ErrLoginInQueue":                               1009,
		"ErrOtherLogin":                                 1010,
		"ErrServerError":                                1011,
		"ErrNoAccountInfo":                              1012,
		"ErrNoCharInfo":                                 1013,
		"ErrTokenExpired":                               1014,
		"ErrUpdateTokenFail":                            1015,
		"ErrRegIntoSceneError":                          1016,
		"ErrLoginTypeErr":                               1017,
		"ErrChangeMapErr":                               1018,
		"ErrLoginPlatformErr":                           1019,
		"ErrVersionErr":                                 1020,
		"ErrDelayOffLineKickOff":                        1021,
		"ErrServiceLanguageError":                       1022,
		"NoEnterScene":                                  1023,
		"ModIDNotOpen":                                  1024,
		"ErrFaceData":                                   1025,
		"ErrInitProfession":                             1026,
		"ErrSceneCloseKickoff":                          1027,
		"ErrLoginReconnectKick":                         1028,
		"ErrLoginErrorResume":                           1029,
		"ErrRepeatedLogin":                              1030,
		"ErrRestrictLogin":                              1031,
		"ErrRestrictBlack":                              1032,
		"ErrSdkVerifyFail":                              1033,
		"ErrSdkTokenExpired":                            1034,
		"ErrServerNotOpen":                              1035,
		"ErrServerEndOpen":                              1036,
		"ErrNormalKick":                                 1037,
		"ErrServerBusy":                                 1038,
		"ErrServerClose":                                1039,
		"ErrExitGame":                                   1040,
		"ErrHopeKick":                                   1041,
		"ErrClientVersionError":                         1042,
		"ErrInvalidDeviceId":                            1043,
		"ErrInvalidSystemType":                          1044,
		"ErrDeleteChar":                                 1045,
		"ErrCancelDeleteChar":                           1046,
		"ErrCancelDeleteCharIsDelete":                   1047,
		"ErrIntoSceneOwnerFail":                         1048,
		"ErrSceneQueueUp":                               1050,
		"ErrProtocolVersionErr":                         1051,
		"ErrConfigVersionErr":                           1052,
		"ErrStateEventFailed":                           1053,
		"ErrSelectCharDoing":                            1054,
		"ErrSelectCharDeleted":                          1055,
		"ErrLoginChannelMax":                            1056,
		"ErrDeleteAccountKick":                          1057,
		"ErrIsDeleteAccount":                            1058,
		"ErrIsVersionKick":                              1059,
		"ErrNotQQChnnel":                                1060,
		"ErrIncorrectLaunchPlatform":                    1061,
		"ErrConditionWrong":                             1062,
		"ErrNotSupportLoginType":                        1063,
		"ErrSceneNotExist":                              2001,
		"ErrUserNotExist":                               2002,
		"ErrComponentNotExist":                          2003,
		"ErrSceneConfigNotExist":                        2004,
		"ErrServiceNotExist":                            2005,
		"ErrDataContainerNotExist":                      2006,
		"ErrAsynchronousReturn":                         2007,
		"ErrConfigNotExist":                             2008,
		"ErrNotUser":                                    2009,
		"ErrConfigError":                                2010,
		"ErrActorNotExist":                              2011,
		"ErrCutSceneAlreadyPlayed":                      2012,
		"ErrFunctionUnlock":                             2020,
		"ErrFunctionClosed":                             2021,
		"ErrUserPlayerNotFurniturePackage":              2022,
		"ErrSysInnerError":                              2200,
		"ErrSysWebClientNull":                           2201,
		"ErrSysWebRequestTimeOut":                       2202,
		"ErrSysWebReturnError":                          2203,
		"ErrRequestTooFrequently":                       2204,
		"ErrArgStringTooLong":                           2251,
		"ErrArgStringEmpty":                             2252,
		"ErrArgArrayTooBig":                             2253,
		"ErrArgArrayEmpty":                              2254,
		"ErrArgMapTooBig":                               2255,
		"ErrArgMapEmpty":                                2256,
		"ErrItemNotExist":                               2300,
		"ErrPackageNotExist":                            2301,
		"ErrPackageFull":                                2302,
		"ErrItemExpireTime":                             2303,
		"ErrItemPackageGridNotEnough":                   2304,
		"ErrItemUUIDError":                              2305,
		"ErrItemNotEnough":                              2306,
		"ErrOptTypeError":                               2307,
		"ErrItemInCoolDown":                             2308,
		"ErrItemNotUse":                                 2309,
		"ErrItemEffectTypeError":                        2310,
		"ErrItemParamError":                             2311,
		"ErrItemAddBuffError":                           2312,
		"ErrItemAdd":                                    2313,
		"ErrUseItemState":                               2314,
		"ErrBatchUse":                                   2315,
		"ErrFullSendMail":                               2316,
		"ErrItemNumZero":                                2317,
		"ErrItemSelectAwardIllegalNum":                  2318,
		"ErrItemSelectAwardIllegalPos":                  2319,
		"ErrItemSelectLimit":                            2320,
		"ErrItemPeriodGainExceeded":                     2321,
		"ErrItemNoRecycle":                              2322,
		"ErrItemRecycleBeyondMaxGrid":                   2323,
		"ErrItemRecycleBeyondMaxNum":                    2324,
		"ErrItemRecycleIdNoMatchItemId":                 2325,
		"ErrItemRecycleIllegalId":                       2326,
		"ErrItemLimitCount":                             2327,
		"ErrItemFriendPontExceeded":                     2328,
		"ErrItemToySingleEntUseExceeded":                2329,
		"ErrItemToySceneUseExceeded":                    2330,
		"ErrItemToyUseInDisableArea":                    2331,
		"ErrItemToySingleCellUseExceeded":               2332,
		"ErrMonthlyCardNotExists":                       2380,
		"ErrMonthlyCardDataError":                       2381,
		"ErrMonthlyCardDayAwardReceived":                2382,
		"ErrMonthlyCardLimitCount":                      2383,
		"ErrCommunityNoHome":                            2400,
		"ErrNotHouseOwner":                              2401,
		"ErrHomeLandExisted":                            2402,
		"ErrHomeLandContentWrongful":                    2403,
		"ErrHouseLivetogetherCD":                        2404,
		"ErrHomeLandNotExisted":                         2405,
		"ErrHomeLandNotInScene":                         2406,
		"ErrHomeLandIsInvitation":                       2407,
		"ErrHomeLandInsufficientAuthority":              2408,
		"ErrHomeLandTransferRequestPending":             2409,
		"ErrHomeLandTransferRequestTimeout":             2410,
		"ErrHomeLandTransferCD":                         2411,
		"ErrHomelandTargetIsHasHome":                    2412,
		"ErrHomelandTargetIsOwner":                      2413,
		"ErrHomelandNotOwnerCannotOperate":              2414,
		"ErrHomeLandHasHouse":                           2415,
		"ErrHomeLandContentTooLong":                     2416,
		"ErrHomeLandClutterNotExist":                    2417,
		"ErrHouseNameOrStatementCD":                     2418,
		"ErrHouseIntroductionStatementCD":               2419,
		"ErrCommunityBuildInvalidRecipeId":              2420,
		"ErrCommunityBuildRecipeIsUnlock":               2421,
		"ErrCommunityBuildMax":                          2422,
		"ErrCommunityBuildNoAuthority":                  2423,
		"ErrCommunityNotBuildCannotCancel":              2424,
		"ErrCommunityBuildNotSelfCannotCancel":          2425,
		"ErrCommunityNotBuildCannotAccelerate":          2426,
		"ErrCommunityBuildNotSelfCannotAccelerate":      2427,
		"ErrCommunityBuildCannotAccelerate":             2428,
		"ErrCommunityBuildAlreadyAccelerate":            2429,
		"ErrCommunityBuildInDungeon":                    2430,
		"ErrCommunityBuildRecipeIsLock":                 2431,
		"ErrCommunityBuildRecipeNotItemUnlock":          2432,
		"ErrCommunityBuildInvalidCount":                 2433,
		"ErrCommunityNotBuildCannotReceive":             2434,
		"ErrCommunityCanNotBuild":                       2435,
		"ErrHomeLandCohabitantLimit":                    2436,
		"ErrHomeLandRootNotQuitCohabitant":              2437,
		"ErrHomeLandNotOwnerCannotQuitCohabitant":       2438,
		"ErrHomeLandCohabitantIsExiting":                2439,
		"ErrHomeLandCohabitantNotExists":                2440,
		"ErrHomeLandCohabitantExitRequestExists":        2441,
		"ErrHomeLandCohabitantDismiss":                  2442,
		"ErrHomeLandNotInvitation":                      2443,
		"ErrHomeLandCohabitantInvitationTimeout":        2444,
		"ErrHomeLandCohabitantNotFriend":                2445,
		"ErrHomeLandCohabitantFriendLevel":              2446,
		"ErrHomeLandCohabitantLevel":                    2447,
		"ErrHomeLandInviteCohabitantNotOwner":           2448,
		"ErrCommunityWarehouseGridFull":                 2451,
		"ErrCommunityWarehouseNoAuthority":              2452,
		"ErrCommunityWarehouseGridPosItemNoEnough":      2453,
		"ErrHomeLandInsufficientFurniture":              2454,
		"ErrCommunityWarehouseTakeOutCountLimit":        2455,
		"ErrHomeLandTaskNotExist":                       2456,
		"ErrHomeLandTaskTimeNotEnough":                  2457,
		"ErrHomeLandTaskAlreadyFinished":                2458,
		"ErrHomeLandTaskItemNotEnough":                  2459,
		"ErrHomeLandCurLevelError":                      2461,
		"ErrHomeLandExpNotEnough":                       2462,
		"ErrHomeLandAlreadyMaxLevel":                    2463,
		"ErrHomeLandLevelLocked":                        2464,
		"ErrHomeLandLevelConfigError":                   2465,
		"ErrCommunityEditorNotEditable":                 2466,
		"ErrCommunityEditorNotFurniture":                2467,
		"ErrCommunityEditorNotOutdoor":                  2468,
		"ErrCommunityEditorNotIndoor":                   2469,
		"ErrCommunityEditorOverMax":                     2470,
		"ErrCommunityEditorOverTypeMax":                 2471,
		"ErrCommunityEditorFurnitureNotEnough":          2472,
		"ErrCommunityEditorFurnitureNotExist":           2473,
		"ErrCommunityEditorOverMaxGroup":                2474,
		"ErrCommunityEditorNoStructure":                 2475,
		"ErrCommunityEditorGroupMaxStructure":           2476,
		"ErrCommunityEditorStructureInGroup":            2477,
		"ErrCommunityEditorGroupNotExist":               2478,
		"ErrCommunityEditorAlreadyExist":                2479,
		"ErrHomeLandSellItemNotExist":                   2481,
		"ErrHomeLandLeftNumNotEnough":                   2482,
		"ErrHomeLandSellShopLocked":                     2483,
		"ErrHomeLandSeedExist":                          2486,
		"ErrHomeLandItemNotOwner":                       2487,
		"ErrHomeLandSeedStateError":                     2488,
		"ErrHomeLandNoSeed":                             2489,
		"ErrHomeLandNoWater":                            2490,
		"ErrHomeLandFertilizerMaxNumLimit":              2491,
		"ErrHomeLandNotFertilize":                       2492,
		"ErrHomeLandNotPollen":                          2493,
		"ErrHomeLandAlreadyPollen":                      2494,
		"ErrHomeLandNotHarvest":                         2495,
		"ErrHomeLandPickUpSinglePlayerLimit":            2496,
		"ErrHomeLandPickUpTotalLimit":                   2497,
		"ErrHomeLandPickUpFlowerNotFinished":            2498,
		"ErrHomeLandPickUpOwner":                        2499,
		"ErrHomeLandGainNotOwner":                       2500,
		"ErrHomeLandItemFullGrid":                       2501,
		"ErrHomeLandFurnitureFull":                      2502,
		"ErrComposeItemNotEnough":                       2571,
		"ErrComposeFailed":                              2572,
		"ErrRedemptionItemNotExist":                     2573,
		"ErrRedemptionItemMaxCount":                     2574,
		"ErrRedemptionItemNotEnough":                    2575,
		"ErrRedemptionItemGender":                       2576,
		"ErrAwardConfigNotFound":                        2600,
		"ErrAwardConfigWeightError":                     2601,
		"ErrAwardConfigLimitAndContentNotMatch":         2602,
		"ErrAwardConfigContentSizeError":                2603,
		"ErrAwardConfigContentRatesSizeError":           2604,
		"ErrAwardConfigContentWeightSizeError":          2605,
		"ErrAwardConfigGroupContentEmpty":               2606,
		"ErrAwardConfigGroupNumEmpty":                   2607,
		"ErrAwardConfigGroupContentNoMatchGroupNum":     2608,
		"ErrAwardConfigNoRandomDrop":                    2609,
		"ErrAwardConfigNoSelectAward":                   2610,
		"ErrAwardConfigSelfSelectContentNoItem":         2611,
		"ErrAwardConfigWeightRateMustOne":               2612,
		"ErrAwardConfigGroupContentRandomNoMatch":       2613,
		"ErrAwardConfigGroupContentError":               2614,
		"ErrAwardConfigPackageContentRandomNoMatch":     2615,
		"ErrAwardConfigLevelUpPackConfigPackageNoMatch": 2616,
		"ErrAwardConfigProItemRuleNoMatch":              2617,
		"ErrAwardConfigPackageContentEmpty":             2618,
		"ErrAwardConfigDropContentSize":                 2619,
		"ErrAwardConfigDropContentNum":                  2620,
		"ErrAwardConfigGroupRateEmpty":                  2621,
		"ErrAwardConfigGroupWeightEmpty":                2622,
		"ErrAwardInnerError":                            2623,
		"ErrAwardIllegalRandomType":                     2624,
		"ErrAwardConditionNoMeet":                       2625,
		"ErrAwardRandomTypeNone":                        2626,
		"ErrAwardRandomTypeNoMatch":                     2627,
		"ErrAwardActorIsNull":                           2628,
		"ErrEquipWashAttrNotExist":                      2700,
		"ErrNotEquipInCombat":                           2701,
		"ErrEquipPart":                                  2702,
		"ErrComposeItemNotExist":                        2750,
		"ErrPickupDropItemDistance":                     2800,
		"ErrPickupDropItemPackageFull":                  2801,
		"ErrPickupDropItemNoAuthority":                  2802,
		"ErrLayerActorExist":                            2851,
		"ErrTeamCreateHas":                              2900,
		"ErrTeamIllTarget":                              2901,
		"ErrTeamCreateTryLater":                         2902,
		"ErrTeamGetNo":                                  2903,
		"ErrTeamListEmpty":                              2904,
		"ErrTeamInner":                                  2905,
		"ErrTeamNoLeader":                               2906,
		"ErrTeamInMatch":                                2907,
		"ErrTeamCustomizeTarget":                        2908,
		"ErrTeamNoOwn":                                  2909,
		"ErrTeamTickSelf":                               2910,
		"ErrTeamNoMem":                                  2911,
		"ErrTeamApplyingLeader":                         2912,
		"ErrTeamHasBeLeader":                            2913,
		"ErrTeamNoTransferSelf":                         2914,
		"ErrTeamNoLeaderTransfer":                       2915,
		"ErrTeamHasOwnTeam":                             2916,
		"ErrTeamNoExist":                                2917,
		"ErrTeamApplyInCD":                              2918,
		"ErrTeamApplyExpire":                            2919,
		"ErrTeamJoinOther":                              2920,
		"ErrTeamMemMax":                                 2921,
		"ErrTeamNoInvited":                              2924,
		"ErrTeamIsMatching":                             2925,
		"ErrTeamIllegalTag":                             2926,
		"ErrTeamNoMatching":                             2927,
		"ErrTeamIllegalActivity":                        2928,
		"ErrTeamInActivity":                             2929,
		"ErrTeamNoMeetCondition":                        2930,
		"ErrTeamWaitVoting":                             2931,
		"ErrTeamDoingActivity":                          2932,
		"ErrTeamNoInVoting":                             2933,
		"ErrTeamVoteEnd":                                2934,
		"ErrTeamHasVoted":                               2935,
		"ErrTeamInviteCD":                               2936,
		"ErrTeamApplyLeadCD":                            2937,
		"ErrTeamMoreMaxWorlds":                          2938,
		"ErrTeamValidApplyInfo":                         2939,
		"ErrTeamInMatchCancelCD":                        2940,
		"ErrTeamMatchFinished":                          2941,
		"ErrTeamMatchWaitSec":                           2942,
		"ErrTeamMemWorldFull":                           2943,
		"ErrTeamMemNotLeader":                           2944,
		"ErrTeamLeaderNotStaticScene":                   2945,
		"ErrTeamLeaderCallDoing":                        2946,
		"ErrTeamIllegalCallOperator":                    2947,
		"ErrTeamLeaderIllegalCallOperator":              2948,
		"ErrTeamNoMemCall":                              2949,
		"ErrTeamLeaderCallEnd":                          2950,
		"ErrTeamSameScene":                              2951,
		"ErrTeamNotSameScene":                           2952,
		"ErrTeamMemTooMore":                             2953,
		"ErrTeamMemInDungeon":                           2954,
		"ErrTeamMemTooLess":                             2955,
		"ErrTeamIllegalInviteType":                      2956,
		"ErrTeamMemberNotInScene":                       2957,
		"ErrTeamLeaderReadyCheckTimeNotReady":           2958,
		"ErrTeamExistDungeonCheck":                      2959,
		"ErrTeamTargetMatchTalentLimit":                 2960,
		"ErrTeamEditGroupNotAllowed":                    2961,
		"ErrTeamGroupNotExist":                          2962,
		"ErrTeamTargetNoMatchMemberType":                2963,
		"ErrDecomposeItemNotExist":                      3000,
		"ErrDecomposeItemNotEnough":                     3001,
		"ErrRefineEnergyNotEnough":                      3002,
		"ErrRefineItemMaxCount":                         3003,
		"ErrRefineItemNotExist":                         3004,
		"ErrRefineItemColumnNotUnlock":                  3005,
		"ErrRefineItemColumnUnlock":                     3006,
		"ErrRefineItemExist":                            3007,
		"ErrEnergyLimitMax":                             3008,
		"ErrRefineItemColumnNotEmpty":                   3009,
		"ErrProfessionNotExist":                         3056,
		"ErrModSlotNotUnlock":                           3058,
		"ErrChangeProfessionStateFail":                  3065,
		"ErrChangeProfessionCDFail":                     3066,
		"ErrProfessionSkinNotActive":                    3071,
		"ErrProfessionSkinActive":                       3072,
		"ErrProfessionNotUseSkin":                       3073,
		"ErrProfessionSkillSkinActive":                  3074,
		"ErrProfessionSkillSkinNotActive":               3075,
		"ErrProfessionSkillNotActive":                   3076,
		"ErrCharOffline":                                3101,
		"ErrUserDataBaseError":                          3102,
		"ErrCharGetFail":                                3103,
		"ErrAlreadyAlive":                               3200,
		"ErrReviveParam":                                3201,
		"ErrStateIllegal":                               3202,
		"ErrStateNoChange":                              3203,
		"ErrReviveConsumeNotEnough":                     3204,
		"ErrReviveByOtherForbid":                        3205,
		"ErrReviveTimeNotArrived":                       3206,
		"ErrReviveBossBattle":                           3207,
		"ErrReviveCountLimit":                           3208,
		"ErrReviveInDeadTp":                             3209,
		"ErrDungeonPlayTypeError":                       3301,
		"ErrDungeonNotExist":                            3302,
		"ErrDungeonCreateError":                         3303,
		"ErrCantChangeDungeon":                          3304,
		"ErrDungeonLock":                                3305,
		"ErrPioneerFail":                                3306,
		"ErrAwardFail":                                  3307,
		"ErrGsNotEnough":                                3308,
		"ErrQuestNotCompleted":                          3309,
		"ErrDungeonNotClear":                            3310,
		"ErrConditionNotExist":                          3311,
		"ErrAwardReceived":                              3312,
		"ErrCantRepeatedPlay":                           3313,
		"ErrNeedPassPreRoom":                            3314,
		"ErrDungeonEnterCountLimit":                     3315,
		"ErrDungeonScoreError":                          3316,
		"ErrDungeonRepeatedVote":                        3317,
		"ErrDungeonChallengeAwardState":                 3318,
		"ErrDungeonChallengeAffixNotFound":              3319,
		"ErrDungeonStateNotActive":                      3320,
		"ErrDungeonCantVoteSelf":                        3321,
		"ErrDungeonPlayerNotEnough":                     3322,
		"ErrDungeonPlayerFull":                          3323,
		"ErrDungeonCantHeroKey":                         3324,
		"ErrDungeonNotSettlement":                       3325,
		"ErrDungeonNotFindRollItem":                     3326,
		"ErrDungeonCantRoll":                            3327,
		"ErrDungeonRollFinish":                          3328,
		"ErrDungeonSelectError":                         3329,
		"ErrDungeonAiModeError":                         3330,
		"ErrDungeonTargetNotFinish":                     3331,
		"ErrDungeonTargetBeAward":                       3332,
		"ErrDungeonSinglePlayerMore":                    3333,
		"ErrDungeonAiGroupNotEnough":                    3334,
		"ErrDungeonNoPass":                              3335,
		"ErrDungeonCloseSceneId":                        3336,
		"ErrDungeonEnterTypeError":                      3337,
		"ErrDungeonActorCount":                          3338,
		"ErrDungeonDiffLocked":                          3339,
		"ErrDungeonPreBattleVoteCd":                     3340,
		"ErrDungeonBossInvalid":                         3341,
		"ErrDungeonNoUser":                              3342,
		"ErrDungeonUserInvalid":                         3343,
		"ErrDungeonAwardualification":                   3344,
		"ErrDungeonAwardTriesLimit":                     3345,
		"ErrFashionIsLimit":                             3401,
		"ErrFashionNotFound":                            3402,
		"ErrFashionSlotEmpty":                           3403,
		"ErrFashionIDNotFound":                          3404,
		"ErrFashionLock":                                3405,
		"ErrFashCollectionAwardAlread":                  3406,
		"ErrFashCollectionScoreNotEnough":               3407,
		"ErrFashCollectionAwardAlreadMonth":             3408,
		"ErrFashionAlreadUnlock":                        3409,
		"ErrFashionAdvanceNotExist":                     3410,
		"ErrFashionBaseNotUnlock":                       3411,
		"ErrFashionAdvanceAlreadyUnlock":                3412,
		"ErrCameraNoExistAlbum":                         3501,
		"ErrCameraBeyondPhotoNum":                       3502,
		"ErrCameraBeyondAlumNum":                        3503,
		"ErrCameraNoAccessRight":                        3504,
		"ErrCameraNoExistPhoto":                         3505,
		"ErrCameraBeyondWordNum":                        3506,
		"ErrCameraPhotoNoInAlbum":                       3507,
		"ErrCameraInnerError":                           3508,
		"ErrCameraIllegalRight":                         3509,
		"ErrCameraNoExistChar":                          3510,
		"ErrCameraNoDelCloudAlbum":                      3511,
		"ErrCameraBeyondMaxURlLen":                      3512,
		"ErrCameraBeyondMaxXMLLen":                      3513,
		"ErrCameraBeyondMaxNameLen":                     3514,
		"ErrCameraIllegalUrl":                           3515,
		"ErrCameraRenderInfoEmpty":                      3516,
		"ErrCameraBeyondPhotoMaxSize":                   3517,
		"ErrCameraIllegalPictureType":                   3518,
		"ErrCameraTypeRepeated":                         3519,
		"ErrCameraWithoutOriginal":                      3520,
		"ErrCameraWithoutThumbnailOrRender":             3521,
		"ErrCameraPhotoNameEmpty":                       3522,
		"ErrCameraPhotoNameOutMaxLen":                   3523,
		"ErrCameraAlbumNameEmpty":                       3524,
		"ErrCameraPhotoHasDel":                          3525,
		"ErrCameraSysInnerError":                        3526,
		"ErrCameraIllegalPictureId":                     3527,
		"ErrCameraBeyondMaxExtraLen":                    3528,
		"ErrCameraNoIncludeOriginal":                    3529,
		"ErrCameraNoDealingPhoto":                       3530,
		"ErrCameraNoDealingPhotoType":                   3531,
		"ErrCameraNoAnyAlbum":                           3532,
		"ErrCameraNoPassReview":                         3533,
		"ErrCameraPhotoMissImage":                       3534,
		"ErrCameraWithoutThumbnail":                     3535,
		"ErrCameraBeyondMaxUploadTimes":                 3536,
		"ErrInvalidLifeProfessionId":                    3601,
		"ErrLifeProfessionIsUnlock":                     3602,
		"ErrLifeProfessionMaxLevel":                     3603,
		"ErrLifeProfessionLevelNotEnough":               3604,
		"ErrLifeProfessionLevelRewardGot":               3605,
		"ErrInvalidLifeProfessionSpecializationId":      3606,
		"ErrLifeProfessionSpecializationNotEnough":      3607,
		"ErrLifeProfessionSpecializationUpgradeError":   3608,
		"ErrLifeProfessionPointNotEnough":               3609,
		"ErrInvalidLifeProfessionTargetId":              3610,
		"ErrLifeProfessionTargetNotEnough":              3611,
		"ErrLifeProfessionRewardCanNotGet":              3612,
		"ErrLifeProfessionEnergyChange":                 3613,
		"ErrLifeProfessionRecipeIsUnlock":               3614,
		"ErrLifeProfessionRecipeNotExist":               3615,
		"ErrLifeProfessionRecipeNotUnlock":              3616,
		"ErrLifeProfessionMaxRDRecipeCount":             3617,
		"ErrLifeProfessionWorkingNotEnd":                3618,
		"ErrLifeProfessionAlreadyWorking":               3619,
		"ErrLifeProfessionNotWorking":                   3620,
		"ErrLifeProfessionWorkingIsEnd":                 3621,
		"ErrLifeProfessionUnActiveSpecialization":       3622,
		"ErrCurLevelConfigNotExist":                     4001,
		"ErrNeedBreakthrough":                           4002,
		"ErrExperienceConfigNotExist":                   4003,
		"ErrExperienceMismatch":                         4004,
		"ErrNotNeedToBreakthrough":                      4005,
		"ErrConsumeConfigError":                         4006,
		"ErrSkillNotExist":                              4007,
		"ErrSkillLevelMax":                              4008,
		"ErrSkillLevelNotExist":                         4009,
		"ErrSkillConfigError":                           4010,
		"ErrStarNotExist":                               4011,
		"ErrMaxStar":                                    4012,
		"ErrMaxLevel":                                   4013,
		"ErrSkillLevelNotEnough":                        4014,
		"ErrCanNotChangeActionState":                    4051,
		"ErrActionNotExist":                             4052,
		"ErrIsInteracting":                              4053,
		"ErrState":                                      4054,
		"ErrRequestExpired":                             4055,
		"ErrStateSetFailed":                             4071,
		"ErrCollectIdError":                             4072,
		"ErrCollectStateFailed":                         4073,
		"ErrCollectActorErr":                            4074,
		"ErrCollectOutRange":                            4075,
		"ErrCollectConditionEquip":                      4076,
		"ErrCollectConditionQuest":                      4077,
		"ErrAlreadyCollected":                           4078,
		"ErrMailGetFailed":                              4101,
		"ErrMailIllegality":                             4102,
		"ErrMailIsGet":                                  4103,
		"ErrMailIsDel":                                  4104,
		"ErrMailAcceptorEmpty":                          4105,
		"ErrMailTokenInvalid":                           4106,
		"ErrUnRegisterType":                             4201,
		"ErrIndexNotFound":                              4202,
		"ErrCantOpenTreasureBox":                        4203,
		"ErrPersonalStateEnd":                           4204,
		"ErrPersonalObjectStatus":                       4205,
		"ErrExp":                                        4301,
		"ErrLevel":                                      4302,
		"ErrAward":                                      4303,
		"ErrReceivedLevelAward":                         4304,
		"ErrLevelNotEnough":                             4305,
		"ErrRoleLevelNoRewards":                         4306,
		"ErrUnionNotHaveLimit":                          4401,
		"ErrUnionIsNotMember":                           4402,
		"ErrUnionOfficialNotExits":                      4403,
		"ErrUnionOfficialTooMany":                       4404,
		"ErrUnionHas":                                   4405,
		"ErrUnionReqCd":                                 4406,
		"ErrUnionReqHas":                                4407,
		"ErrUnionFull":                                  4408,
		"ErrUnionFailed":                                4409,
		"ErrUnionNameWrongful":                          4410,
		"ErrUnionNameUsed":                              4411,
		"ErrUnionNameOccupied":                          4412,
		"ErrApplyMax":                                   4415,
		"ErrUnionChangeNameCD":                          4416,
		"ErrUnionNameSizeError":                         4417,
		"ErrDeclarationSize":                            4418,
		"ErrDeclarationError":                           4419,
		"ErrOfficialNameRepeat":                         4420,
		"ErrDeclarationCd":                              4421,
		"ErrUnionInfoCd":                                4422,
		"ErrUnionNotExist":                              4423,
		"ErrUnionIllegalConditionType":                  4424,
		"ErrUnionRecruitSloganTooLong":                  4425,
		"ErrUnionRecruitDescriptionTooLong":             4426,
		"ErrUnionCreateTooOften":                        4427,
		"ErrUnionTagNoExist":                            4428,
		"ErrUnionIconTooMuch":                           4429,
		"ErrUnionGetListCd":                             4430,
		"ErrUnionBatchSearchUnionIdsTooMuch":            4431,
		"ErrUnionBatchSearchCd":                         4432,
		"ErrUnionGetCollectedIdsCd":                     4433,
		"ErrUnionBeyondMaxCollectedNum":                 4434,
		"ErrUnionIdHasCollected":                        4435,
		"ErrUnionIdNoCollected":                         4436,
		"ErrUnionActiveValueNotEnough":                  4437,
		"ErrUnionIllegalActiveId":                       4438,
		"ErrUnionTooShortForAwards":                     4439,
		"ErrUnionHasActiveAwards":                       4440,
		"ErrUnionNoJoin":                                4441,
		"ErrUnionOnlyEnterSelf":                         4442,
		"ErrUnionNoUnlockScene":                         4443,
		"ErrUnionBuildingMaxLevel":                      4444,
		"ErrUnionBuildingUpgrading":                     4445,
		"ErrUnionBuildingUpgradeNoFinish":               4446,
		"ErrUnionPrefixBuildNoMeet":                     4447,
		"ErrUnionExperienceNoEnough":                    4448,
		"ErrUnionMoneyNoEnough":                         4449,
		"ErrUnionBuildingNoUpgrading":                   4450,
		"ErrUnionSpeedUpItemNoEnough":                   4451,
		"ErrUnionSpeedUpTimesOut":                       4452,
		"ErrUnionTryLater":                              4453,
		"ErrUnionSpeedUpLevelError":                     4454,
		"ErrUnionUpgradeHasCompleted":                   4455,
		"ErrUnionIllegalBuildIdLv":                      4456,
		"ErrUnionBeyMaxCount":                           4457,
		"ErrUnionUserNoApply":                           4458,
		"ErrUnionNoOneKeyNoMuch":                        4459,
		"ErrUnionActivityNotStart":                      4460,
		"ErrUnionActivityNotProgress":                   4461,
		"ErrUnionActivityAwardGet":                      4462,
		"ErrUnionActivityNotEnjoy":                      4463,
		"ErrUnionCreateTimeTooShort":                    4464,
		"ErrUnionFunctionLock":                          4465,
		"ErrUnionEScreenLock":                           4466,
		"ErrUnionEScreenPositionLock":                   4467,
		"ErrUnionEScreenNoSet":                          4468,
		"ErrUnionEScreenPositionNoSet":                  4469,
		"ErrUnionEffectGridLock":                        4470,
		"ErrUnionEffectIdLock":                          4471,
		"ErrUnionEffectPosNoSet":                        4472,
		"ErrUnionEffectPosHasEnd":                       4473,
		"ErrUnionCrowFuncHasEnd":                        4474,
		"ErrUnionCrowFuncPosHasUsed":                    4475,
		"ErrUnionCrowFuncHasJoined":                     4476,
		"ErrUnionCrowFuncNoBegin":                       4477,
		"ErrUnionNoFinishBaseBuilding":                  4478,
		"ErrUnionCrowFuncIllegalFuncPos":                4479,
		"ErrUnionEScreenBeyondMaxTimes":                 4480,
		"ErrUnionTargetFunctionLock":                    4481,
		"ErrUnionNoMeet":                                4482,
		"ErrUnionActivityAwardCd":                       4483,
		"ErrUnionManagerNoKicked":                       4484,
		"ErrUnionDanceNoBegin":                          4485,
		"ErrUnionDanceEnd":                              4486,
		"ErrUnionDanceDrawnBox":                         4487,
		"ErrUnionDanceBoxDrawn":                         4488,
		"ErrUnionDanceNoDanceId":                        4489,
		"ErrUnionNoJoinDance":                           4490,
		"ErrUnionDanceNoDancing":                        4491,
		"ErrUnionRejectInvite":                          4492,
		"ErrUnionActivityHuntEnd":                       4493,
		"ErrUnionApplyListFull":                         4494,
		"ErrUionApplyListExist":                         4495,
		"ErrUnionGroupIvalid":                           4496,
		"ErrRepeatedRequest":                            4501,
		"ErrHasBeenBlackened":                           4502,
		"ErrNotFoundCharInfo":                           4503,
		"ErrInner":                                      4504,
		"ErrParam":                                      4505,
		"ErrSetShowPicture":                             4506,
		"ErrSetSignature":                               4507,
		"ErrSetHobbyMark":                               4508,
		"ErrSetTimeMark":                                4509,
		"ErrSetRemind":                                  4510,
		"ErrSetTop":                                     4511,
		"ErrAddFriend":                                  4512,
		"ErrSetProcessed":                               4513,
		"ErrSetRemark":                                  4514,
		"ErrDeleteFriend":                               4515,
		"ErrNotFoundGroup":                              4516,
		"ErrNotExistInGroup":                            4517,
		"ErrChangeGroup":                                4518,
		"ErrPersonalState":                              4519,
		"ErrOtherFriendMax":                             4520,
		"ErrCurFriendMax":                               4521,
		"ErrConfig":                                     4522,
		"ErrAlreadyFriend":                              4523,
		"ErrSearchSelf":                                 4524,
		"ErrSuggestionCd":                               4525,
		"ErrGroupMax":                                   4526,
		"ErrGroupNotExist":                              4527,
		"ErrGroupNameEmpty":                             4528,
		"ErrIllegalCharacter":                           4529,
		"ErrStringMax":                                  4530,
		"ErrOtherApplicationMax":                        4531,
		"ErrFriendlinessAwardHasRecord":                 4532,
		"ErrFriendlinessLevelLowAwardLevel":             4533,
		"ErrFriendBeyondAllFriendNum":                   4534,
		"ErrFriendIsNoUserFriend":                       4535,
		"ErrFriendlinessIllegalAwardLevel":              4536,
		"ErrFriendlinessLevelAwardIsEmpty":              4537,
		"ErrFriendBeBlackenedByTarget":                  4538,
		"ErrFriendApplyEachOther":                       4539,
		"ErrFriendCallBySmallerCharId":                  4540,
		"ErrFriendCallByBiggerCharId":                   4541,
		"ErrFriendBeBlackenedBySmaller":                 4542,
		"ErrFriendBeBlackenedByBigger":                  4543,
		"ErrFriendNoApply":                              4544,
		"ErrFriendApplySelf":                            4545,
		"ErrUserNameFormat":                             4546,
		"ErrFriendGetBaseTooOften":                      4547,
		"ErrFriendOnlyGetSelfBaseInfo":                  4548,
		"ErrActorGetFailed":                             4601,
		"ErrPivotIsActive":                              4602,
		"ErrPivotIsNotActive":                           4603,
		"ErrBreakPointIsGet":                            4604,
		"ErrActorIsNotPivot":                            4605,
		"ErrActorIsNotBreakPoint":                       4606,
		"ErrActorIsBreakPointNotFull":                   4607,
		"ErrPivotRewardIsGiven":                         4608,
		"ErrNotInsight":                                 4609,
		"ErrLearnSkillFail":                             4651,
		"ErrRemoveSkillFail":                            4652,
		"ErrUpdateSkillFail":                            4653,
		"ErrSkillOperatorType":                          4654,
		"ErrContainerOperator":                          4655,
		"ErrExchangeFail":                               4656,
		"ErrExchangeFailInCombat":                       4657,
		"ErrAvatarBeyondMaxPictureSize":                 4671,
		"ErrGetTokenFailed":                             4672,
		"ErrPictureVerifyFailed":                        4673,
		"ErrPictureIllegalType":                         4674,
		"ErrPictureErrorInfo":                           4675,
		"ErrPictureSizeInconsistent":                    4676,
		"ErrPictureFuncTypeIllegal":                     4677,
		"ErrPictureCallBackJudgeIllegal":                4678,
		"ErrPictureVerifyNoPass":                        4679,
		"ErrPictureVerifyBackParamIllegal":              4680,
		"ErrPictureCallBackParamIllegal":                4681,
		"ErrPictureIllegalId":                           4682,
		"ErrPictureCosErrors":                           4683,
		"ErrPictureInnerSysErr":                         4684,
		"ErrPictureNoSetEnvCosSecretId":                 4685,
		"ErrPictureNoSetEnvCosSecretKey":                4686,
		"ErrPictureCheckInMachineLocked":                4687,
		"ErrPictureNoTryOutItem":                        4688,
		"ErrPictureNoUploadItem":                        4689,
		"ErrPictureNoUnion":                             4690,
		"ErrNameSizeError":                              4701,
		"ErrSensitiveContent":                           4702,
		"ErrChangeNameFail":                             4703,
		"ErrChangeNameCardNotEnough":                    4704,
		"ErrChangeSameName":                             4705,
		"ErrCheckMuteWordsFailed":                       4706,
		"ErrCheckMuteWordsEmpty":                        4708,
		"ErrChangeShowIdFail":                           4711,
		"ErrChangeShowIdDuplicated":                     4712,
		"ErrChangeShowIdCardNotEnough":                  4713,
		"ErrFaceItemLock":                               4721,
		"ErrFaceItemGender":                             4722,
		"ErrFaceNoUploading":                            4723,
		"ErrFaceNoSupportFileSuffix":                    4724,
		"ErrFaceFileSuffixEmpty":                        4725,
		"ErrFaceIllegalCosKey":                          4726,
		"ErrFaceParseSuffixFailed":                      4727,
		"ErrFaceParseShortGuidFailed":                   4728,
		"ErrProficiencyNeedUnlock":                      4751,
		"ErrProficiencyUnlock":                          4752,
		"ErrUnlockItemNotEnough":                        4753,
		"ErrTaskNotFinish":                              4771,
		"ErrStickerAwardIsGet":                          4772,
		"ErrBookAwardIsGet":                             4773,
		"ErrInCd":                                       4791,
		"ErrMoneyNotEnough":                             4801,
		"ErrShopItemCantBuy":                            4802,
		"ErrShopBuyBusy":                                4803,
		"ErrPaymentConfigNotFound":                      4804,
		"ErrRefreshShopCountExceed":                     4806,
		"ErrShopCouponNotEnough":                        4807,
		"ErrShopCouponLimitNum":                         4808,
		"ErrShopCantBuyNoPrice":                         4809,
		"ErrNotFoundMonster":                            4901,
		"ErrNotMonster":                                 4902,
		"ErrMonsterUnlockExist":                         4903,
		"ErrMonsterAwardIsGet":                          4904,
		"ErrMonsterTargetNotFinish":                     4905,
		"ErrDropTypeNotSupport":                         4906,
		"ErrCounterNotEnough":                           4907,
		"ErrDropItemAlreadyPicked":                      4908,
		"ErrInteractionDoing":                           4941,
		"ErrInteractionCondition":                       4942,
		"ErrInteractionNotMore":                         4943,
		"ErrInteractionExistPos":                        4944,
		"ErrInteractionNotExist":                        4945,
		"ErrInteractionEntityNotExist":                  4946,
		"ErrInteractionHandleNotExist":                  4947,
		"ErrInteractionType":                            4948,
		"ErrInteractionBan":                             4949,
		"ErrInteractionConfig":                          4950,
		"ErrInteractionNotOneself":                      4951,
		"ErrInteractionDistance":                        4952,
		"ErrShowPieceIllegalPieceType":                  4961,
		"ErrShowPieceIllegalPieceId":                    4962,
		"ErrShowPieceNoInOftenUseList":                  4963,
		"ErrShowPieceNoUnlockList":                      4964,
		"ErrShowPieceRoulettePositionNoSet":             4965,
		"ErrShowPieceBeyondOftenUseMaxLen":              4966,
		"ErrShowPieceBeyondOftenRoulettePositionNum":    4967,
		"ErrShowPieceNoCommonPiece":                     4968,
		"ErrShowPieceNoTakeOn":                          4969,
		"ErrProfessionActivated":                        5001,
		"ErrProfessionNotHas":                           5002,
		"ErrProfessionSlotErr":                          5003,
		"ErrProfessionRemoveErr":                        5004,
		"ErrProfessionChangePlanFail":                   5005,
		"ErrProfessionStarConfigNotExist":               5006,
		"ErrProfessionStarNodeUnlock":                   5007,
		"ErrProfessionStarNodeNotUnlock":                5008,
		"ErrProfessionReplaceSkillNotExist":             5009,
		"ErrProfessionUpgradeNotGreaterCurLevel":        5010,
		"ErrProfessionProfessionBeForged":               5011,
		"ErrProfessionSlotTwoNotUnlock":                 5012,
		"ErrProfessionSkillAlreadyActive":               5013,
		"ErrProfessionSkillRemodelLevelWrong":           5014,
		"ErrAoyiSkillAlreadyActive":                     5015,
		"ErrAoyiSkillRemodelConfigNotExist":             5016,
		"ErrAoyiSkillRemodelLevelWrong":                 5017,
		"ErrProfessionEquipInCombat":                    5018,
		"ErrProfessionSwitchInCombat":                   5019,
		"ErrProfessionDungeonNotAllowSwitch":            5020,
		"ErrTalentIllegalTalentPoolId":                  5101,
		"ErrTalentBeyondCurTalentMaxPlanNum":            5102,
		"ErrTalentPoolNoActive":                         5108,
		"ErrTalentPlanNoActive":                         5109,
		"ErrTalentIllegalTalentId":                      5110,
		"ErrTalentTalentHasUnlocked":                    5111,
		"ErrTalentTalentNoUnlocked":                     5112,
		"ErrTalentChangeLvPassiveTalentMoreThanInPool":  5113,
		"ErrTalentRepeatedTalentId":                     5114,
		"ErrTalentNoPoolPassiveTalent":                  5115,
		"ErrTalentTalentPointsNoEnough":                 5116,
		"ErrTalentPassiveTalentListNoEmpty":             5118,
		"ErrTalentIllegalTalentLevel":                   5119,
		"ErrTalentNoMeetUpgradeCondition":               5120,
		"ErrTalentNoSupportDownLevelNow":                5121,
		"ErrTalentNoMeetPrevTalentLv":                   5122,
		"ErrTalentNoMeetPrevTalentPoint":                5123,
		"ErrTalentTreeNodeBDExclusive":                  5124,
		"ErrTalentTotalTalentPointNotEnough":            5125,
		"ErrTalentPreTalentNodeNotActivated":            5126,
		"ErrTalentResetTalentInCombat":                  5127,
		"ErrCookBookNotExist":                           5151,
		"ErrCookFoodNotEnough":                          5152,
		"ErrCookTypeMore":                               5153,
		"ErrCookCountMore":                              5154,
		"ErrCookHasBook":                                5155,
		"ErrCookMaterialNotMatch":                       5156,
		"ErrChatIllegalPrivateChatTarget":               5201,
		"ErrChatInTargetBlockList":                      5202,
		"ErrChatSendMsgBeyondMaxWords":                  5203,
		"ErrChatWorldChannelIdIsZero":                   5204,
		"ErrChatWorldChannelIdBeyondMaxId":              5205,
		"ErrChatIllegalChannelType":                     5206,
		"ErrChatIllegalMsgType":                         5207,
		"ErrChatNoInGoalChannel":                        5208,
		"ErrChatNeedConfigIdNotZero":                    5209,
		"ErrChatNeedMsgTextNotEmpty":                    5210,
		"ErrChatSendCdNoEnd":                            5211,
		"ErrChatRecordListIsEmpty":                      5212,
		"ErrChatTargetNotInPrivateList":                 5213,
		"ErrChatMsgIdMoreThanMaxReadMsgId":              5214,
		"ErrChatBeyondBlockListLimit":                   5215,
		"ErrChatWorldChannelIdBeyondMaxNum":             5216,
		"ErrChatBeyondMaxRecordId":                      5217,
		"ErrChatNoCreatePrivateSession":                 5218,
		"ErrChatPrivateSessionHasExit":                  5219,
		"ErrChatBeBan":                                  5220,
		"ErrChatFileIdTooLong":                          5221,
		"ErrChatFileIdEmpty":                            5222,
		"ErrChatMsgInfoEmpty":                           5223,
		"ErrChatNoShareChannel":                         5224,
		"ErrChatIllegalShareType":                       5225,
		"ErrChatIllegalHolderType":                      5226,
		"ErrChatNoSupportShareType":                     5227,
		"ErrChatShareTpeNoChatId":                       5228,
		"ErrChatShareNoFishRank":                        5229,
		"ErrChatLevelLimit":                             5230,
		"ErrChatNoFoundBlockListLimit":                  5231,
		"ErrTalentModTalentTagNotExist":                 5301,
		"ErrTextCheckForbidden":                         5351,
		"ErrTextCheckNoSceneType":                       5352,
		"ErrTextCheckIllegal":                           5353,
		"ErrTextCheckHttpError":                         5354,
		"ErrTextCheckTooManyItems":                      5355,
		"ErrConditionTimerOpen":                         5401,
		"ErrConditionOpenServer":                        5402,
		"ErrSkillDisable":                               5700,
		"ErrSkillIsCD":                                  5701,
		"ErrSkillMaxPassiveCount":                       5702,
		"ErrSkillInit":                                  5703,
		"ErrSkillInfo":                                  5704,
		"ErrUseSkillFightResInsufficient":               5705,
		"ErrUseSkillBuffNotEnough":                      5706,
		"ErrUseSkillItemInsufficient":                   5707,
		"ErrUseSkillAttrInsufficient":                   5708,
		"ErrUseSkillEnduranceInsufficient":              5709,
		"ErrUseSkillStateChange":                        5710,
		"ErrUseSkillClientSkillUuid":                    5711,
		"ErrFightLogicConditionBlockInvalid":            5730,
		"ErrFightLogicActionGroupInvalid":               5731,
		"ErrFightLogicConditionNotMatch":                5732,
		"ErrFightLogicRunDataInvalid":                   5733,
		"ErrSkillStageNotFind":                          5734,
		"ErrConditionCfgSize":                           6000,
		"ErrConditionDissatisfy":                        6001,
		"ErrConditionObjectIsNull":                      6002,
		"ErrConditionTypeNotFound":                      6003,
		"ErrConditionEntityDeath":                       6004,
		"ErrConditionUnionLevel":                        6005,
		"ErrConditionUnionMoney":                        6006,
		"ErrConditionNotMeet":                           6007,
		"ErrConditionNotInShapeShift":                   6008,
		"ErrSeasonAchievementNoExist":                   6101,
		"ErrSeasonAchievementNoFinish":                  6102,
		"ErrSeasonAchievementHasReceived":               6103,
		"ErrSeasonAchievementPrevIdNoReceived":          6104,
		"ErrSeasonAchievementPrevIdNoExist":             6105,
		"ErrSeasonAchievementTargetConfigError":         6106,
		"ErrSeasonRankHasMax":                           6151,
		"ErrSeasonRankHasReceived":                      6152,
		"ErrSeasonRankNoAchieve":                        6153,
		"ErrSeasonRankCurSeasonIdZero":                  6154,
		"ErrSeasonRankNoMeetCondition":                  6155,
		"ErrSeasonRankSeasonNoSame":                     6156,
		"ErrBattlePassBuyLevel":                         6201,
		"ErrBattlePassBuyMaterial":                      6202,
		"ErrBattlePassAwardGet":                         6203,
		"ErrBattlePassAwardNotUnlock":                   6204,
		"ErrBattlePassBuyWeekExpLimit":                  6205,
		"ErrBattlePassLevelError":                       6206,
		"ErrNoRefreshTimes":                             6207,
		"ErrTargetNotCompleted":                         6208,
		"ErrOnlinePeriodTooMore":                        6251,
		"ErrPersonalTagTooMore":                         6252,
		"ErrPersonalTagNotFound":                        6253,
		"ErrPersonalAvatarUnearned":                     6254,
		"ErrPersonalAvatarFrameUnearned":                6255,
		"ErrPersonalCardStyleUnearned":                  6256,
		"ErrPersonalPhotoTooMore":                       6257,
		"ErrPersonalMedalUnearned":                      6258,
		"ErrPersonalTargetUnlock":                       6259,
		"ErrPersonalTargetAlreadyGet":                   6260,
		"ErrPersonalMedalInvalidSlot":                   6261,
		"ErrPersonalMedalDuplicateValue":                6262,
		"ErrOnlinePeriodDuplicate":                      6263,
		"ErrPersonalTagDuplicate":                       6264,
		"ErrPersonalPhotoInvalidSlot":                   6265,
		"ErrPersonalPhotoDuplicateValue":                6266,
		"ErrSeasonMedalNoMeetActiveCondition":           6301,
		"ErrSeasonMedalNoMeetUpgradeCondition":          6302,
		"ErrSeasonMedalActiveMeetNoEnough":              6303,
		"ErrSeasonMedalUpgradeMeetNoEnough":             6304,
		"ErrSeasonMedalIllegalNodeId":                   6305,
		"ErrSeasonMedalChooseNodeIdBeyondMax":           6306,
		"ErrSeasonMedalHoleNoExist":                     6307,
		"ErrSeasonMedalHoleLock":                        6308,
		"ErrSeasonMedalNodeNoExist":                     6309,
		"ErrSeasonMedalHoleNoGet":                       6310,
		"ErrSeasonMedalMaxHoleLevel":                    6311,
		"ErrSeasonMedalCoreHoleLock":                    6312,
		"ErrSeasonMedalUpgradeMoneyNoEnough":            6313,
		"ErrSeasonNoCoreHole":                           6314,
		"ErrSeasonNoNormalHole":                         6315,
		"ErrSeasonMedalNoUpgradeNormalHoleItem":         6316,
		"ErrSceneLineNotExists":                         6351,
		"ErrSceneLineRefreshCd":                         6352,
		"ErrSceneLineNotSameScene":                      6353,
		"ErrSceneLineSameLine":                          6354,
		"ErrSceneLineInteracting":                       6355,
		"ErrSceneLineUserDead":                          6356,
		"ErrSceneLineFull":                              6357,
		"ErrSceneLineChangeCd":                          6358,
		"ErrSceneVersionRecycle":                        6359,
		"ErrSceneLineKick":                              6360,
		"ErrInstallSlotFailed":                          6401,
		"ErrUseSlotFailed":                              6402,
		"ErrUseSlotInCd":                                6403,
		"ErrInstatallSlotFailedInCombat":                6404,
		"ErrSlotSkillUnLoad":                            6405,
		"ErrUseCfgSkillFailed":                          6406,
		"ErrResonanceNotExists":                         6407,
		"ErrResonanceUnLoad":                            6408,
		"ErrUseDodgeFailed":                             6409,
		"ErrUseFixedSkillFailed":                        6410,
		"ErrUseBlockedSkill":                            6411,
		"ErrInstallBlockedSkill":                        6412,
		"ErrExchangeNotFound":                           6451,
		"ErrExchangeNotEnough":                          6452,
		"ErrExchangeItemLimit":                          6453,
		"ErrExchangeStepRange":                          6454,
		"ErrExchangeItemFull":                           6455,
		"ErrExchangePackageFull":                        6456,
		"ErrExchangePriceItemNotFind":                   6457,
		"ErrExchangeBuyNumNotEnough":                    6458,
		"ErrExchangeBuyItemNotFound":                    6459,
		"ErrExchangeTakeFailDelayTime":                  6460,
		"ErrExchangeTakeFailSellNum":                    6461,
		"ErrExchangeTakeItemNotFound":                   6462,
		"ErrExchangeWithdrawNoMoney":                    6463,
		"ErrExchangeDepositNotEnough":                   6464,
		"ErrExchangeItemNotBindOrCooldownNotExpire":     6465,
		"ErrExchangeInCd":                               6466,
		"ErrExchangeBuyCurrencyNoEnough":                6467,
		"ErrExchangeItemDelayTimeOver":                  6468,
		"ErrExchangeItemIsNotWithdraw":                  6469,
		"ErrExchangeBuyItemLimit":                       6470,
		"ErrExchangeItemIsNotNoticeShopItem":            6471,
		"ErrExchangeItemIsPreBuyAlready":                6472,
		"ErrExchangeItemNotPublic":                      6473,
		"ErrExchangeSaleRankExist":                      6474,
		"ErrExchangeSaleItemFull":                       6475,
		"ErrExchangeSaleDiamondNotEnough":               6476,
		"ErrExchangeSaleItemNotExists":                  6477,
		"ErrExchangeBuySaleCurrencyNoEnough":            6478,
		"ErrExchangeDiamondNotEnough":                   6479,
		"ErrExchangeSaleTakeOffCd":                      6480,
		"ErrExchangeSaleRateInvalid":                    6481,
		"ErrExchangePreItemFull":                        6482,
		"ErrExchangeSaleNumInvalid":                     6483,
		"ErrExchangeCareItemAlready":                    6484,
		"ErrExchangePriceRange":                         6485,
		"ErrExchangeRequestLimit":                       6486,
		"ErrExchangeItemBanned":                         6487,
		"ErrExchangePriceNotLow":                        6488,
		"ErrExchangeItemNotFind":                        6489,
		"ErrExchangeItemExistMinPrice":                  6490,
		"ErrExchangeNoticeItemMin":                      6491,
		"ErrExchangePreBuyUserFull":                     6492,
		"ErrModHoleNotUnlock":                           6501,
		"ErrModNotExist":                                6502,
		"ErrModSimilarRepeated":                         6503,
		"ErrModTypeLimitExceeded":                       6504,
		"ErrModPartNotExist":                            6505,
		"ErrModPartEnhanceLimit":                        6506,
		"ErrModInUse":                                   6507,
		"ErrModAlreadyInstalled":                        6508,
		"ErrModInitConfigNotExist":                      6509,
		"ErrModPartOverflow":                            6510,
		"ErrModCanNotLink":                              6511,
		"ErrFishingNotUseBait":                          6551,
		"ErrFishingRandomFailed":                        6552,
		"ErrFishingAlreadyGetFishItem":                  6553,
		"ErrFishingGetFishIdWrong":                      6554,
		"ErrFishingNotGet":                              6555,
		"ErrFishingNotResearchYet":                      6556,
		"ErrFishingNotUseRod":                           6557,
		"ErrFishingNoSeat":                              6558,
		"ErrFishingCantResearch":                        6559,
		"ErrFishDrawnLevelAward":                        6560,
		"ErrFishCannotDrawLevelAward":                   6561,
		"ErrFishDrawnNoLevelAward":                      6562,
		"ErrFreightNoRefreshGoods":                      6601,
		"ErrFreightBeyondMaxValue":                      6602,
		"ErrFreightDownMinValue":                        6603,
		"ErrFreightHasSetOff":                           6604,
		"ErrFreightNoSetOff":                            6605,
		"ErrFreightHasReward":                           6606,
		"ErrFreightIllegalGoodsId":                      6607,
		"ErrFreightItemNoEnough":                        6608,
		"ErrFreightNoUpSetOffTime":                      6609,
		"ErrFreightNoUpRewardTime":                      6610,
		"ErrFreightAutoSetOff":                          6611,
		"ErrTrialRoadAwardNotFinished":                  6651,
		"ErrTrialRoadAwardRoomGet":                      6652,
		"ErrNotCanRide":                                 6701,
		"ErrCombatStateNotRide":                         6702,
		"ErrAlreadyRide":                                6703,
		"ErrRideNotEnough":                              6704,
		"ErrCreateVehicleActorFailed":                   6705,
		"ErrNotVehicleOwner":                            6706,
		"ErrVehicleHasController":                       6707,
		"ErrVehicleNoSeat":                              6708,
		"ErrVehicleHasSeat":                             6709,
		"ErrNotRideVehicle":                             6710,
		"ErrVehicleNotExits":                            6711,
		"ErrInvalidRidePropertyType":                    6712,
		"ErrRideApplyTargetUserNotExist":                6713,
		"ErrRideConfigNotFind":                          6714,
		"ErrRideNotUnlock":                              6715,
		"ErrRideNotFind":                                6716,
		"ErrInvalidRideType":                            6717,
		"ErrRideApplyAlreadyExist":                      6718,
		"ErrRideApplyNotRideVehicle":                    6719,
		"ErrRideApplyVehicleNotSeat":                    6720,
		"ErrRideAlReadyRide":                            6721,
		"ErrRideApplyTargetTooFar":                      6722,
		"ErrRideNotTake":                                6723,
		"ErrRideInteracting":                            6724,
		"ErrShapeshiftNotRide":                          6725,
		"ErrFishingNotRide":                             6726,
		"ErrRideStateReject":                            6727,
		"ErrRideTypeNotSupport":                         6728,
		"ErrRideNotControl":                             6729,
		"ErrRideNotFunction":                            6730,
		"ErrRideSkinNotSupport":                         6731,
		"ErrRideSkinNotUnlock":                          6732,
		"ErrRideSkinDataAddFailed":                      6733,
		"ErrRideSkinNotSkin":                            6734,
		"ErrRideSkinAlreadyActivate":                    6735,
		"ErrWarehouseHas":                               7000,
		"ErrWarehouseNoHas":                             7001,
		"ErrWarehouseNoMem":                             7002,
		"ErrWarehouseNoPresident":                       7003,
		"ErrWarehouseNoHasItem":                         7004,
		"ErrWarehouseItemNoDeposit":                     7005,
		"ErrWarehouseGridPosNoExist":                    7006,
		"ErrWarehouseGridPosItemNoEnough":               7007,
		"ErrWarehouseNoInviteSelf":                      7008,
		"ErrWarehouseInviteesHas":                       7009,
		"ErrWarehouseMemBeyondMax":                      7010,
		"ErrWarehouseGridBeyondMax":                     7011,
		"ErrWarehouseNoSelf":                            7012,
		"ErrWarehouseIsMem":                             7013,
		"ErrWarehouseNoExist":                           7014,
		"ErrWarehouseDepositBeyondMax":                  7015,
		"ErrWarehouseTakeOutBeyondMax":                  7016,
		"ErrWarehouseItemIdNotSame":                     7017,
		"ErrWarehouseParams":                            7018,
		"ErrWarehouseNoKickSelf":                        7019,
		"ErrWarehousePresidentNoExit":                   7020,
		"ErrGashaDrawCount":                             7021,
		"ErrGashaDrawLimit":                             7022,
		"ErrGashaInvalidWishId":                         7023,
		"EErGashaWishRepeated":                          7026,
		"EErGashaWishCountNoEnough":                     7027,
		"ErrWarehouseAuthority":                         7028,
		"ErrEquipCantDecompose":                         7051,
		"ErrEquipNotRecastRecord":                       7052,
		"ErrEquipOnCantUsedRecastConsume":               7053,
		"ErrEquipWeaponNotEqualProfession":              7054,
		"ErrEquipSlotRefineBlessNotFit":                 7055,
		"ErrEquipNotRecast":                             7056,
		"ErrEquipEnchantItemMismatch":                   7057,
		"ErrEquipEnchantAlreadyEnchanted":               7058,
		"ErrEquipAnyItemMismatch":                       7059,
		"ErrEquipSlotRefineBlessNumTooMuch":             7060,
		"ErrEquipNameGroupNoMatch":                      7061,
		"ErrEquipPerfectionNoMatch":                     7062,
		"ErrEquipNotBreak":                              7063,
		"ErrEquipPutOnIng":                              7064,
		"ErrUserIsMatching":                             7101,
		"ErrUserNotInMatching":                          7102,
		"ErrUseNotWaitReady":                            7103,
		"ErrDungeonCantMatch":                           7104,
		"ErrMatchQueueFull":                             7105,
		"ErrCommonAwardCantReceive":                     7151,
		"ErrCommonAwardHasReceived":                     7152,
		"ErrCraftEnergyNotEnough":                       7201,
		"ErrCraftEnergyFull":                            7202,
		"ErrRecommendPlayNotOpen":                       7250,
		"ErrWeeklyTowerNoStart":                         7251,
		"ErrWeeklyTowerHasEnd":                          7252,
		"ErrWeeklyNoMeetProcessAward":                   7253,
		"ErrWeeklyHasRewardProcessAward":                7254,
		"ErrWeeklyNoLayerStageAward":                    7255,
		"ErrWeekOnlyCurSeasonAward":                     7256,
		"ErrWeeklyTowerCannotEnterLayer":                7257,
		"ErrWeeklyTowerBoxHasOpen":                      7258,
		"ErrWeeklyTowerNoBox":                           7259,
		"ErrWeeklyTowerNoStageAward":                    7260,
		"ErrWeeklyTowerNoTowerDungeon":                  7261,
		"ErrFunctionNoAward":                            7271,
		"ErrFunctionHasDrawn":                           7272,
		"ErrTLogIllegalExportArea":                      7281,
		"ErrPayOrderFail":                               7300,
		"ErrPayCostNotEnough":                           7301,
		"ErrPayCantBuy":                                 7302,
		"ErrPayCantExplore":                             7303,
		"ErrActivityNotFind":                            7350,
		"ErrActivityOffline":                            7351,
		"ErrActivityNotOpen":                            7352,
		"ErrActivityRewardNotFound":                     7353,
		"ErrActivityConditionNotFinish":                 7354,
		"ErrActivityAlreadyObtain":                      7355,
		"ErrActivityNotUnlock":                          7356,
		"ErrEmojiConfigError":                           7401,
		"ErrEmojiAlreadyUnlock":                         7402,
		"ErrEmojiUnlockItemError":                       7403,
		"ErrEmojiUnlockItemErrorItemNotEnough":          7404,
		"ErrEmojiUnlock":                                7405,
		"ErrGlobalConditionNotFound":                    7406,
		"ErrGlobalConditionNotLuckyValue":               7407,
		"ErrPathFindingCant":                            7412,
		"ErrPathFindingDataError":                       7413,
		"ErrPathFindingEndPosError":                     7414,
		"ErrPathFindingStartPosError":                   7415,
		"ErrPathFindingNoPath":                          7416,
		"ErrSignNotOpen":                                7421,
		"ErrSignNotSigned":                              7422,
		"ErrSignAlreadySigned":                          7423,
		"ErrSignTimeError":                              7424,
		"ErrTokenBucketLimit":                           9998,
		"ErrUnknown":                                    9999,
	}
)

func (x EErrorCode) Enum() *EErrorCode {
	p := new(EErrorCode)
	*p = x
	return p
}

func (x EErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[17].Descriptor()
}

func (EErrorCode) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[17]
}

func (x EErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EErrorCode.Descriptor instead.
func (EErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{17}
}

type EQuestStepStatus int32

const (
	EQuestStepStatus_QuestStepGoing  EQuestStepStatus = 0
	EQuestStepStatus_QuestStepFinish EQuestStepStatus = 1
	EQuestStepStatus_QuestStepFail   EQuestStepStatus = 2
)

// Enum value maps for EQuestStepStatus.
var (
	EQuestStepStatus_name = map[int32]string{
		0: "QuestStepGoing",
		1: "QuestStepFinish",
		2: "QuestStepFail",
	}
	EQuestStepStatus_value = map[string]int32{
		"QuestStepGoing":  0,
		"QuestStepFinish": 1,
		"QuestStepFail":   2,
	}
)

func (x EQuestStepStatus) Enum() *EQuestStepStatus {
	p := new(EQuestStepStatus)
	*p = x
	return p
}

func (x EQuestStepStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EQuestStepStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[18].Descriptor()
}

func (EQuestStepStatus) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[18]
}

func (x EQuestStepStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EQuestStepStatus.Descriptor instead.
func (EQuestStepStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{18}
}

type EEquipEnchantType int32

const (
	EEquipEnchantType_EEquipEnchantNone         EEquipEnchantType = 0
	EEquipEnchantType_EEquipEnchantOrdinary     EEquipEnchantType = 1
	EEquipEnchantType_EEquipEnchantIntermediate EEquipEnchantType = 2
	EEquipEnchantType_EEquipEnchantAdvanced     EEquipEnchantType = 3
)

// Enum value maps for EEquipEnchantType.
var (
	EEquipEnchantType_name = map[int32]string{
		0: "EEquipEnchantNone",
		1: "EEquipEnchantOrdinary",
		2: "EEquipEnchantIntermediate",
		3: "EEquipEnchantAdvanced",
	}
	EEquipEnchantType_value = map[string]int32{
		"EEquipEnchantNone":         0,
		"EEquipEnchantOrdinary":     1,
		"EEquipEnchantIntermediate": 2,
		"EEquipEnchantAdvanced":     3,
	}
)

func (x EEquipEnchantType) Enum() *EEquipEnchantType {
	p := new(EEquipEnchantType)
	*p = x
	return p
}

func (x EEquipEnchantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EEquipEnchantType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[19].Descriptor()
}

func (EEquipEnchantType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[19]
}

func (x EEquipEnchantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EEquipEnchantType.Descriptor instead.
func (EEquipEnchantType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{19}
}

type EShowPieceType int32

const (
	EShowPieceType_ShowPieceNull         EShowPieceType = 0
	EShowPieceType_ShowPieceNormalAction EShowPieceType = 1
	EShowPieceType_ShowPieceEmote        EShowPieceType = 2
	EShowPieceType_ShowPieceDoubleAction EShowPieceType = 3
	EShowPieceType_ShowPieceSticker      EShowPieceType = 4
)

// Enum value maps for EShowPieceType.
var (
	EShowPieceType_name = map[int32]string{
		0: "ShowPieceNull",
		1: "ShowPieceNormalAction",
		2: "ShowPieceEmote",
		3: "ShowPieceDoubleAction",
		4: "ShowPieceSticker",
	}
	EShowPieceType_value = map[string]int32{
		"ShowPieceNull":         0,
		"ShowPieceNormalAction": 1,
		"ShowPieceEmote":        2,
		"ShowPieceDoubleAction": 3,
		"ShowPieceSticker":      4,
	}
)

func (x EShowPieceType) Enum() *EShowPieceType {
	p := new(EShowPieceType)
	*p = x
	return p
}

func (x EShowPieceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EShowPieceType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[20].Descriptor()
}

func (EShowPieceType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[20]
}

func (x EShowPieceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EShowPieceType.Descriptor instead.
func (EShowPieceType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{20}
}

type MonsterTargetAward int32

const (
	MonsterTargetAward_MonsterTargetAwardNull     MonsterTargetAward = 0
	MonsterTargetAward_MonsterTargetAwardGet      MonsterTargetAward = 1
	MonsterTargetAward_MonsterTargetAwardReceived MonsterTargetAward = 2
)

// Enum value maps for MonsterTargetAward.
var (
	MonsterTargetAward_name = map[int32]string{
		0: "MonsterTargetAwardNull",
		1: "MonsterTargetAwardGet",
		2: "MonsterTargetAwardReceived",
	}
	MonsterTargetAward_value = map[string]int32{
		"MonsterTargetAwardNull":     0,
		"MonsterTargetAwardGet":      1,
		"MonsterTargetAwardReceived": 2,
	}
)

func (x MonsterTargetAward) Enum() *MonsterTargetAward {
	p := new(MonsterTargetAward)
	*p = x
	return p
}

func (x MonsterTargetAward) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonsterTargetAward) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[21].Descriptor()
}

func (MonsterTargetAward) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[21]
}

func (x MonsterTargetAward) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MonsterTargetAward.Descriptor instead.
func (MonsterTargetAward) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{21}
}

type EReceiveRewardStatus int32

const (
	EReceiveRewardStatus_EReceiveRewardStatusNotReceive EReceiveRewardStatus = 0
	EReceiveRewardStatus_EReceiveRewardStatusCanReceive EReceiveRewardStatus = 1
	EReceiveRewardStatus_EReceiveRewardStatusReceived   EReceiveRewardStatus = 2
)

// Enum value maps for EReceiveRewardStatus.
var (
	EReceiveRewardStatus_name = map[int32]string{
		0: "EReceiveRewardStatusNotReceive",
		1: "EReceiveRewardStatusCanReceive",
		2: "EReceiveRewardStatusReceived",
	}
	EReceiveRewardStatus_value = map[string]int32{
		"EReceiveRewardStatusNotReceive": 0,
		"EReceiveRewardStatusCanReceive": 1,
		"EReceiveRewardStatusReceived":   2,
	}
)

func (x EReceiveRewardStatus) Enum() *EReceiveRewardStatus {
	p := new(EReceiveRewardStatus)
	*p = x
	return p
}

func (x EReceiveRewardStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EReceiveRewardStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[22].Descriptor()
}

func (EReceiveRewardStatus) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[22]
}

func (x EReceiveRewardStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EReceiveRewardStatus.Descriptor instead.
func (EReceiveRewardStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{22}
}

type ERidePropertyType int32

const (
	ERidePropertyType_RidePropertyTypeNone  ERidePropertyType = 0
	ERidePropertyType_RidePropertyTypeLand  ERidePropertyType = 11
	ERidePropertyType_RidePropertyTypeWater ERidePropertyType = 12
	ERidePropertyType_RidePropertyTypeMax   ERidePropertyType = 13
)

// Enum value maps for ERidePropertyType.
var (
	ERidePropertyType_name = map[int32]string{
		0:  "RidePropertyTypeNone",
		11: "RidePropertyTypeLand",
		12: "RidePropertyTypeWater",
		13: "RidePropertyTypeMax",
	}
	ERidePropertyType_value = map[string]int32{
		"RidePropertyTypeNone":  0,
		"RidePropertyTypeLand":  11,
		"RidePropertyTypeWater": 12,
		"RidePropertyTypeMax":   13,
	}
)

func (x ERidePropertyType) Enum() *ERidePropertyType {
	p := new(ERidePropertyType)
	*p = x
	return p
}

func (x ERidePropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERidePropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[23].Descriptor()
}

func (ERidePropertyType) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[23]
}

func (x ERidePropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERidePropertyType.Descriptor instead.
func (ERidePropertyType) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{23}
}

type EItemBindFlag int32

const (
	EItemBindFlag_ItemBindNone EItemBindFlag = 0
	EItemBindFlag_ItemNotBind  EItemBindFlag = 1
	EItemBindFlag_ItemBindAll  EItemBindFlag = 2
)

// Enum value maps for EItemBindFlag.
var (
	EItemBindFlag_name = map[int32]string{
		0: "ItemBindNone",
		1: "ItemNotBind",
		2: "ItemBindAll",
	}
	EItemBindFlag_value = map[string]int32{
		"ItemBindNone": 0,
		"ItemNotBind":  1,
		"ItemBindAll":  2,
	}
)

func (x EItemBindFlag) Enum() *EItemBindFlag {
	p := new(EItemBindFlag)
	*p = x
	return p
}

func (x EItemBindFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemBindFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_bp_proto_enumTypes[24].Descriptor()
}

func (EItemBindFlag) Type() protoreflect.EnumType {
	return &file_pb_bp_proto_enumTypes[24]
}

func (x EItemBindFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EItemBindFlag.Descriptor instead.
func (EItemBindFlag) EnumDescriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{24}
}

type BasicData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CharID          *int64                 `protobuf:"varint,1,opt,name=CharID,proto3,oneof" json:"CharID,omitempty"`
	ShowId          *int64                 `protobuf:"varint,2,opt,name=ShowId,proto3,oneof" json:"ShowId,omitempty"`
	Name            *string                `protobuf:"bytes,3,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Gender          *int32                 `protobuf:"varint,4,opt,name=Gender,proto3,oneof" json:"Gender,omitempty"`
	BodySize        *EBodySize             `protobuf:"varint,5,opt,name=BodySize,proto3,enum=EBodySize,oneof" json:"BodySize,omitempty"`
	Level           *int32                 `protobuf:"varint,6,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
	SceneId         *int32                 `protobuf:"varint,7,opt,name=SceneId,proto3,oneof" json:"SceneId,omitempty"`
	PersonalState   []int32                `protobuf:"varint,8,rep,packed,name=PersonalState,proto3" json:"PersonalState,omitempty"`
	OfflineTime     *int64                 `protobuf:"varint,9,opt,name=OfflineTime,proto3,oneof" json:"OfflineTime,omitempty"`
	SceneGuid       *string                `protobuf:"bytes,10,opt,name=SceneGuid,proto3,oneof" json:"SceneGuid,omitempty"`
	CreateTime      *int64                 `protobuf:"varint,11,opt,name=CreateTime,proto3,oneof" json:"CreateTime,omitempty"`
	CurTalentPoolId *uint32                `protobuf:"varint,12,opt,name=CurTalentPoolId,proto3,oneof" json:"CurTalentPoolId,omitempty"`
	BotAiId         *uint32                `protobuf:"varint,13,opt,name=BotAiId,proto3,oneof" json:"BotAiId,omitempty"`
	RegisterChannel *int32                 `protobuf:"varint,14,opt,name=RegisterChannel,proto3,oneof" json:"RegisterChannel,omitempty"`
	CharState       *uint64                `protobuf:"varint,15,opt,name=CharState,proto3,oneof" json:"CharState,omitempty"`
	OnlineTime      *int64                 `protobuf:"varint,16,opt,name=OnlineTime,proto3,oneof" json:"OnlineTime,omitempty"`
	SumSaveDiamond  *int64                 `protobuf:"varint,17,opt,name=SumSaveDiamond,proto3,oneof" json:"SumSaveDiamond,omitempty"`
	IsNewbie        *bool                  `protobuf:"varint,18,opt,name=IsNewbie,proto3,oneof" json:"IsNewbie,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BasicData) Reset() {
	*x = BasicData{}
	mi := &file_pb_bp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicData) ProtoMessage() {}

func (x *BasicData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicData.ProtoReflect.Descriptor instead.
func (*BasicData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{0}
}

func (x *BasicData) GetCharID() int64 {
	if x != nil && x.CharID != nil {
		return *x.CharID
	}
	return 0
}

func (x *BasicData) GetShowId() int64 {
	if x != nil && x.ShowId != nil {
		return *x.ShowId
	}
	return 0
}

func (x *BasicData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BasicData) GetGender() int32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *BasicData) GetBodySize() EBodySize {
	if x != nil && x.BodySize != nil {
		return *x.BodySize
	}
	return EBodySize_BodySizeNull
}

func (x *BasicData) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *BasicData) GetSceneId() int32 {
	if x != nil && x.SceneId != nil {
		return *x.SceneId
	}
	return 0
}

func (x *BasicData) GetPersonalState() []int32 {
	if x != nil {
		return x.PersonalState
	}
	return nil
}

func (x *BasicData) GetOfflineTime() int64 {
	if x != nil && x.OfflineTime != nil {
		return *x.OfflineTime
	}
	return 0
}

func (x *BasicData) GetSceneGuid() string {
	if x != nil && x.SceneGuid != nil {
		return *x.SceneGuid
	}
	return ""
}

func (x *BasicData) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *BasicData) GetCurTalentPoolId() uint32 {
	if x != nil && x.CurTalentPoolId != nil {
		return *x.CurTalentPoolId
	}
	return 0
}

func (x *BasicData) GetBotAiId() uint32 {
	if x != nil && x.BotAiId != nil {
		return *x.BotAiId
	}
	return 0
}

func (x *BasicData) GetRegisterChannel() int32 {
	if x != nil && x.RegisterChannel != nil {
		return *x.RegisterChannel
	}
	return 0
}

func (x *BasicData) GetCharState() uint64 {
	if x != nil && x.CharState != nil {
		return *x.CharState
	}
	return 0
}

func (x *BasicData) GetOnlineTime() int64 {
	if x != nil && x.OnlineTime != nil {
		return *x.OnlineTime
	}
	return 0
}

func (x *BasicData) GetSumSaveDiamond() int64 {
	if x != nil && x.SumSaveDiamond != nil {
		return *x.SumSaveDiamond
	}
	return 0
}

func (x *BasicData) GetIsNewbie() bool {
	if x != nil && x.IsNewbie != nil {
		return *x.IsNewbie
	}
	return false
}

type PictureVerify struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Size            *uint32                `protobuf:"varint,1,opt,name=Size,proto3,oneof" json:"Size,omitempty"`
	ReviewStartTime *uint32                `protobuf:"varint,2,opt,name=ReviewStartTime,proto3,oneof" json:"ReviewStartTime,omitempty"`
	Version         *int64                 `protobuf:"varint,3,opt,name=Version,proto3,oneof" json:"Version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PictureVerify) Reset() {
	*x = PictureVerify{}
	mi := &file_pb_bp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureVerify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureVerify) ProtoMessage() {}

func (x *PictureVerify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureVerify.ProtoReflect.Descriptor instead.
func (*PictureVerify) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{1}
}

func (x *PictureVerify) GetSize() uint32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *PictureVerify) GetReviewStartTime() uint32 {
	if x != nil && x.ReviewStartTime != nil {
		return *x.ReviewStartTime
	}
	return 0
}

func (x *PictureVerify) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type PictureInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           *string                `protobuf:"bytes,1,opt,name=Url,proto3,oneof" json:"Url,omitempty"`
	Verify        *PictureVerify         `protobuf:"bytes,2,opt,name=Verify,proto3,oneof" json:"Verify,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PictureInfo) Reset() {
	*x = PictureInfo{}
	mi := &file_pb_bp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PictureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PictureInfo) ProtoMessage() {}

func (x *PictureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PictureInfo.ProtoReflect.Descriptor instead.
func (*PictureInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{2}
}

func (x *PictureInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *PictureInfo) GetVerify() *PictureVerify {
	if x != nil {
		return x.Verify
	}
	return nil
}

type AvatarInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AvatarId            *int32                 `protobuf:"varint,1,opt,name=AvatarId,proto3,oneof" json:"AvatarId,omitempty"`
	Profile             *PictureInfo           `protobuf:"bytes,2,opt,name=Profile,proto3,oneof" json:"Profile,omitempty"`
	HalfBody            *PictureInfo           `protobuf:"bytes,3,opt,name=HalfBody,proto3,oneof" json:"HalfBody,omitempty"`
	BusinessCardStyleId *int32                 `protobuf:"varint,4,opt,name=BusinessCardStyleId,proto3,oneof" json:"BusinessCardStyleId,omitempty"`
	AvatarFrameId       *int32                 `protobuf:"varint,5,opt,name=AvatarFrameId,proto3,oneof" json:"AvatarFrameId,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AvatarInfo) Reset() {
	*x = AvatarInfo{}
	mi := &file_pb_bp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarInfo) ProtoMessage() {}

func (x *AvatarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarInfo.ProtoReflect.Descriptor instead.
func (*AvatarInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{3}
}

func (x *AvatarInfo) GetAvatarId() int32 {
	if x != nil && x.AvatarId != nil {
		return *x.AvatarId
	}
	return 0
}

func (x *AvatarInfo) GetProfile() *PictureInfo {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *AvatarInfo) GetHalfBody() *PictureInfo {
	if x != nil {
		return x.HalfBody
	}
	return nil
}

func (x *AvatarInfo) GetBusinessCardStyleId() int32 {
	if x != nil && x.BusinessCardStyleId != nil {
		return *x.BusinessCardStyleId
	}
	return 0
}

func (x *AvatarInfo) GetAvatarFrameId() int32 {
	if x != nil && x.AvatarFrameId != nil {
		return *x.AvatarFrameId
	}
	return 0
}

type IntVec3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *int32                 `protobuf:"varint,1,opt,name=X,proto3,oneof" json:"X,omitempty"`
	Y             *int32                 `protobuf:"varint,2,opt,name=Y,proto3,oneof" json:"Y,omitempty"`
	Z             *int32                 `protobuf:"varint,3,opt,name=Z,proto3,oneof" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntVec3) Reset() {
	*x = IntVec3{}
	mi := &file_pb_bp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntVec3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntVec3) ProtoMessage() {}

func (x *IntVec3) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntVec3.ProtoReflect.Descriptor instead.
func (*IntVec3) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{4}
}

func (x *IntVec3) GetX() int32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *IntVec3) GetY() int32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *IntVec3) GetZ() int32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type Vector3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=X,proto3,oneof" json:"X,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=Y,proto3,oneof" json:"Y,omitempty"`
	Z             *float32               `protobuf:"fixed32,3,opt,name=Z,proto3,oneof" json:"Z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	mi := &file_pb_bp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{5}
}

func (x *Vector3) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vector3) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type Vector2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=X,proto3,oneof" json:"X,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=Y,proto3,oneof" json:"Y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector2) Reset() {
	*x = Vector2{}
	mi := &file_pb_bp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector2) ProtoMessage() {}

func (x *Vector2) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector2.ProtoReflect.Descriptor instead.
func (*Vector2) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{6}
}

func (x *Vector2) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vector2) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type FaceData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FaceInfo      map[int32]int32        `protobuf:"bytes,1,rep,name=FaceInfo,proto3" json:"FaceInfo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ColorInfo     map[int32]*IntVec3     `protobuf:"bytes,2,rep,name=ColorInfo,proto3" json:"ColorInfo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Height        *float32               `protobuf:"fixed32,3,opt,name=Height,proto3,oneof" json:"Height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FaceData) Reset() {
	*x = FaceData{}
	mi := &file_pb_bp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceData) ProtoMessage() {}

func (x *FaceData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceData.ProtoReflect.Descriptor instead.
func (*FaceData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{7}
}

func (x *FaceData) GetFaceInfo() map[int32]int32 {
	if x != nil {
		return x.FaceInfo
	}
	return nil
}

func (x *FaceData) GetColorInfo() map[int32]*IntVec3 {
	if x != nil {
		return x.ColorInfo
	}
	return nil
}

func (x *FaceData) GetHeight() float32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

type ProfessionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProfessionId  *int32                 `protobuf:"varint,1,opt,name=ProfessionId,proto3,oneof" json:"ProfessionId,omitempty"`
	WeaponSkin    *int32                 `protobuf:"varint,2,opt,name=WeaponSkin,proto3,oneof" json:"WeaponSkin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfessionData) Reset() {
	*x = ProfessionData{}
	mi := &file_pb_bp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionData) ProtoMessage() {}

func (x *ProfessionData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionData.ProtoReflect.Descriptor instead.
func (*ProfessionData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{8}
}

func (x *ProfessionData) GetProfessionId() int32 {
	if x != nil && x.ProfessionId != nil {
		return *x.ProfessionId
	}
	return 0
}

func (x *ProfessionData) GetWeaponSkin() int32 {
	if x != nil && x.WeaponSkin != nil {
		return *x.WeaponSkin
	}
	return 0
}

type EquipNine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          *int32                 `protobuf:"varint,1,opt,name=Slot,proto3,oneof" json:"Slot,omitempty"`
	EquipID       *int32                 `protobuf:"varint,2,opt,name=EquipID,proto3,oneof" json:"EquipID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipNine) Reset() {
	*x = EquipNine{}
	mi := &file_pb_bp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipNine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipNine) ProtoMessage() {}

func (x *EquipNine) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipNine.ProtoReflect.Descriptor instead.
func (*EquipNine) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{9}
}

func (x *EquipNine) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *EquipNine) GetEquipID() int32 {
	if x != nil && x.EquipID != nil {
		return *x.EquipID
	}
	return 0
}

type EquipData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EquipInfos    []*EquipNine           `protobuf:"bytes,1,rep,name=EquipInfos,proto3" json:"EquipInfos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipData) Reset() {
	*x = EquipData{}
	mi := &file_pb_bp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipData) ProtoMessage() {}

func (x *EquipData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipData.ProtoReflect.Descriptor instead.
func (*EquipData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{10}
}

func (x *EquipData) GetEquipInfos() []*EquipNine {
	if x != nil {
		return x.EquipInfos
	}
	return nil
}

type FashionColorInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              *int32                 `protobuf:"varint,1,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	Colors          map[int32]*IntVec3     `protobuf:"bytes,2,rep,name=Colors,proto3" json:"Colors,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AttachmentColor map[int32]*IntVec3     `protobuf:"bytes,3,rep,name=AttachmentColor,proto3" json:"AttachmentColor,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FashionColorInfo) Reset() {
	*x = FashionColorInfo{}
	mi := &file_pb_bp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionColorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionColorInfo) ProtoMessage() {}

func (x *FashionColorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionColorInfo.ProtoReflect.Descriptor instead.
func (*FashionColorInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{11}
}

func (x *FashionColorInfo) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FashionColorInfo) GetColors() map[int32]*IntVec3 {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *FashionColorInfo) GetAttachmentColor() map[int32]*IntVec3 {
	if x != nil {
		return x.AttachmentColor
	}
	return nil
}

type FashionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slot          *int32                 `protobuf:"varint,1,opt,name=Slot,proto3,oneof" json:"Slot,omitempty"`
	FashionId     *int32                 `protobuf:"varint,2,opt,name=FashionId,proto3,oneof" json:"FashionId,omitempty"`
	Colors        *FashionColorInfo      `protobuf:"bytes,3,opt,name=Colors,proto3,oneof" json:"Colors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FashionInfo) Reset() {
	*x = FashionInfo{}
	mi := &file_pb_bp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionInfo) ProtoMessage() {}

func (x *FashionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionInfo.ProtoReflect.Descriptor instead.
func (*FashionInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{12}
}

func (x *FashionInfo) GetSlot() int32 {
	if x != nil && x.Slot != nil {
		return *x.Slot
	}
	return 0
}

func (x *FashionInfo) GetFashionId() int32 {
	if x != nil && x.FashionId != nil {
		return *x.FashionId
	}
	return 0
}

func (x *FashionInfo) GetColors() *FashionColorInfo {
	if x != nil {
		return x.Colors
	}
	return nil
}

type FashionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FashionInfos  []*FashionInfo         `protobuf:"bytes,1,rep,name=FashionInfos,proto3" json:"FashionInfos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FashionData) Reset() {
	*x = FashionData{}
	mi := &file_pb_bp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionData) ProtoMessage() {}

func (x *FashionData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionData.ProtoReflect.Descriptor instead.
func (*FashionData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{13}
}

func (x *FashionData) GetFashionInfos() []*FashionInfo {
	if x != nil {
		return x.FashionInfos
	}
	return nil
}

type SettingData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SettingMap    map[int32]string       `protobuf:"bytes,1,rep,name=SettingMap,proto3" json:"SettingMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettingData) Reset() {
	*x = SettingData{}
	mi := &file_pb_bp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingData) ProtoMessage() {}

func (x *SettingData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingData.ProtoReflect.Descriptor instead.
func (*SettingData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{14}
}

func (x *SettingData) GetSettingMap() map[int32]string {
	if x != nil {
		return x.SettingMap
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=X,proto3,oneof" json:"X,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=Y,proto3,oneof" json:"Y,omitempty"`
	Z             *float32               `protobuf:"fixed32,3,opt,name=Z,proto3,oneof" json:"Z,omitempty"`
	Dir           *float32               `protobuf:"fixed32,4,opt,name=Dir,proto3,oneof" json:"Dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_pb_bp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{15}
}

func (x *Position) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Position) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Position) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Position) GetDir() float32 {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return 0
}

type LastSceneData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SceneId       *uint32                `protobuf:"varint,1,opt,name=SceneId,proto3,oneof" json:"SceneId,omitempty"`
	Pos           *Position              `protobuf:"bytes,2,opt,name=Pos,proto3,oneof" json:"Pos,omitempty"`
	SceneAreaId   *int32                 `protobuf:"varint,3,opt,name=SceneAreaId,proto3,oneof" json:"SceneAreaId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastSceneData) Reset() {
	*x = LastSceneData{}
	mi := &file_pb_bp_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastSceneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastSceneData) ProtoMessage() {}

func (x *LastSceneData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastSceneData.ProtoReflect.Descriptor instead.
func (*LastSceneData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{16}
}

func (x *LastSceneData) GetSceneId() uint32 {
	if x != nil && x.SceneId != nil {
		return *x.SceneId
	}
	return 0
}

func (x *LastSceneData) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *LastSceneData) GetSceneAreaId() int32 {
	if x != nil && x.SceneAreaId != nil {
		return *x.SceneAreaId
	}
	return 0
}

type SyncSceneData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MapId         *uint32                `protobuf:"varint,1,opt,name=MapId,proto3,oneof" json:"MapId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncSceneData) Reset() {
	*x = SyncSceneData{}
	mi := &file_pb_bp_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncSceneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSceneData) ProtoMessage() {}

func (x *SyncSceneData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSceneData.ProtoReflect.Descriptor instead.
func (*SyncSceneData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{17}
}

func (x *SyncSceneData) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

type SceneData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	MapId                 *uint32                `protobuf:"varint,1,opt,name=MapId,proto3,oneof" json:"MapId,omitempty"`
	ChannelId             *uint32                `protobuf:"varint,2,opt,name=ChannelId,proto3,oneof" json:"ChannelId,omitempty"`
	Pos                   *Position              `protobuf:"bytes,3,opt,name=Pos,proto3,oneof" json:"Pos,omitempty"`
	LevelUuid             *int64                 `protobuf:"varint,4,opt,name=LevelUuid,proto3,oneof" json:"LevelUuid,omitempty"`
	LevelPos              *Position              `protobuf:"bytes,5,opt,name=LevelPos,proto3,oneof" json:"LevelPos,omitempty"`
	LevelMapId            *uint32                `protobuf:"varint,6,opt,name=LevelMapId,proto3,oneof" json:"LevelMapId,omitempty"`
	LevelReviveId         *uint32                `protobuf:"varint,7,opt,name=LevelReviveId,proto3,oneof" json:"LevelReviveId,omitempty"`
	RecordId              map[uint32]uint32      `protobuf:"bytes,8,rep,name=RecordId,proto3" json:"RecordId,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	PlaneId               *uint32                `protobuf:"varint,9,opt,name=PlaneId,proto3,oneof" json:"PlaneId,omitempty"`
	SceneLayer            *uint32                `protobuf:"varint,10,opt,name=SceneLayer,proto3,oneof" json:"SceneLayer,omitempty"`
	CanSwitchLayer        *bool                  `protobuf:"varint,11,opt,name=CanSwitchLayer,proto3,oneof" json:"CanSwitchLayer,omitempty"`
	BeforeFallPos         *Position              `protobuf:"bytes,12,opt,name=BeforeFallPos,proto3,oneof" json:"BeforeFallPos,omitempty"`
	SceneGuid             *string                `protobuf:"bytes,13,opt,name=SceneGuid,proto3,oneof" json:"SceneGuid,omitempty"`
	DungeonGuid           *string                `protobuf:"bytes,14,opt,name=DungeonGuid,proto3,oneof" json:"DungeonGuid,omitempty"`
	LineId                *uint32                `protobuf:"varint,15,opt,name=LineId,proto3,oneof" json:"LineId,omitempty"`
	VisualLayerConfigId   *uint32                `protobuf:"varint,16,opt,name=VisualLayerConfigId,proto3,oneof" json:"VisualLayerConfigId,omitempty"`
	LastSceneData         *LastSceneData         `protobuf:"bytes,17,opt,name=LastSceneData,proto3,oneof" json:"LastSceneData,omitempty"`
	SceneAreaId           *int32                 `protobuf:"varint,18,opt,name=SceneAreaId,proto3,oneof" json:"SceneAreaId,omitempty"`
	LevelAreaId           *int32                 `protobuf:"varint,19,opt,name=LevelAreaId,proto3,oneof" json:"LevelAreaId,omitempty"`
	BeforeFallSceneAreaId *int32                 `protobuf:"varint,20,opt,name=BeforeFallSceneAreaId,proto3,oneof" json:"BeforeFallSceneAreaId,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SceneData) Reset() {
	*x = SceneData{}
	mi := &file_pb_bp_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneData) ProtoMessage() {}

func (x *SceneData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneData.ProtoReflect.Descriptor instead.
func (*SceneData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{18}
}

func (x *SceneData) GetMapId() uint32 {
	if x != nil && x.MapId != nil {
		return *x.MapId
	}
	return 0
}

func (x *SceneData) GetChannelId() uint32 {
	if x != nil && x.ChannelId != nil {
		return *x.ChannelId
	}
	return 0
}

func (x *SceneData) GetPos() *Position {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SceneData) GetLevelUuid() int64 {
	if x != nil && x.LevelUuid != nil {
		return *x.LevelUuid
	}
	return 0
}

func (x *SceneData) GetLevelPos() *Position {
	if x != nil {
		return x.LevelPos
	}
	return nil
}

func (x *SceneData) GetLevelMapId() uint32 {
	if x != nil && x.LevelMapId != nil {
		return *x.LevelMapId
	}
	return 0
}

func (x *SceneData) GetLevelReviveId() uint32 {
	if x != nil && x.LevelReviveId != nil {
		return *x.LevelReviveId
	}
	return 0
}

func (x *SceneData) GetRecordId() map[uint32]uint32 {
	if x != nil {
		return x.RecordId
	}
	return nil
}

func (x *SceneData) GetPlaneId() uint32 {
	if x != nil && x.PlaneId != nil {
		return *x.PlaneId
	}
	return 0
}

func (x *SceneData) GetSceneLayer() uint32 {
	if x != nil && x.SceneLayer != nil {
		return *x.SceneLayer
	}
	return 0
}

func (x *SceneData) GetCanSwitchLayer() bool {
	if x != nil && x.CanSwitchLayer != nil {
		return *x.CanSwitchLayer
	}
	return false
}

func (x *SceneData) GetBeforeFallPos() *Position {
	if x != nil {
		return x.BeforeFallPos
	}
	return nil
}

func (x *SceneData) GetSceneGuid() string {
	if x != nil && x.SceneGuid != nil {
		return *x.SceneGuid
	}
	return ""
}

func (x *SceneData) GetDungeonGuid() string {
	if x != nil && x.DungeonGuid != nil {
		return *x.DungeonGuid
	}
	return ""
}

func (x *SceneData) GetLineId() uint32 {
	if x != nil && x.LineId != nil {
		return *x.LineId
	}
	return 0
}

func (x *SceneData) GetVisualLayerConfigId() uint32 {
	if x != nil && x.VisualLayerConfigId != nil {
		return *x.VisualLayerConfigId
	}
	return 0
}

func (x *SceneData) GetLastSceneData() *LastSceneData {
	if x != nil {
		return x.LastSceneData
	}
	return nil
}

func (x *SceneData) GetSceneAreaId() int32 {
	if x != nil && x.SceneAreaId != nil {
		return *x.SceneAreaId
	}
	return 0
}

func (x *SceneData) GetLevelAreaId() int32 {
	if x != nil && x.LevelAreaId != nil {
		return *x.LevelAreaId
	}
	return 0
}

func (x *SceneData) GetBeforeFallSceneAreaId() int32 {
	if x != nil && x.BeforeFallSceneAreaId != nil {
		return *x.BeforeFallSceneAreaId
	}
	return 0
}

type UserAttrData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         *int32                 `protobuf:"varint,1,opt,name=State,proto3,oneof" json:"State,omitempty"`
	FightPoint    *int64                 `protobuf:"varint,2,opt,name=FightPoint,proto3,oneof" json:"FightPoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAttrData) Reset() {
	*x = UserAttrData{}
	mi := &file_pb_bp_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAttrData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAttrData) ProtoMessage() {}

func (x *UserAttrData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAttrData.ProtoReflect.Descriptor instead.
func (*UserAttrData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{19}
}

func (x *UserAttrData) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *UserAttrData) GetFightPoint() int64 {
	if x != nil && x.FightPoint != nil {
		return *x.FightPoint
	}
	return 0
}

type UserSceneInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SceneId       *int32                 `protobuf:"varint,1,opt,name=SceneId,proto3,oneof" json:"SceneId,omitempty"`
	SceneGuid     *string                `protobuf:"bytes,2,opt,name=SceneGuid,proto3,oneof" json:"SceneGuid,omitempty"`
	LineId        *int32                 `protobuf:"varint,3,opt,name=LineId,proto3,oneof" json:"LineId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSceneInfo) Reset() {
	*x = UserSceneInfo{}
	mi := &file_pb_bp_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSceneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSceneInfo) ProtoMessage() {}

func (x *UserSceneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSceneInfo.ProtoReflect.Descriptor instead.
func (*UserSceneInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{20}
}

func (x *UserSceneInfo) GetSceneId() int32 {
	if x != nil && x.SceneId != nil {
		return *x.SceneId
	}
	return 0
}

func (x *UserSceneInfo) GetSceneGuid() string {
	if x != nil && x.SceneGuid != nil {
		return *x.SceneGuid
	}
	return ""
}

func (x *UserSceneInfo) GetLineId() int32 {
	if x != nil && x.LineId != nil {
		return *x.LineId
	}
	return 0
}

type PersonalZoneShow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Medals        map[int32]int32        `protobuf:"bytes,1,rep,name=Medals,proto3" json:"Medals,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersonalZoneShow) Reset() {
	*x = PersonalZoneShow{}
	mi := &file_pb_bp_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalZoneShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalZoneShow) ProtoMessage() {}

func (x *PersonalZoneShow) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalZoneShow.ProtoReflect.Descriptor instead.
func (*PersonalZoneShow) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{21}
}

func (x *PersonalZoneShow) GetMedals() map[int32]int32 {
	if x != nil {
		return x.Medals
	}
	return nil
}

type TeamMemberSocialData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BasicData      *BasicData             `protobuf:"bytes,1,opt,name=BasicData,proto3,oneof" json:"BasicData,omitempty"`
	AvatarInfo     *AvatarInfo            `protobuf:"bytes,2,opt,name=AvatarInfo,proto3,oneof" json:"AvatarInfo,omitempty"`
	FaceData       *FaceData              `protobuf:"bytes,3,opt,name=FaceData,proto3,oneof" json:"FaceData,omitempty"`
	ProfessionData *ProfessionData        `protobuf:"bytes,4,opt,name=ProfessionData,proto3,oneof" json:"ProfessionData,omitempty"`
	EquipData      *EquipData             `protobuf:"bytes,5,opt,name=EquipData,proto3,oneof" json:"EquipData,omitempty"`
	FashionData    *FashionData           `protobuf:"bytes,6,opt,name=FashionData,proto3,oneof" json:"FashionData,omitempty"`
	UserSceneInfo  *UserSceneInfo         `protobuf:"bytes,7,opt,name=UserSceneInfo,proto3,oneof" json:"UserSceneInfo,omitempty"`
	UserAttrData   *UserAttrData          `protobuf:"bytes,8,opt,name=UserAttrData,proto3,oneof" json:"UserAttrData,omitempty"`
	PersonalZone   *PersonalZoneShow      `protobuf:"bytes,9,opt,name=PersonalZone,proto3,oneof" json:"PersonalZone,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TeamMemberSocialData) Reset() {
	*x = TeamMemberSocialData{}
	mi := &file_pb_bp_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMemberSocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemberSocialData) ProtoMessage() {}

func (x *TeamMemberSocialData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemberSocialData.ProtoReflect.Descriptor instead.
func (*TeamMemberSocialData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{22}
}

func (x *TeamMemberSocialData) GetBasicData() *BasicData {
	if x != nil {
		return x.BasicData
	}
	return nil
}

func (x *TeamMemberSocialData) GetAvatarInfo() *AvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

func (x *TeamMemberSocialData) GetFaceData() *FaceData {
	if x != nil {
		return x.FaceData
	}
	return nil
}

func (x *TeamMemberSocialData) GetProfessionData() *ProfessionData {
	if x != nil {
		return x.ProfessionData
	}
	return nil
}

func (x *TeamMemberSocialData) GetEquipData() *EquipData {
	if x != nil {
		return x.EquipData
	}
	return nil
}

func (x *TeamMemberSocialData) GetFashionData() *FashionData {
	if x != nil {
		return x.FashionData
	}
	return nil
}

func (x *TeamMemberSocialData) GetUserSceneInfo() *UserSceneInfo {
	if x != nil {
		return x.UserSceneInfo
	}
	return nil
}

func (x *TeamMemberSocialData) GetUserAttrData() *UserAttrData {
	if x != nil {
		return x.UserAttrData
	}
	return nil
}

func (x *TeamMemberSocialData) GetPersonalZone() *PersonalZoneShow {
	if x != nil {
		return x.PersonalZone
	}
	return nil
}

type TeamMemData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CharId        *int64                 `protobuf:"varint,1,opt,name=CharId,proto3,oneof" json:"CharId,omitempty"`
	EnterTime     *uint32                `protobuf:"varint,2,opt,name=EnterTime,proto3,oneof" json:"EnterTime,omitempty"`
	CallStatus    *int32                 `protobuf:"varint,3,opt,name=CallStatus,proto3,oneof" json:"CallStatus,omitempty"`
	TalentId      *int32                 `protobuf:"varint,4,opt,name=TalentId,proto3,oneof" json:"TalentId,omitempty"`
	OnlineStatus  *int32                 `protobuf:"varint,5,opt,name=OnlineStatus,proto3,oneof" json:"OnlineStatus,omitempty"`
	SceneId       *int32                 `protobuf:"varint,6,opt,name=SceneId,proto3,oneof" json:"SceneId,omitempty"`
	VoiceIsOpen   *bool                  `protobuf:"varint,7,opt,name=VoiceIsOpen,proto3,oneof" json:"VoiceIsOpen,omitempty"`
	GroupId       *int32                 `protobuf:"varint,8,opt,name=GroupId,proto3,oneof" json:"GroupId,omitempty"`
	SocialData    *TeamMemberSocialData  `protobuf:"bytes,9,opt,name=SocialData,proto3,oneof" json:"SocialData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeamMemData) Reset() {
	*x = TeamMemData{}
	mi := &file_pb_bp_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMemData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMemData) ProtoMessage() {}

func (x *TeamMemData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMemData.ProtoReflect.Descriptor instead.
func (*TeamMemData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{23}
}

func (x *TeamMemData) GetCharId() int64 {
	if x != nil && x.CharId != nil {
		return *x.CharId
	}
	return 0
}

func (x *TeamMemData) GetEnterTime() uint32 {
	if x != nil && x.EnterTime != nil {
		return *x.EnterTime
	}
	return 0
}

func (x *TeamMemData) GetCallStatus() int32 {
	if x != nil && x.CallStatus != nil {
		return *x.CallStatus
	}
	return 0
}

func (x *TeamMemData) GetTalentId() int32 {
	if x != nil && x.TalentId != nil {
		return *x.TalentId
	}
	return 0
}

func (x *TeamMemData) GetOnlineStatus() int32 {
	if x != nil && x.OnlineStatus != nil {
		return *x.OnlineStatus
	}
	return 0
}

func (x *TeamMemData) GetSceneId() int32 {
	if x != nil && x.SceneId != nil {
		return *x.SceneId
	}
	return 0
}

func (x *TeamMemData) GetVoiceIsOpen() bool {
	if x != nil && x.VoiceIsOpen != nil {
		return *x.VoiceIsOpen
	}
	return false
}

func (x *TeamMemData) GetGroupId() int32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *TeamMemData) GetSocialData() *TeamMemberSocialData {
	if x != nil {
		return x.SocialData
	}
	return nil
}

type CharTeam struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TeamId          *int64                 `protobuf:"varint,1,opt,name=TeamId,proto3,oneof" json:"TeamId,omitempty"`
	LeaderId        *int64                 `protobuf:"varint,2,opt,name=LeaderId,proto3,oneof" json:"LeaderId,omitempty"`
	TeamTargetId    *uint32                `protobuf:"varint,3,opt,name=TeamTargetId,proto3,oneof" json:"TeamTargetId,omitempty"`
	TeamNum         *uint32                `protobuf:"varint,4,opt,name=TeamNum,proto3,oneof" json:"TeamNum,omitempty"`
	CharIds         []int64                `protobuf:"varint,5,rep,packed,name=CharIds,proto3" json:"CharIds,omitempty"`
	IsMatching      *bool                  `protobuf:"varint,6,opt,name=IsMatching,proto3,oneof" json:"IsMatching,omitempty"`
	CharTeamVersion *int32                 `protobuf:"varint,7,opt,name=CharTeamVersion,proto3,oneof" json:"CharTeamVersion,omitempty"`
	TeamMemberData  map[int64]*TeamMemData `protobuf:"bytes,8,rep,name=TeamMemberData,proto3" json:"TeamMemberData,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CharTeam) Reset() {
	*x = CharTeam{}
	mi := &file_pb_bp_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharTeam) ProtoMessage() {}

func (x *CharTeam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharTeam.ProtoReflect.Descriptor instead.
func (*CharTeam) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{24}
}

func (x *CharTeam) GetTeamId() int64 {
	if x != nil && x.TeamId != nil {
		return *x.TeamId
	}
	return 0
}

func (x *CharTeam) GetLeaderId() int64 {
	if x != nil && x.LeaderId != nil {
		return *x.LeaderId
	}
	return 0
}

func (x *CharTeam) GetTeamTargetId() uint32 {
	if x != nil && x.TeamTargetId != nil {
		return *x.TeamTargetId
	}
	return 0
}

func (x *CharTeam) GetTeamNum() uint32 {
	if x != nil && x.TeamNum != nil {
		return *x.TeamNum
	}
	return 0
}

func (x *CharTeam) GetCharIds() []int64 {
	if x != nil {
		return x.CharIds
	}
	return nil
}

func (x *CharTeam) GetIsMatching() bool {
	if x != nil && x.IsMatching != nil {
		return *x.IsMatching
	}
	return false
}

func (x *CharTeam) GetCharTeamVersion() int32 {
	if x != nil && x.CharTeamVersion != nil {
		return *x.CharTeamVersion
	}
	return 0
}

func (x *CharTeam) GetTeamMemberData() map[int64]*TeamMemData {
	if x != nil {
		return x.TeamMemberData
	}
	return nil
}

type UnionData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnionId       *int64                 `protobuf:"varint,1,opt,name=UnionId,proto3,oneof" json:"UnionId,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	UnionHuntRank *int32                 `protobuf:"varint,3,opt,name=UnionHuntRank,proto3,oneof" json:"UnionHuntRank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnionData) Reset() {
	*x = UnionData{}
	mi := &file_pb_bp_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionData) ProtoMessage() {}

func (x *UnionData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionData.ProtoReflect.Descriptor instead.
func (*UnionData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{25}
}

func (x *UnionData) GetUnionId() int64 {
	if x != nil && x.UnionId != nil {
		return *x.UnionId
	}
	return 0
}

func (x *UnionData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UnionData) GetUnionHuntRank() int32 {
	if x != nil && x.UnionHuntRank != nil {
		return *x.UnionHuntRank
	}
	return 0
}

type AccountData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenId        *string                `protobuf:"bytes,1,opt,name=OpenId,proto3,oneof" json:"OpenId,omitempty"`
	SdkType       *int32                 `protobuf:"varint,2,opt,name=SdkType,proto3,oneof" json:"SdkType,omitempty"`
	AccountId     *string                `protobuf:"bytes,3,opt,name=AccountId,proto3,oneof" json:"AccountId,omitempty"`
	AccountUuid   *string                `protobuf:"bytes,4,opt,name=AccountUuid,proto3,oneof" json:"AccountUuid,omitempty"`
	Os            *SystemType            `protobuf:"varint,5,opt,name=Os,proto3,enum=SystemType,oneof" json:"Os,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountData) Reset() {
	*x = AccountData{}
	mi := &file_pb_bp_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountData) ProtoMessage() {}

func (x *AccountData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountData.ProtoReflect.Descriptor instead.
func (*AccountData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{26}
}

func (x *AccountData) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

func (x *AccountData) GetSdkType() int32 {
	if x != nil && x.SdkType != nil {
		return *x.SdkType
	}
	return 0
}

func (x *AccountData) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *AccountData) GetAccountUuid() string {
	if x != nil && x.AccountUuid != nil {
		return *x.AccountUuid
	}
	return ""
}

func (x *AccountData) GetOs() SystemType {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return SystemType_SystemType_Null
}

type FunctionData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UnlockedMap      map[int32]bool         `protobuf:"bytes,1,rep,name=UnlockedMap,proto3" json:"UnlockedMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DrawnFunctionIds []int32                `protobuf:"varint,2,rep,packed,name=DrawnFunctionIds,proto3" json:"DrawnFunctionIds,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FunctionData) Reset() {
	*x = FunctionData{}
	mi := &file_pb_bp_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionData) ProtoMessage() {}

func (x *FunctionData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionData.ProtoReflect.Descriptor instead.
func (*FunctionData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{27}
}

func (x *FunctionData) GetUnlockedMap() map[int32]bool {
	if x != nil {
		return x.UnlockedMap
	}
	return nil
}

func (x *FunctionData) GetDrawnFunctionIds() []int32 {
	if x != nil {
		return x.DrawnFunctionIds
	}
	return nil
}

type ActionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActionId      *int32                 `protobuf:"varint,1,opt,name=ActionId,proto3,oneof" json:"ActionId,omitempty"`
	Period        *int32                 `protobuf:"varint,2,opt,name=Period,proto3,oneof" json:"Period,omitempty"`
	Percent       *float32               `protobuf:"fixed32,3,opt,name=Percent,proto3,oneof" json:"Percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionInfo) Reset() {
	*x = ActionInfo{}
	mi := &file_pb_bp_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionInfo) ProtoMessage() {}

func (x *ActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionInfo.ProtoReflect.Descriptor instead.
func (*ActionInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{28}
}

func (x *ActionInfo) GetActionId() int32 {
	if x != nil && x.ActionId != nil {
		return *x.ActionId
	}
	return 0
}

func (x *ActionInfo) GetPeriod() int32 {
	if x != nil && x.Period != nil {
		return *x.Period
	}
	return 0
}

func (x *ActionInfo) GetPercent() float32 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

type EditorUIPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	X             *float32               `protobuf:"fixed32,2,opt,name=X,proto3,oneof" json:"X,omitempty"`
	Y             *float32               `protobuf:"fixed32,3,opt,name=Y,proto3,oneof" json:"Y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EditorUIPosition) Reset() {
	*x = EditorUIPosition{}
	mi := &file_pb_bp_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditorUIPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditorUIPosition) ProtoMessage() {}

func (x *EditorUIPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditorUIPosition.ProtoReflect.Descriptor instead.
func (*EditorUIPosition) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{29}
}

func (x *EditorUIPosition) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *EditorUIPosition) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *EditorUIPosition) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

type FashionQualityCollectInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QualityCount  map[int32]int32        `protobuf:"bytes,1,rep,name=QualityCount,proto3" json:"QualityCount,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FashionQualityCollectInfo) Reset() {
	*x = FashionQualityCollectInfo{}
	mi := &file_pb_bp_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionQualityCollectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionQualityCollectInfo) ProtoMessage() {}

func (x *FashionQualityCollectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionQualityCollectInfo.ProtoReflect.Descriptor instead.
func (*FashionQualityCollectInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{30}
}

func (x *FashionQualityCollectInfo) GetQualityCount() map[int32]int32 {
	if x != nil {
		return x.QualityCount
	}
	return nil
}

type RideQualityCollectInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QualityCount  map[int32]int32        `protobuf:"bytes,1,rep,name=QualityCount,proto3" json:"QualityCount,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RideQualityCollectInfo) Reset() {
	*x = RideQualityCollectInfo{}
	mi := &file_pb_bp_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RideQualityCollectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideQualityCollectInfo) ProtoMessage() {}

func (x *RideQualityCollectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideQualityCollectInfo.ProtoReflect.Descriptor instead.
func (*RideQualityCollectInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{31}
}

func (x *RideQualityCollectInfo) GetQualityCount() map[int32]int32 {
	if x != nil {
		return x.QualityCount
	}
	return nil
}

type PersonalZone struct {
	state                      protoimpl.MessageState               `protogen:"open.v1"`
	OnlinePeriods              []int32                              `protobuf:"varint,2,rep,packed,name=online_periods,json=onlinePeriods,proto3" json:"online_periods,omitempty"`
	Tags                       []int32                              `protobuf:"varint,3,rep,packed,name=tags,proto3" json:"tags,omitempty"`
	Medals                     map[int32]int32                      `protobuf:"bytes,5,rep,name=medals,proto3" json:"medals,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ThemeId                    int32                                `protobuf:"varint,6,opt,name=theme_id,json=themeId,proto3" json:"theme_id,omitempty"`
	BusinessCardStyleId        int32                                `protobuf:"varint,7,opt,name=business_card_style_id,json=businessCardStyleId,proto3" json:"business_card_style_id,omitempty"`
	AvatarFrameId              int32                                `protobuf:"varint,8,opt,name=avatar_frame_id,json=avatarFrameId,proto3" json:"avatar_frame_id,omitempty"`
	ActionInfo                 *ActionInfo                          `protobuf:"bytes,9,opt,name=action_info,json=actionInfo,proto3" json:"action_info,omitempty"`
	UiPosition                 []*EditorUIPosition                  `protobuf:"bytes,10,rep,name=ui_position,json=uiPosition,proto3" json:"ui_position,omitempty"`
	TitleId                    int32                                `protobuf:"varint,11,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	FashionRefreshFlag         bool                                 `protobuf:"varint,12,opt,name=fashion_refresh_flag,json=fashionRefreshFlag,proto3" json:"fashion_refresh_flag,omitempty"`
	FashionCollectPoint        int32                                `protobuf:"varint,13,opt,name=fashion_collect_point,json=fashionCollectPoint,proto3" json:"fashion_collect_point,omitempty"`
	FashionCollectQualityCount map[int32]*FashionQualityCollectInfo `protobuf:"bytes,14,rep,name=fashion_collect_quality_count,json=fashionCollectQualityCount,proto3" json:"fashion_collect_quality_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Photos                     []int32                              `protobuf:"varint,15,rep,packed,name=photos,proto3" json:"photos,omitempty"`
	UnlockTargetRecord         map[int32]int32                      `protobuf:"bytes,16,rep,name=unlock_target_record,json=unlockTargetRecord,proto3" json:"unlock_target_record,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	UnlockGetRewardRecord      map[int32]bool                       `protobuf:"bytes,17,rep,name=unlock_get_reward_record,json=unlockGetRewardRecord,proto3" json:"unlock_get_reward_record,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RideCollectPoint           int32                                `protobuf:"varint,18,opt,name=ride_collect_point,json=rideCollectPoint,proto3" json:"ride_collect_point,omitempty"`
	RideCollectQualityCount    map[int32]*RideQualityCollectInfo    `protobuf:"bytes,19,rep,name=ride_collect_quality_count,json=rideCollectQualityCount,proto3" json:"ride_collect_quality_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WeaponSkinCollectPoint     int32                                `protobuf:"varint,20,opt,name=weapon_skin_collect_point,json=weaponSkinCollectPoint,proto3" json:"weapon_skin_collect_point,omitempty"`
	PhotosWall                 map[int32]int32                      `protobuf:"bytes,21,rep,name=photos_wall,json=photosWall,proto3" json:"photos_wall,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *PersonalZone) Reset() {
	*x = PersonalZone{}
	mi := &file_pb_bp_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalZone) ProtoMessage() {}

func (x *PersonalZone) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalZone.ProtoReflect.Descriptor instead.
func (*PersonalZone) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{32}
}

func (x *PersonalZone) GetOnlinePeriods() []int32 {
	if x != nil {
		return x.OnlinePeriods
	}
	return nil
}

func (x *PersonalZone) GetTags() []int32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PersonalZone) GetMedals() map[int32]int32 {
	if x != nil {
		return x.Medals
	}
	return nil
}

func (x *PersonalZone) GetThemeId() int32 {
	if x != nil {
		return x.ThemeId
	}
	return 0
}

func (x *PersonalZone) GetBusinessCardStyleId() int32 {
	if x != nil {
		return x.BusinessCardStyleId
	}
	return 0
}

func (x *PersonalZone) GetAvatarFrameId() int32 {
	if x != nil {
		return x.AvatarFrameId
	}
	return 0
}

func (x *PersonalZone) GetActionInfo() *ActionInfo {
	if x != nil {
		return x.ActionInfo
	}
	return nil
}

func (x *PersonalZone) GetUiPosition() []*EditorUIPosition {
	if x != nil {
		return x.UiPosition
	}
	return nil
}

func (x *PersonalZone) GetTitleId() int32 {
	if x != nil {
		return x.TitleId
	}
	return 0
}

func (x *PersonalZone) GetFashionRefreshFlag() bool {
	if x != nil {
		return x.FashionRefreshFlag
	}
	return false
}

func (x *PersonalZone) GetFashionCollectPoint() int32 {
	if x != nil {
		return x.FashionCollectPoint
	}
	return 0
}

func (x *PersonalZone) GetFashionCollectQualityCount() map[int32]*FashionQualityCollectInfo {
	if x != nil {
		return x.FashionCollectQualityCount
	}
	return nil
}

func (x *PersonalZone) GetPhotos() []int32 {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *PersonalZone) GetUnlockTargetRecord() map[int32]int32 {
	if x != nil {
		return x.UnlockTargetRecord
	}
	return nil
}

func (x *PersonalZone) GetUnlockGetRewardRecord() map[int32]bool {
	if x != nil {
		return x.UnlockGetRewardRecord
	}
	return nil
}

func (x *PersonalZone) GetRideCollectPoint() int32 {
	if x != nil {
		return x.RideCollectPoint
	}
	return 0
}

func (x *PersonalZone) GetRideCollectQualityCount() map[int32]*RideQualityCollectInfo {
	if x != nil {
		return x.RideCollectQualityCount
	}
	return nil
}

func (x *PersonalZone) GetWeaponSkinCollectPoint() int32 {
	if x != nil {
		return x.WeaponSkinCollectPoint
	}
	return 0
}

func (x *PersonalZone) GetPhotosWall() map[int32]int32 {
	if x != nil {
		return x.PhotosWall
	}
	return nil
}

type WarehouseData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WarehouseId   *int64                 `protobuf:"varint,1,opt,name=WarehouseId,proto3,oneof" json:"WarehouseId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WarehouseData) Reset() {
	*x = WarehouseData{}
	mi := &file_pb_bp_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WarehouseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarehouseData) ProtoMessage() {}

func (x *WarehouseData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarehouseData.ProtoReflect.Descriptor instead.
func (*WarehouseData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{33}
}

func (x *WarehouseData) GetWarehouseId() int64 {
	if x != nil && x.WarehouseId != nil {
		return *x.WarehouseId
	}
	return 0
}

type SeasonRankData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeasonRanks   map[uint32]uint32      `protobuf:"bytes,1,rep,name=SeasonRanks,proto3" json:"SeasonRanks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeasonRankData) Reset() {
	*x = SeasonRankData{}
	mi := &file_pb_bp_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonRankData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRankData) ProtoMessage() {}

func (x *SeasonRankData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRankData.ProtoReflect.Descriptor instead.
func (*SeasonRankData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{34}
}

func (x *SeasonRankData) GetSeasonRanks() map[uint32]uint32 {
	if x != nil {
		return x.SeasonRanks
	}
	return nil
}

type FishRecord struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	FishId             *int32                 `protobuf:"varint,1,opt,name=FishId,proto3,oneof" json:"FishId,omitempty"`
	FirstFlag          *bool                  `protobuf:"varint,2,opt,name=FirstFlag,proto3,oneof" json:"FirstFlag,omitempty"`
	Size               *int32                 `protobuf:"varint,3,opt,name=Size,proto3,oneof" json:"Size,omitempty"`
	Millisecond        *int64                 `protobuf:"varint,4,opt,name=Millisecond,proto3,oneof" json:"Millisecond,omitempty"`
	Research           *int32                 `protobuf:"varint,5,opt,name=Research,proto3,oneof" json:"Research,omitempty"`
	Count              *uint32                `protobuf:"varint,6,opt,name=Count,proto3,oneof" json:"Count,omitempty"`
	MinSize            *int32                 `protobuf:"varint,7,opt,name=MinSize,proto3,oneof" json:"MinSize,omitempty"`
	MinSizemillisecond *int64                 `protobuf:"varint,8,opt,name=MinSizemillisecond,proto3,oneof" json:"MinSizemillisecond,omitempty"`
	StarCnts           map[int32]int64        `protobuf:"bytes,9,rep,name=StarCnts,proto3" json:"StarCnts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FishRecord) Reset() {
	*x = FishRecord{}
	mi := &file_pb_bp_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishRecord) ProtoMessage() {}

func (x *FishRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishRecord.ProtoReflect.Descriptor instead.
func (*FishRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{35}
}

func (x *FishRecord) GetFishId() int32 {
	if x != nil && x.FishId != nil {
		return *x.FishId
	}
	return 0
}

func (x *FishRecord) GetFirstFlag() bool {
	if x != nil && x.FirstFlag != nil {
		return *x.FirstFlag
	}
	return false
}

func (x *FishRecord) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *FishRecord) GetMillisecond() int64 {
	if x != nil && x.Millisecond != nil {
		return *x.Millisecond
	}
	return 0
}

func (x *FishRecord) GetResearch() int32 {
	if x != nil && x.Research != nil {
		return *x.Research
	}
	return 0
}

func (x *FishRecord) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *FishRecord) GetMinSize() int32 {
	if x != nil && x.MinSize != nil {
		return *x.MinSize
	}
	return 0
}

func (x *FishRecord) GetMinSizemillisecond() int64 {
	if x != nil && x.MinSizemillisecond != nil {
		return *x.MinSizemillisecond
	}
	return 0
}

func (x *FishRecord) GetStarCnts() map[int32]int64 {
	if x != nil {
		return x.StarCnts
	}
	return nil
}

type FishSocialData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FishRecords   map[int32]*FishRecord  `protobuf:"bytes,1,rep,name=FishRecords,proto3" json:"FishRecords,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FishSocialData) Reset() {
	*x = FishSocialData{}
	mi := &file_pb_bp_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishSocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSocialData) ProtoMessage() {}

func (x *FishSocialData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSocialData.ProtoReflect.Descriptor instead.
func (*FishSocialData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{36}
}

func (x *FishSocialData) GetFishRecords() map[int32]*FishRecord {
	if x != nil {
		return x.FishRecords
	}
	return nil
}

type CommunityData struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	CommunityId              *int64                 `protobuf:"varint,1,opt,name=CommunityId,proto3,oneof" json:"CommunityId,omitempty"`
	HomelandId               *int64                 `protobuf:"varint,2,opt,name=HomelandId,proto3,oneof" json:"HomelandId,omitempty"`
	CohabitantIds            []int64                `protobuf:"varint,3,rep,packed,name=CohabitantIds,proto3" json:"CohabitantIds,omitempty"`
	LastExitCohabitationTime *int64                 `protobuf:"varint,4,opt,name=LastExitCohabitationTime,proto3,oneof" json:"LastExitCohabitationTime,omitempty"`
	BuyCount                 *int32                 `protobuf:"varint,5,opt,name=BuyCount,proto3,oneof" json:"BuyCount,omitempty"`
	Level                    *int32                 `protobuf:"varint,6,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CommunityData) Reset() {
	*x = CommunityData{}
	mi := &file_pb_bp_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunityData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityData) ProtoMessage() {}

func (x *CommunityData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityData.ProtoReflect.Descriptor instead.
func (*CommunityData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{37}
}

func (x *CommunityData) GetCommunityId() int64 {
	if x != nil && x.CommunityId != nil {
		return *x.CommunityId
	}
	return 0
}

func (x *CommunityData) GetHomelandId() int64 {
	if x != nil && x.HomelandId != nil {
		return *x.HomelandId
	}
	return 0
}

func (x *CommunityData) GetCohabitantIds() []int64 {
	if x != nil {
		return x.CohabitantIds
	}
	return nil
}

func (x *CommunityData) GetLastExitCohabitationTime() int64 {
	if x != nil && x.LastExitCohabitationTime != nil {
		return *x.LastExitCohabitationTime
	}
	return 0
}

func (x *CommunityData) GetBuyCount() int32 {
	if x != nil && x.BuyCount != nil {
		return *x.BuyCount
	}
	return 0
}

func (x *CommunityData) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type PrivilegeData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	LaunchPlatform *LaunchPlatform        `protobuf:"varint,1,opt,name=launchPlatform,proto3,enum=LaunchPlatform,oneof" json:"launchPlatform,omitempty"`
	IsPrivilege    *bool                  `protobuf:"varint,2,opt,name=isPrivilege,proto3,oneof" json:"isPrivilege,omitempty"`
	LastUpdateTime *int64                 `protobuf:"varint,3,opt,name=lastUpdateTime,proto3,oneof" json:"lastUpdateTime,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PrivilegeData) Reset() {
	*x = PrivilegeData{}
	mi := &file_pb_bp_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivilegeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeData) ProtoMessage() {}

func (x *PrivilegeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeData.ProtoReflect.Descriptor instead.
func (*PrivilegeData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{38}
}

func (x *PrivilegeData) GetLaunchPlatform() LaunchPlatform {
	if x != nil && x.LaunchPlatform != nil {
		return *x.LaunchPlatform
	}
	return LaunchPlatform_LaunchPlatformNull
}

func (x *PrivilegeData) GetIsPrivilege() bool {
	if x != nil && x.IsPrivilege != nil {
		return *x.IsPrivilege
	}
	return false
}

func (x *PrivilegeData) GetLastUpdateTime() int64 {
	if x != nil && x.LastUpdateTime != nil {
		return *x.LastUpdateTime
	}
	return 0
}

type MasterModeDungeonData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeasonScore   *int32                 `protobuf:"varint,1,opt,name=seasonScore,proto3,oneof" json:"seasonScore,omitempty"`
	IsShow        *bool                  `protobuf:"varint,2,opt,name=isShow,proto3,oneof" json:"isShow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterModeDungeonData) Reset() {
	*x = MasterModeDungeonData{}
	mi := &file_pb_bp_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterModeDungeonData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterModeDungeonData) ProtoMessage() {}

func (x *MasterModeDungeonData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterModeDungeonData.ProtoReflect.Descriptor instead.
func (*MasterModeDungeonData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{39}
}

func (x *MasterModeDungeonData) GetSeasonScore() int32 {
	if x != nil && x.SeasonScore != nil {
		return *x.SeasonScore
	}
	return 0
}

func (x *MasterModeDungeonData) GetIsShow() bool {
	if x != nil && x.IsShow != nil {
		return *x.IsShow
	}
	return false
}

type SocialData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CharId                *int64                 `protobuf:"varint,1,opt,name=CharId,proto3,oneof" json:"CharId,omitempty"`
	AccountId             *string                `protobuf:"bytes,2,opt,name=AccountId,proto3,oneof" json:"AccountId,omitempty"`
	BasicData             *BasicData             `protobuf:"bytes,3,opt,name=BasicData,proto3,oneof" json:"BasicData,omitempty"`
	AvatarInfo            *AvatarInfo            `protobuf:"bytes,4,opt,name=AvatarInfo,proto3,oneof" json:"AvatarInfo,omitempty"`
	FaceData              *FaceData              `protobuf:"bytes,5,opt,name=FaceData,proto3,oneof" json:"FaceData,omitempty"`
	ProfessionData        *ProfessionData        `protobuf:"bytes,6,opt,name=ProfessionData,proto3,oneof" json:"ProfessionData,omitempty"`
	EquipData             *EquipData             `protobuf:"bytes,7,opt,name=EquipData,proto3,oneof" json:"EquipData,omitempty"`
	FashionData           *FashionData           `protobuf:"bytes,8,opt,name=FashionData,proto3,oneof" json:"FashionData,omitempty"`
	SettingData           *SettingData           `protobuf:"bytes,9,opt,name=SettingData,proto3,oneof" json:"SettingData,omitempty"`
	SceneData             *SceneData             `protobuf:"bytes,10,opt,name=SceneData,proto3,oneof" json:"SceneData,omitempty"`
	UserAttrData          *UserAttrData          `protobuf:"bytes,11,opt,name=UserAttrData,proto3,oneof" json:"UserAttrData,omitempty"`
	TeamData              *CharTeam              `protobuf:"bytes,12,opt,name=TeamData,proto3,oneof" json:"TeamData,omitempty"`
	UnionData             *UnionData             `protobuf:"bytes,13,opt,name=UnionData,proto3,oneof" json:"UnionData,omitempty"`
	AccountData           *AccountData           `protobuf:"bytes,14,opt,name=AccountData,proto3,oneof" json:"AccountData,omitempty"`
	FunctionData          *FunctionData          `protobuf:"bytes,15,opt,name=FunctionData,proto3,oneof" json:"FunctionData,omitempty"`
	PersonalZone          *PersonalZone          `protobuf:"bytes,16,opt,name=PersonalZone,proto3,oneof" json:"PersonalZone,omitempty"`
	Warehouse             *WarehouseData         `protobuf:"bytes,17,opt,name=Warehouse,proto3,oneof" json:"Warehouse,omitempty"`
	SeasonRank            *SeasonRankData        `protobuf:"bytes,18,opt,name=SeasonRank,proto3,oneof" json:"SeasonRank,omitempty"`
	FishData              *FishSocialData        `protobuf:"bytes,19,opt,name=FishData,proto3,oneof" json:"FishData,omitempty"`
	CommunityData         *CommunityData         `protobuf:"bytes,20,opt,name=CommunityData,proto3,oneof" json:"CommunityData,omitempty"`
	PrivilegeData         *PrivilegeData         `protobuf:"bytes,21,opt,name=PrivilegeData,proto3,oneof" json:"PrivilegeData,omitempty"`
	MasterModeDungeonData *MasterModeDungeonData `protobuf:"bytes,22,opt,name=MasterModeDungeonData,proto3,oneof" json:"MasterModeDungeonData,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SocialData) Reset() {
	*x = SocialData{}
	mi := &file_pb_bp_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SocialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocialData) ProtoMessage() {}

func (x *SocialData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocialData.ProtoReflect.Descriptor instead.
func (*SocialData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{40}
}

func (x *SocialData) GetCharId() int64 {
	if x != nil && x.CharId != nil {
		return *x.CharId
	}
	return 0
}

func (x *SocialData) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *SocialData) GetBasicData() *BasicData {
	if x != nil {
		return x.BasicData
	}
	return nil
}

func (x *SocialData) GetAvatarInfo() *AvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

func (x *SocialData) GetFaceData() *FaceData {
	if x != nil {
		return x.FaceData
	}
	return nil
}

func (x *SocialData) GetProfessionData() *ProfessionData {
	if x != nil {
		return x.ProfessionData
	}
	return nil
}

func (x *SocialData) GetEquipData() *EquipData {
	if x != nil {
		return x.EquipData
	}
	return nil
}

func (x *SocialData) GetFashionData() *FashionData {
	if x != nil {
		return x.FashionData
	}
	return nil
}

func (x *SocialData) GetSettingData() *SettingData {
	if x != nil {
		return x.SettingData
	}
	return nil
}

func (x *SocialData) GetSceneData() *SceneData {
	if x != nil {
		return x.SceneData
	}
	return nil
}

func (x *SocialData) GetUserAttrData() *UserAttrData {
	if x != nil {
		return x.UserAttrData
	}
	return nil
}

func (x *SocialData) GetTeamData() *CharTeam {
	if x != nil {
		return x.TeamData
	}
	return nil
}

func (x *SocialData) GetUnionData() *UnionData {
	if x != nil {
		return x.UnionData
	}
	return nil
}

func (x *SocialData) GetAccountData() *AccountData {
	if x != nil {
		return x.AccountData
	}
	return nil
}

func (x *SocialData) GetFunctionData() *FunctionData {
	if x != nil {
		return x.FunctionData
	}
	return nil
}

func (x *SocialData) GetPersonalZone() *PersonalZone {
	if x != nil {
		return x.PersonalZone
	}
	return nil
}

func (x *SocialData) GetWarehouse() *WarehouseData {
	if x != nil {
		return x.Warehouse
	}
	return nil
}

func (x *SocialData) GetSeasonRank() *SeasonRankData {
	if x != nil {
		return x.SeasonRank
	}
	return nil
}

func (x *SocialData) GetFishData() *FishSocialData {
	if x != nil {
		return x.FishData
	}
	return nil
}

func (x *SocialData) GetCommunityData() *CommunityData {
	if x != nil {
		return x.CommunityData
	}
	return nil
}

func (x *SocialData) GetPrivilegeData() *PrivilegeData {
	if x != nil {
		return x.PrivilegeData
	}
	return nil
}

func (x *SocialData) GetMasterModeDungeonData() *MasterModeDungeonData {
	if x != nil {
		return x.MasterModeDungeonData
	}
	return nil
}

type GetSocialDataReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mask          *int64                 `protobuf:"varint,1,opt,name=Mask,proto3,oneof" json:"Mask,omitempty"`
	Data          *SocialData            `protobuf:"bytes,2,opt,name=Data,proto3,oneof" json:"Data,omitempty"`
	ErrCode       *uint32                `protobuf:"varint,3,opt,name=ErrCode,proto3,oneof" json:"ErrCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSocialDataReply) Reset() {
	*x = GetSocialDataReply{}
	mi := &file_pb_bp_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSocialDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSocialDataReply) ProtoMessage() {}

func (x *GetSocialDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSocialDataReply.ProtoReflect.Descriptor instead.
func (*GetSocialDataReply) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{41}
}

func (x *GetSocialDataReply) GetMask() int64 {
	if x != nil && x.Mask != nil {
		return *x.Mask
	}
	return 0
}

func (x *GetSocialDataReply) GetData() *SocialData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetSocialDataReply) GetErrCode() uint32 {
	if x != nil && x.ErrCode != nil {
		return *x.ErrCode
	}
	return 0
}

type ReturnMessageWrapper struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *GetSocialDataReply    `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReturnMessageWrapper) Reset() {
	*x = ReturnMessageWrapper{}
	mi := &file_pb_bp_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReturnMessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnMessageWrapper) ProtoMessage() {}

func (x *ReturnMessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnMessageWrapper.ProtoReflect.Descriptor instead.
func (*ReturnMessageWrapper) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{42}
}

func (x *ReturnMessageWrapper) GetMessage() *GetSocialDataReply {
	if x != nil {
		return x.Message
	}
	return nil
}

type ScenePointInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Position      *Position              `protobuf:"bytes,1,opt,name=Position,proto3,oneof" json:"Position,omitempty"`
	CameraId      *int32                 `protobuf:"varint,2,opt,name=CameraId,proto3,oneof" json:"CameraId,omitempty"`
	SceneAreaId   *int32                 `protobuf:"varint,3,opt,name=SceneAreaId,proto3,oneof" json:"SceneAreaId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScenePointInfo) Reset() {
	*x = ScenePointInfo{}
	mi := &file_pb_bp_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenePointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePointInfo) ProtoMessage() {}

func (x *ScenePointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePointInfo.ProtoReflect.Descriptor instead.
func (*ScenePointInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{43}
}

func (x *ScenePointInfo) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ScenePointInfo) GetCameraId() int32 {
	if x != nil && x.CameraId != nil {
		return *x.CameraId
	}
	return 0
}

func (x *ScenePointInfo) GetSceneAreaId() int32 {
	if x != nil && x.SceneAreaId != nil {
		return *x.SceneAreaId
	}
	return 0
}

type ScenePosIdInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ScenePosId    *int32                 `protobuf:"varint,1,opt,name=ScenePosId,proto3,oneof" json:"ScenePosId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ScenePosIdInfo) Reset() {
	*x = ScenePosIdInfo{}
	mi := &file_pb_bp_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenePosIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePosIdInfo) ProtoMessage() {}

func (x *ScenePosIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePosIdInfo.ProtoReflect.Descriptor instead.
func (*ScenePosIdInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{44}
}

func (x *ScenePosIdInfo) GetScenePosId() int32 {
	if x != nil && x.ScenePosId != nil {
		return *x.ScenePosId
	}
	return 0
}

type CutScenePointInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CutSceneId    *int32                 `protobuf:"varint,1,opt,name=CutSceneId,proto3,oneof" json:"CutSceneId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CutScenePointInfo) Reset() {
	*x = CutScenePointInfo{}
	mi := &file_pb_bp_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CutScenePointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutScenePointInfo) ProtoMessage() {}

func (x *CutScenePointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutScenePointInfo.ProtoReflect.Descriptor instead.
func (*CutScenePointInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{45}
}

func (x *CutScenePointInfo) GetCutSceneId() int32 {
	if x != nil && x.CutSceneId != nil {
		return *x.CutSceneId
	}
	return 0
}

type SceneLineData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LineId        *uint32                `protobuf:"varint,1,opt,name=LineId,proto3,oneof" json:"LineId,omitempty"`
	Status        *ESceneLineStatus      `protobuf:"varint,2,opt,name=Status,proto3,enum=ESceneLineStatus,oneof" json:"Status,omitempty"`
	SceneGuid     *string                `protobuf:"bytes,3,opt,name=SceneGuid,proto3,oneof" json:"SceneGuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneLineData) Reset() {
	*x = SceneLineData{}
	mi := &file_pb_bp_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneLineData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneLineData) ProtoMessage() {}

func (x *SceneLineData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneLineData.ProtoReflect.Descriptor instead.
func (*SceneLineData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{46}
}

func (x *SceneLineData) GetLineId() uint32 {
	if x != nil && x.LineId != nil {
		return *x.LineId
	}
	return 0
}

func (x *SceneLineData) GetStatus() ESceneLineStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ESceneLineStatus_SceneLineStatusNone
}

func (x *SceneLineData) GetSceneGuid() string {
	if x != nil && x.SceneGuid != nil {
		return *x.SceneGuid
	}
	return ""
}

type PositionParam struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ScenePointInfo    *ScenePointInfo        `protobuf:"bytes,1,opt,name=ScenePointInfo,proto3,oneof" json:"ScenePointInfo,omitempty"`
	ScenePosInfo      *ScenePosIdInfo        `protobuf:"bytes,2,opt,name=ScenePosInfo,proto3,oneof" json:"ScenePosInfo,omitempty"`
	CutScenePointInfo *CutScenePointInfo     `protobuf:"bytes,3,opt,name=CutScenePointInfo,proto3,oneof" json:"CutScenePointInfo,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PositionParam) Reset() {
	*x = PositionParam{}
	mi := &file_pb_bp_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PositionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionParam) ProtoMessage() {}

func (x *PositionParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionParam.ProtoReflect.Descriptor instead.
func (*PositionParam) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{47}
}

func (x *PositionParam) GetScenePointInfo() *ScenePointInfo {
	if x != nil {
		return x.ScenePointInfo
	}
	return nil
}

func (x *PositionParam) GetScenePosInfo() *ScenePosIdInfo {
	if x != nil {
		return x.ScenePosInfo
	}
	return nil
}

func (x *PositionParam) GetCutScenePointInfo() *CutScenePointInfo {
	if x != nil {
		return x.CutScenePointInfo
	}
	return nil
}

type TransferParam struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SceneId             *int32                 `protobuf:"varint,1,opt,name=SceneId,proto3,oneof" json:"SceneId,omitempty"`
	TransferType        *EUserTransferType     `protobuf:"varint,2,opt,name=TransferType,proto3,enum=EUserTransferType,oneof" json:"TransferType,omitempty"`
	PositionParam       *PositionParam         `protobuf:"bytes,3,opt,name=PositionParam,proto3,oneof" json:"PositionParam,omitempty"`
	ChangeFlag          *int64                 `protobuf:"varint,4,opt,name=ChangeFlag,proto3,oneof" json:"ChangeFlag,omitempty"`
	IsServerSwitch      *bool                  `protobuf:"varint,5,opt,name=IsServerSwitch,proto3,oneof" json:"IsServerSwitch,omitempty"`
	VisualLayerConfigId *int32                 `protobuf:"varint,6,opt,name=VisualLayerConfigId,proto3,oneof" json:"VisualLayerConfigId,omitempty"`
	SceneGuid           *string                `protobuf:"bytes,7,opt,name=SceneGuid,proto3,oneof" json:"SceneGuid,omitempty"`
	ConnectGuid         *string                `protobuf:"bytes,8,opt,name=ConnectGuid,proto3,oneof" json:"ConnectGuid,omitempty"`
	SubSceneUuid        *int64                 `protobuf:"varint,9,opt,name=SubSceneUuid,proto3,oneof" json:"SubSceneUuid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TransferParam) Reset() {
	*x = TransferParam{}
	mi := &file_pb_bp_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferParam) ProtoMessage() {}

func (x *TransferParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferParam.ProtoReflect.Descriptor instead.
func (*TransferParam) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{48}
}

func (x *TransferParam) GetSceneId() int32 {
	if x != nil && x.SceneId != nil {
		return *x.SceneId
	}
	return 0
}

func (x *TransferParam) GetTransferType() EUserTransferType {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return EUserTransferType_EUserTransferTypeDefault
}

func (x *TransferParam) GetPositionParam() *PositionParam {
	if x != nil {
		return x.PositionParam
	}
	return nil
}

func (x *TransferParam) GetChangeFlag() int64 {
	if x != nil && x.ChangeFlag != nil {
		return *x.ChangeFlag
	}
	return 0
}

func (x *TransferParam) GetIsServerSwitch() bool {
	if x != nil && x.IsServerSwitch != nil {
		return *x.IsServerSwitch
	}
	return false
}

func (x *TransferParam) GetVisualLayerConfigId() int32 {
	if x != nil && x.VisualLayerConfigId != nil {
		return *x.VisualLayerConfigId
	}
	return 0
}

func (x *TransferParam) GetSceneGuid() string {
	if x != nil && x.SceneGuid != nil {
		return *x.SceneGuid
	}
	return ""
}

func (x *TransferParam) GetConnectGuid() string {
	if x != nil && x.ConnectGuid != nil {
		return *x.ConnectGuid
	}
	return ""
}

func (x *TransferParam) GetSubSceneUuid() int64 {
	if x != nil && x.SubSceneUuid != nil {
		return *x.SubSceneUuid
	}
	return 0
}

type NotifyEnterWorldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountId     *string                `protobuf:"bytes,1,opt,name=AccountId,proto3,oneof" json:"AccountId,omitempty"`
	Token         *string                `protobuf:"bytes,2,opt,name=Token,proto3,oneof" json:"Token,omitempty"`
	SceneIp       *string                `protobuf:"bytes,3,opt,name=SceneIp,proto3,oneof" json:"SceneIp,omitempty"`
	ScenePort     *int32                 `protobuf:"varint,4,opt,name=ScenePort,proto3,oneof" json:"ScenePort,omitempty"`
	Transform     *TransferParam         `protobuf:"bytes,5,opt,name=Transform,proto3,oneof" json:"Transform,omitempty"`
	SceneLineData *SceneLineData         `protobuf:"bytes,6,opt,name=SceneLineData,proto3,oneof" json:"SceneLineData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyEnterWorldRequest) Reset() {
	*x = NotifyEnterWorldRequest{}
	mi := &file_pb_bp_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyEnterWorldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEnterWorldRequest) ProtoMessage() {}

func (x *NotifyEnterWorldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEnterWorldRequest.ProtoReflect.Descriptor instead.
func (*NotifyEnterWorldRequest) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{49}
}

func (x *NotifyEnterWorldRequest) GetAccountId() string {
	if x != nil && x.AccountId != nil {
		return *x.AccountId
	}
	return ""
}

func (x *NotifyEnterWorldRequest) GetToken() string {
	if x != nil && x.Token != nil {
		return *x.Token
	}
	return ""
}

func (x *NotifyEnterWorldRequest) GetSceneIp() string {
	if x != nil && x.SceneIp != nil {
		return *x.SceneIp
	}
	return ""
}

func (x *NotifyEnterWorldRequest) GetScenePort() int32 {
	if x != nil && x.ScenePort != nil {
		return *x.ScenePort
	}
	return 0
}

func (x *NotifyEnterWorldRequest) GetTransform() *TransferParam {
	if x != nil {
		return x.Transform
	}
	return nil
}

func (x *NotifyEnterWorldRequest) GetSceneLineData() *SceneLineData {
	if x != nil {
		return x.SceneLineData
	}
	return nil
}

type NotifyEnterWorld struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	VRequest      *NotifyEnterWorldRequest `protobuf:"bytes,1,opt,name=VRequest,proto3" json:"VRequest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyEnterWorld) Reset() {
	*x = NotifyEnterWorld{}
	mi := &file_pb_bp_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyEnterWorld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyEnterWorld) ProtoMessage() {}

func (x *NotifyEnterWorld) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyEnterWorld.ProtoReflect.Descriptor instead.
func (*NotifyEnterWorld) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{50}
}

func (x *NotifyEnterWorld) GetVRequest() *NotifyEnterWorldRequest {
	if x != nil {
		return x.VRequest
	}
	return nil
}

type Attr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	RawData       []byte                 `protobuf:"bytes,2,opt,name=RawData,proto3,oneof" json:"RawData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Attr) Reset() {
	*x = Attr{}
	mi := &file_pb_bp_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Attr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attr) ProtoMessage() {}

func (x *Attr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attr.ProtoReflect.Descriptor instead.
func (*Attr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{51}
}

func (x *Attr) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Attr) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type MapAttrValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsRemove      *bool                  `protobuf:"varint,1,opt,name=IsRemove,proto3,oneof" json:"IsRemove,omitempty"`
	Key           []byte                 `protobuf:"bytes,2,opt,name=Key,proto3,oneof" json:"Key,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=Value,proto3,oneof" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapAttrValue) Reset() {
	*x = MapAttrValue{}
	mi := &file_pb_bp_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapAttrValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAttrValue) ProtoMessage() {}

func (x *MapAttrValue) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAttrValue.ProtoReflect.Descriptor instead.
func (*MapAttrValue) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{52}
}

func (x *MapAttrValue) GetIsRemove() bool {
	if x != nil && x.IsRemove != nil {
		return *x.IsRemove
	}
	return false
}

func (x *MapAttrValue) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapAttrValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type MapAttr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsClear       *bool                  `protobuf:"varint,1,opt,name=IsClear,proto3,oneof" json:"IsClear,omitempty"`
	Id            *int32                 `protobuf:"varint,2,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	Attrs         []*MapAttrValue        `protobuf:"bytes,3,rep,name=Attrs,proto3" json:"Attrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapAttr) Reset() {
	*x = MapAttr{}
	mi := &file_pb_bp_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAttr) ProtoMessage() {}

func (x *MapAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAttr.ProtoReflect.Descriptor instead.
func (*MapAttr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{53}
}

func (x *MapAttr) GetIsClear() bool {
	if x != nil && x.IsClear != nil {
		return *x.IsClear
	}
	return false
}

func (x *MapAttr) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *MapAttr) GetAttrs() []*MapAttrValue {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type AttrCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	Attrs         []*Attr                `protobuf:"bytes,2,rep,name=Attrs,proto3" json:"Attrs,omitempty"`
	MapAttrs      []*MapAttr             `protobuf:"bytes,3,rep,name=MapAttrs,proto3" json:"MapAttrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttrCollection) Reset() {
	*x = AttrCollection{}
	mi := &file_pb_bp_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttrCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttrCollection) ProtoMessage() {}

func (x *AttrCollection) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttrCollection.ProtoReflect.Descriptor instead.
func (*AttrCollection) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{54}
}

func (x *AttrCollection) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *AttrCollection) GetAttrs() []*Attr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *AttrCollection) GetMapAttrs() []*MapAttr {
	if x != nil {
		return x.MapAttrs
	}
	return nil
}

type TempAttr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int32                 `protobuf:"varint,1,opt,name=Id,proto3,oneof" json:"Id,omitempty"`
	Value         *int32                 `protobuf:"varint,2,opt,name=Value,proto3,oneof" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TempAttr) Reset() {
	*x = TempAttr{}
	mi := &file_pb_bp_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempAttr) ProtoMessage() {}

func (x *TempAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempAttr.ProtoReflect.Descriptor instead.
func (*TempAttr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{55}
}

func (x *TempAttr) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TempAttr) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type TempAttrCollection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attrs         []*TempAttr            `protobuf:"bytes,1,rep,name=Attrs,proto3" json:"Attrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TempAttrCollection) Reset() {
	*x = TempAttrCollection{}
	mi := &file_pb_bp_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TempAttrCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempAttrCollection) ProtoMessage() {}

func (x *TempAttrCollection) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempAttrCollection.ProtoReflect.Descriptor instead.
func (*TempAttrCollection) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{56}
}

func (x *TempAttrCollection) GetAttrs() []*TempAttr {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type EventData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     *int32                 `protobuf:"varint,1,opt,name=EventType,proto3,oneof" json:"EventType,omitempty"`
	IntParams     []int32                `protobuf:"varint,2,rep,packed,name=IntParams,proto3" json:"IntParams,omitempty"`
	LongParams    []int64                `protobuf:"varint,3,rep,packed,name=LongParams,proto3" json:"LongParams,omitempty"`
	FloatParams   []float32              `protobuf:"fixed32,4,rep,packed,name=FloatParams,proto3" json:"FloatParams,omitempty"`
	StrParams     []string               `protobuf:"bytes,5,rep,name=StrParams,proto3" json:"StrParams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventData) Reset() {
	*x = EventData{}
	mi := &file_pb_bp_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{57}
}

func (x *EventData) GetEventType() int32 {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return 0
}

func (x *EventData) GetIntParams() []int32 {
	if x != nil {
		return x.IntParams
	}
	return nil
}

func (x *EventData) GetLongParams() []int64 {
	if x != nil {
		return x.LongParams
	}
	return nil
}

func (x *EventData) GetFloatParams() []float32 {
	if x != nil {
		return x.FloatParams
	}
	return nil
}

func (x *EventData) GetStrParams() []string {
	if x != nil {
		return x.StrParams
	}
	return nil
}

type EventDataList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	Events        []*EventData           `protobuf:"bytes,2,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventDataList) Reset() {
	*x = EventDataList{}
	mi := &file_pb_bp_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDataList) ProtoMessage() {}

func (x *EventDataList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDataList.ProtoReflect.Descriptor instead.
func (*EventDataList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{58}
}

func (x *EventDataList) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *EventDataList) GetEvents() []*EventData {
	if x != nil {
		return x.Events
	}
	return nil
}

type BulletEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	EnterStageId  *int32                 `protobuf:"varint,2,opt,name=EnterStageId,proto3,oneof" json:"EnterStageId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BulletEvent) Reset() {
	*x = BulletEvent{}
	mi := &file_pb_bp_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BulletEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulletEvent) ProtoMessage() {}

func (x *BulletEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulletEvent.ProtoReflect.Descriptor instead.
func (*BulletEvent) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{59}
}

func (x *BulletEvent) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *BulletEvent) GetEnterStageId() int32 {
	if x != nil && x.EnterStageId != nil {
		return *x.EnterStageId
	}
	return 0
}

type ActorBodyPartInfos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	Infos         []*ActorBodyPartInfo   `protobuf:"bytes,2,rep,name=Infos,proto3" json:"Infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActorBodyPartInfos) Reset() {
	*x = ActorBodyPartInfos{}
	mi := &file_pb_bp_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorBodyPartInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorBodyPartInfos) ProtoMessage() {}

func (x *ActorBodyPartInfos) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorBodyPartInfos.ProtoReflect.Descriptor instead.
func (*ActorBodyPartInfos) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{60}
}

func (x *ActorBodyPartInfos) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *ActorBodyPartInfos) GetInfos() []*ActorBodyPartInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ActorBodyPartInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartId        *int32                 `protobuf:"varint,1,opt,name=PartId,proto3,oneof" json:"PartId,omitempty"`
	Hp            *uint64                `protobuf:"varint,2,opt,name=Hp,proto3,oneof" json:"Hp,omitempty"`
	MaxHp         *uint64                `protobuf:"varint,3,opt,name=MaxHp,proto3,oneof" json:"MaxHp,omitempty"`
	State         *BodyPartState         `protobuf:"varint,4,opt,name=State,proto3,enum=BodyPartState,oneof" json:"State,omitempty"`
	FleshyId      *int32                 `protobuf:"varint,5,opt,name=FleshyId,proto3,oneof" json:"FleshyId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActorBodyPartInfo) Reset() {
	*x = ActorBodyPartInfo{}
	mi := &file_pb_bp_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActorBodyPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActorBodyPartInfo) ProtoMessage() {}

func (x *ActorBodyPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActorBodyPartInfo.ProtoReflect.Descriptor instead.
func (*ActorBodyPartInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{61}
}

func (x *ActorBodyPartInfo) GetPartId() int32 {
	if x != nil && x.PartId != nil {
		return *x.PartId
	}
	return 0
}

func (x *ActorBodyPartInfo) GetHp() uint64 {
	if x != nil && x.Hp != nil {
		return *x.Hp
	}
	return 0
}

func (x *ActorBodyPartInfo) GetMaxHp() uint64 {
	if x != nil && x.MaxHp != nil {
		return *x.MaxHp
	}
	return 0
}

func (x *ActorBodyPartInfo) GetState() BodyPartState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return BodyPartState_BodyPartStateDefault
}

func (x *ActorBodyPartInfo) GetFleshyId() int32 {
	if x != nil && x.FleshyId != nil {
		return *x.FleshyId
	}
	return 0
}

type PassiveSkillInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uuid           *int32                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	TargetUuid     *int64                 `protobuf:"varint,2,opt,name=TargetUuid,proto3,oneof" json:"TargetUuid,omitempty"`
	StageBeginTime *int64                 `protobuf:"varint,3,opt,name=StageBeginTime,proto3,oneof" json:"StageBeginTime,omitempty"`
	BeginTime      *int64                 `protobuf:"varint,4,opt,name=BeginTime,proto3,oneof" json:"BeginTime,omitempty"`
	StagePlayNum   *int32                 `protobuf:"varint,5,opt,name=StagePlayNum,proto3,oneof" json:"StagePlayNum,omitempty"`
	SkillId        *int32                 `protobuf:"varint,6,opt,name=SkillId,proto3,oneof" json:"SkillId,omitempty"`
	SkillLevel     *int32                 `protobuf:"varint,7,opt,name=SkillLevel,proto3,oneof" json:"SkillLevel,omitempty"`
	SkillStage     *int32                 `protobuf:"varint,8,opt,name=SkillStage,proto3,oneof" json:"SkillStage,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PassiveSkillInfo) Reset() {
	*x = PassiveSkillInfo{}
	mi := &file_pb_bp_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassiveSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassiveSkillInfo) ProtoMessage() {}

func (x *PassiveSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassiveSkillInfo.ProtoReflect.Descriptor instead.
func (*PassiveSkillInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{62}
}

func (x *PassiveSkillInfo) GetUuid() int32 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *PassiveSkillInfo) GetTargetUuid() int64 {
	if x != nil && x.TargetUuid != nil {
		return *x.TargetUuid
	}
	return 0
}

func (x *PassiveSkillInfo) GetStageBeginTime() int64 {
	if x != nil && x.StageBeginTime != nil {
		return *x.StageBeginTime
	}
	return 0
}

func (x *PassiveSkillInfo) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *PassiveSkillInfo) GetStagePlayNum() int32 {
	if x != nil && x.StagePlayNum != nil {
		return *x.StagePlayNum
	}
	return 0
}

func (x *PassiveSkillInfo) GetSkillId() int32 {
	if x != nil && x.SkillId != nil {
		return *x.SkillId
	}
	return 0
}

func (x *PassiveSkillInfo) GetSkillLevel() int32 {
	if x != nil && x.SkillLevel != nil {
		return *x.SkillLevel
	}
	return 0
}

func (x *PassiveSkillInfo) GetSkillStage() int32 {
	if x != nil && x.SkillStage != nil {
		return *x.SkillStage
	}
	return 0
}

type SeqPassiveSkillInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActorUuid     *int64                 `protobuf:"varint,1,opt,name=ActorUuid,proto3,oneof" json:"ActorUuid,omitempty"`
	PassiveInfos  []*PassiveSkillInfo    `protobuf:"bytes,2,rep,name=PassiveInfos,proto3" json:"PassiveInfos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeqPassiveSkillInfo) Reset() {
	*x = SeqPassiveSkillInfo{}
	mi := &file_pb_bp_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeqPassiveSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeqPassiveSkillInfo) ProtoMessage() {}

func (x *SeqPassiveSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeqPassiveSkillInfo.ProtoReflect.Descriptor instead.
func (*SeqPassiveSkillInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{63}
}

func (x *SeqPassiveSkillInfo) GetActorUuid() int64 {
	if x != nil && x.ActorUuid != nil {
		return *x.ActorUuid
	}
	return 0
}

func (x *SeqPassiveSkillInfo) GetPassiveInfos() []*PassiveSkillInfo {
	if x != nil {
		return x.PassiveInfos
	}
	return nil
}

type SeqPassiveSkillEndInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActorUuid     *int64                 `protobuf:"varint,1,opt,name=ActorUuid,proto3,oneof" json:"ActorUuid,omitempty"`
	Uuids         []int64                `protobuf:"varint,2,rep,packed,name=Uuids,proto3" json:"Uuids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeqPassiveSkillEndInfo) Reset() {
	*x = SeqPassiveSkillEndInfo{}
	mi := &file_pb_bp_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeqPassiveSkillEndInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeqPassiveSkillEndInfo) ProtoMessage() {}

func (x *SeqPassiveSkillEndInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeqPassiveSkillEndInfo.ProtoReflect.Descriptor instead.
func (*SeqPassiveSkillEndInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{64}
}

func (x *SeqPassiveSkillEndInfo) GetActorUuid() int64 {
	if x != nil && x.ActorUuid != nil {
		return *x.ActorUuid
	}
	return 0
}

func (x *SeqPassiveSkillEndInfo) GetUuids() []int64 {
	if x != nil {
		return x.Uuids
	}
	return nil
}

type BuffInfoSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	BuffInfos     []*BuffInfo            `protobuf:"bytes,2,rep,name=BuffInfos,proto3" json:"BuffInfos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuffInfoSync) Reset() {
	*x = BuffInfoSync{}
	mi := &file_pb_bp_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffInfoSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfoSync) ProtoMessage() {}

func (x *BuffInfoSync) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfoSync.ProtoReflect.Descriptor instead.
func (*BuffInfoSync) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{65}
}

func (x *BuffInfoSync) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *BuffInfoSync) GetBuffInfos() []*BuffInfo {
	if x != nil {
		return x.BuffInfos
	}
	return nil
}

type BuffInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BuffUuid        *int32                 `protobuf:"varint,1,opt,name=BuffUuid,proto3,oneof" json:"BuffUuid,omitempty"`
	BaseId          *int32                 `protobuf:"varint,2,opt,name=BaseId,proto3,oneof" json:"BaseId,omitempty"`
	Level           *int32                 `protobuf:"varint,3,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
	HostUuid        *int64                 `protobuf:"varint,4,opt,name=HostUuid,proto3,oneof" json:"HostUuid,omitempty"`
	TableUuid       *int32                 `protobuf:"varint,5,opt,name=TableUuid,proto3,oneof" json:"TableUuid,omitempty"`
	CreateTime      *int64                 `protobuf:"varint,6,opt,name=CreateTime,proto3,oneof" json:"CreateTime,omitempty"`
	FireUuid        *int64                 `protobuf:"varint,7,opt,name=FireUuid,proto3,oneof" json:"FireUuid,omitempty"`
	Layer           *int32                 `protobuf:"varint,8,opt,name=Layer,proto3,oneof" json:"Layer,omitempty"`
	PartId          *int32                 `protobuf:"varint,9,opt,name=PartId,proto3,oneof" json:"PartId,omitempty"`
	Count           *int32                 `protobuf:"varint,10,opt,name=Count,proto3,oneof" json:"Count,omitempty"`
	Duration        *int32                 `protobuf:"varint,11,opt,name=Duration,proto3,oneof" json:"Duration,omitempty"`
	FightSourceInfo *FightSourceInfo       `protobuf:"bytes,12,opt,name=FightSourceInfo,proto3,oneof" json:"FightSourceInfo,omitempty"`
	LogicEffect     *BuffEffectLogicInfo   `protobuf:"bytes,13,opt,name=LogicEffect,proto3,oneof" json:"LogicEffect,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BuffInfo) Reset() {
	*x = BuffInfo{}
	mi := &file_pb_bp_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffInfo) ProtoMessage() {}

func (x *BuffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffInfo.ProtoReflect.Descriptor instead.
func (*BuffInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{66}
}

func (x *BuffInfo) GetBuffUuid() int32 {
	if x != nil && x.BuffUuid != nil {
		return *x.BuffUuid
	}
	return 0
}

func (x *BuffInfo) GetBaseId() int32 {
	if x != nil && x.BaseId != nil {
		return *x.BaseId
	}
	return 0
}

func (x *BuffInfo) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *BuffInfo) GetHostUuid() int64 {
	if x != nil && x.HostUuid != nil {
		return *x.HostUuid
	}
	return 0
}

func (x *BuffInfo) GetTableUuid() int32 {
	if x != nil && x.TableUuid != nil {
		return *x.TableUuid
	}
	return 0
}

func (x *BuffInfo) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *BuffInfo) GetFireUuid() int64 {
	if x != nil && x.FireUuid != nil {
		return *x.FireUuid
	}
	return 0
}

func (x *BuffInfo) GetLayer() int32 {
	if x != nil && x.Layer != nil {
		return *x.Layer
	}
	return 0
}

func (x *BuffInfo) GetPartId() int32 {
	if x != nil && x.PartId != nil {
		return *x.PartId
	}
	return 0
}

func (x *BuffInfo) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *BuffInfo) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *BuffInfo) GetFightSourceInfo() *FightSourceInfo {
	if x != nil {
		return x.FightSourceInfo
	}
	return nil
}

func (x *BuffInfo) GetLogicEffect() *BuffEffectLogicInfo {
	if x != nil {
		return x.LogicEffect
	}
	return nil
}

type FightSourceInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FightSourceType *int32                 `protobuf:"varint,1,opt,name=FightSourceType,proto3,oneof" json:"FightSourceType,omitempty"`
	SourceConfigId  *int32                 `protobuf:"varint,2,opt,name=SourceConfigId,proto3,oneof" json:"SourceConfigId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FightSourceInfo) Reset() {
	*x = FightSourceInfo{}
	mi := &file_pb_bp_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FightSourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightSourceInfo) ProtoMessage() {}

func (x *FightSourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightSourceInfo.ProtoReflect.Descriptor instead.
func (*FightSourceInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{67}
}

func (x *FightSourceInfo) GetFightSourceType() int32 {
	if x != nil && x.FightSourceType != nil {
		return *x.FightSourceType
	}
	return 0
}

func (x *FightSourceInfo) GetSourceConfigId() int32 {
	if x != nil && x.SourceConfigId != nil {
		return *x.SourceConfigId
	}
	return 0
}

type BuffEffectLogicInfo struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	EffectType    *EBuffEffectLogicPbType `protobuf:"varint,1,opt,name=EffectType,proto3,enum=EBuffEffectLogicPbType,oneof" json:"EffectType,omitempty"`
	RawData       []byte                  `protobuf:"bytes,2,opt,name=RawData,proto3,oneof" json:"RawData,omitempty"`
	IsLoop        *bool                   `protobuf:"varint,3,opt,name=IsLoop,proto3,oneof" json:"IsLoop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuffEffectLogicInfo) Reset() {
	*x = BuffEffectLogicInfo{}
	mi := &file_pb_bp_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffEffectLogicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffEffectLogicInfo) ProtoMessage() {}

func (x *BuffEffectLogicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffEffectLogicInfo.ProtoReflect.Descriptor instead.
func (*BuffEffectLogicInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{68}
}

func (x *BuffEffectLogicInfo) GetEffectType() EBuffEffectLogicPbType {
	if x != nil && x.EffectType != nil {
		return *x.EffectType
	}
	return EBuffEffectLogicPbType_PlayEffect
}

func (x *BuffEffectLogicInfo) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *BuffEffectLogicInfo) GetIsLoop() bool {
	if x != nil && x.IsLoop != nil {
		return *x.IsLoop
	}
	return false
}

type ClientHitPartInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartId        *int32                 `protobuf:"varint,1,opt,name=PartId,proto3,oneof" json:"PartId,omitempty"`
	DamagePos     *Vector3               `protobuf:"bytes,2,opt,name=DamagePos,proto3,oneof" json:"DamagePos,omitempty"`
	DamageVal     *int64                 `protobuf:"varint,3,opt,name=DamageVal,proto3,oneof" json:"DamageVal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientHitPartInfo) Reset() {
	*x = ClientHitPartInfo{}
	mi := &file_pb_bp_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientHitPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHitPartInfo) ProtoMessage() {}

func (x *ClientHitPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHitPartInfo.ProtoReflect.Descriptor instead.
func (*ClientHitPartInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{69}
}

func (x *ClientHitPartInfo) GetPartId() int32 {
	if x != nil && x.PartId != nil {
		return *x.PartId
	}
	return 0
}

func (x *ClientHitPartInfo) GetDamagePos() *Vector3 {
	if x != nil {
		return x.DamagePos
	}
	return nil
}

func (x *ClientHitPartInfo) GetDamageVal() int64 {
	if x != nil && x.DamageVal != nil {
		return *x.DamageVal
	}
	return 0
}

type SyncDamageInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DamageSource      *EDamageSource         `protobuf:"varint,1,opt,name=DamageSource,proto3,enum=EDamageSource,oneof" json:"DamageSource,omitempty"`
	IsMiss            *bool                  `protobuf:"varint,2,opt,name=IsMiss,proto3,oneof" json:"IsMiss,omitempty"`
	IsCrit            *bool                  `protobuf:"varint,3,opt,name=IsCrit,proto3,oneof" json:"IsCrit,omitempty"`
	Type              *EDamageType           `protobuf:"varint,4,opt,name=Type,proto3,enum=EDamageType,oneof" json:"Type,omitempty"`
	TypeFlag          *int32                 `protobuf:"varint,5,opt,name=TypeFlag,proto3,oneof" json:"TypeFlag,omitempty"`
	Value             *int64                 `protobuf:"varint,6,opt,name=Value,proto3,oneof" json:"Value,omitempty"`
	ActualValue       *int64                 `protobuf:"varint,7,opt,name=ActualValue,proto3,oneof" json:"ActualValue,omitempty"`
	LuckyValue        *int64                 `protobuf:"varint,8,opt,name=LuckyValue,proto3,oneof" json:"LuckyValue,omitempty"`
	HpLessenValue     *int64                 `protobuf:"varint,9,opt,name=HpLessenValue,proto3,oneof" json:"HpLessenValue,omitempty"`
	ShieldLessenValue *int64                 `protobuf:"varint,10,opt,name=ShieldLessenValue,proto3,oneof" json:"ShieldLessenValue,omitempty"`
	AttackerUuid      *int64                 `protobuf:"varint,11,opt,name=AttackerUuid,proto3,oneof" json:"AttackerUuid,omitempty"`
	OwnerId           *int32                 `protobuf:"varint,12,opt,name=OwnerId,proto3,oneof" json:"OwnerId,omitempty"`
	OwnerLevel        *int32                 `protobuf:"varint,13,opt,name=OwnerLevel,proto3,oneof" json:"OwnerLevel,omitempty"`
	OwnerStage        *int32                 `protobuf:"varint,14,opt,name=OwnerStage,proto3,oneof" json:"OwnerStage,omitempty"`
	HitEventId        *int32                 `protobuf:"varint,15,opt,name=HitEventId,proto3,oneof" json:"HitEventId,omitempty"`
	IsNormal          *bool                  `protobuf:"varint,16,opt,name=IsNormal,proto3,oneof" json:"IsNormal,omitempty"`
	IsDead            *bool                  `protobuf:"varint,17,opt,name=IsDead,proto3,oneof" json:"IsDead,omitempty"`
	Property          *EDamageProperty       `protobuf:"varint,18,opt,name=Property,proto3,enum=EDamageProperty,oneof" json:"Property,omitempty"`
	DamagePos         *Vector3               `protobuf:"bytes,19,opt,name=DamagePos,proto3,oneof" json:"DamagePos,omitempty"`
	PartInfos         []*ClientHitPartInfo   `protobuf:"bytes,20,rep,name=PartInfos,proto3" json:"PartInfos,omitempty"`
	TopSummonerId     *int64                 `protobuf:"varint,21,opt,name=TopSummonerId,proto3,oneof" json:"TopSummonerId,omitempty"`
	DamageWeight      *Vector2               `protobuf:"bytes,22,opt,name=DamageWeight,proto3,oneof" json:"DamageWeight,omitempty"`
	PassiveUuid       *uint32                `protobuf:"varint,23,opt,name=PassiveUuid,proto3,oneof" json:"PassiveUuid,omitempty"`
	IsRainbow         *bool                  `protobuf:"varint,24,opt,name=IsRainbow,proto3,oneof" json:"IsRainbow,omitempty"`
	DamageMode        *EDamageMode           `protobuf:"varint,25,opt,name=DamageMode,proto3,enum=EDamageMode,oneof" json:"DamageMode,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SyncDamageInfo) Reset() {
	*x = SyncDamageInfo{}
	mi := &file_pb_bp_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncDamageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncDamageInfo) ProtoMessage() {}

func (x *SyncDamageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncDamageInfo.ProtoReflect.Descriptor instead.
func (*SyncDamageInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{70}
}

func (x *SyncDamageInfo) GetDamageSource() EDamageSource {
	if x != nil && x.DamageSource != nil {
		return *x.DamageSource
	}
	return EDamageSource_EDamageSourceSkill
}

func (x *SyncDamageInfo) GetIsMiss() bool {
	if x != nil && x.IsMiss != nil {
		return *x.IsMiss
	}
	return false
}

func (x *SyncDamageInfo) GetIsCrit() bool {
	if x != nil && x.IsCrit != nil {
		return *x.IsCrit
	}
	return false
}

func (x *SyncDamageInfo) GetType() EDamageType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EDamageType_Normal
}

func (x *SyncDamageInfo) GetTypeFlag() int32 {
	if x != nil && x.TypeFlag != nil {
		return *x.TypeFlag
	}
	return 0
}

func (x *SyncDamageInfo) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *SyncDamageInfo) GetActualValue() int64 {
	if x != nil && x.ActualValue != nil {
		return *x.ActualValue
	}
	return 0
}

func (x *SyncDamageInfo) GetLuckyValue() int64 {
	if x != nil && x.LuckyValue != nil {
		return *x.LuckyValue
	}
	return 0
}

func (x *SyncDamageInfo) GetHpLessenValue() int64 {
	if x != nil && x.HpLessenValue != nil {
		return *x.HpLessenValue
	}
	return 0
}

func (x *SyncDamageInfo) GetShieldLessenValue() int64 {
	if x != nil && x.ShieldLessenValue != nil {
		return *x.ShieldLessenValue
	}
	return 0
}

func (x *SyncDamageInfo) GetAttackerUuid() int64 {
	if x != nil && x.AttackerUuid != nil {
		return *x.AttackerUuid
	}
	return 0
}

func (x *SyncDamageInfo) GetOwnerId() int32 {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return 0
}

func (x *SyncDamageInfo) GetOwnerLevel() int32 {
	if x != nil && x.OwnerLevel != nil {
		return *x.OwnerLevel
	}
	return 0
}

func (x *SyncDamageInfo) GetOwnerStage() int32 {
	if x != nil && x.OwnerStage != nil {
		return *x.OwnerStage
	}
	return 0
}

func (x *SyncDamageInfo) GetHitEventId() int32 {
	if x != nil && x.HitEventId != nil {
		return *x.HitEventId
	}
	return 0
}

func (x *SyncDamageInfo) GetIsNormal() bool {
	if x != nil && x.IsNormal != nil {
		return *x.IsNormal
	}
	return false
}

func (x *SyncDamageInfo) GetIsDead() bool {
	if x != nil && x.IsDead != nil {
		return *x.IsDead
	}
	return false
}

func (x *SyncDamageInfo) GetProperty() EDamageProperty {
	if x != nil && x.Property != nil {
		return *x.Property
	}
	return EDamageProperty_General
}

func (x *SyncDamageInfo) GetDamagePos() *Vector3 {
	if x != nil {
		return x.DamagePos
	}
	return nil
}

func (x *SyncDamageInfo) GetPartInfos() []*ClientHitPartInfo {
	if x != nil {
		return x.PartInfos
	}
	return nil
}

func (x *SyncDamageInfo) GetTopSummonerId() int64 {
	if x != nil && x.TopSummonerId != nil {
		return *x.TopSummonerId
	}
	return 0
}

func (x *SyncDamageInfo) GetDamageWeight() *Vector2 {
	if x != nil {
		return x.DamageWeight
	}
	return nil
}

func (x *SyncDamageInfo) GetPassiveUuid() uint32 {
	if x != nil && x.PassiveUuid != nil {
		return *x.PassiveUuid
	}
	return 0
}

func (x *SyncDamageInfo) GetIsRainbow() bool {
	if x != nil && x.IsRainbow != nil {
		return *x.IsRainbow
	}
	return false
}

func (x *SyncDamageInfo) GetDamageMode() EDamageMode {
	if x != nil && x.DamageMode != nil {
		return *x.DamageMode
	}
	return EDamageMode_DamageNormal
}

type SkillEffect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	Damages       []*SyncDamageInfo      `protobuf:"bytes,2,rep,name=Damages,proto3" json:"Damages,omitempty"`
	TotalDamage   *int64                 `protobuf:"varint,3,opt,name=TotalDamage,proto3,oneof" json:"TotalDamage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SkillEffect) Reset() {
	*x = SkillEffect{}
	mi := &file_pb_bp_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillEffect) ProtoMessage() {}

func (x *SkillEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillEffect.ProtoReflect.Descriptor instead.
func (*SkillEffect) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{71}
}

func (x *SkillEffect) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *SkillEffect) GetDamages() []*SyncDamageInfo {
	if x != nil {
		return x.Damages
	}
	return nil
}

func (x *SkillEffect) GetTotalDamage() int64 {
	if x != nil && x.TotalDamage != nil {
		return *x.TotalDamage
	}
	return 0
}

type BuffEffect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *EBuffEventType        `protobuf:"varint,1,opt,name=Type,proto3,enum=EBuffEventType,oneof" json:"Type,omitempty"`
	BuffUuid      *int32                 `protobuf:"varint,2,opt,name=BuffUuid,proto3,oneof" json:"BuffUuid,omitempty"`
	HostUuid      *int64                 `protobuf:"varint,3,opt,name=HostUuid,proto3,oneof" json:"HostUuid,omitempty"`
	TriggerTime   *int64                 `protobuf:"varint,4,opt,name=TriggerTime,proto3,oneof" json:"TriggerTime,omitempty"`
	LogicEffect   []*BuffEffectLogicInfo `protobuf:"bytes,5,rep,name=LogicEffect,proto3" json:"LogicEffect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuffEffect) Reset() {
	*x = BuffEffect{}
	mi := &file_pb_bp_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffEffect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffEffect) ProtoMessage() {}

func (x *BuffEffect) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffEffect.ProtoReflect.Descriptor instead.
func (*BuffEffect) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{72}
}

func (x *BuffEffect) GetType() EBuffEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EBuffEventType_BuffEventUnknown
}

func (x *BuffEffect) GetBuffUuid() int32 {
	if x != nil && x.BuffUuid != nil {
		return *x.BuffUuid
	}
	return 0
}

func (x *BuffEffect) GetHostUuid() int64 {
	if x != nil && x.HostUuid != nil {
		return *x.HostUuid
	}
	return 0
}

func (x *BuffEffect) GetTriggerTime() int64 {
	if x != nil && x.TriggerTime != nil {
		return *x.TriggerTime
	}
	return 0
}

func (x *BuffEffect) GetLogicEffect() []*BuffEffectLogicInfo {
	if x != nil {
		return x.LogicEffect
	}
	return nil
}

type BuffEffectSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int64                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	BuffEffects   []*BuffEffect          `protobuf:"bytes,2,rep,name=BuffEffects,proto3" json:"BuffEffects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuffEffectSync) Reset() {
	*x = BuffEffectSync{}
	mi := &file_pb_bp_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffEffectSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffEffectSync) ProtoMessage() {}

func (x *BuffEffectSync) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffEffectSync.ProtoReflect.Descriptor instead.
func (*BuffEffectSync) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{73}
}

func (x *BuffEffectSync) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *BuffEffectSync) GetBuffEffects() []*BuffEffect {
	if x != nil {
		return x.BuffEffects
	}
	return nil
}

type FakeBulletInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          *int32                 `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	BulletId      *int32                 `protobuf:"varint,2,opt,name=BulletId,proto3,oneof" json:"BulletId,omitempty"`
	TargetId      *int64                 `protobuf:"varint,3,opt,name=TargetId,proto3,oneof" json:"TargetId,omitempty"`
	PartId        *int32                 `protobuf:"varint,4,opt,name=PartId,proto3,oneof" json:"PartId,omitempty"`
	Offset        *Vector3               `protobuf:"bytes,5,opt,name=Offset,proto3,oneof" json:"Offset,omitempty"`
	Rotate        *Vector3               `protobuf:"bytes,6,opt,name=Rotate,proto3,oneof" json:"Rotate,omitempty"`
	SkinId        *int32                 `protobuf:"varint,7,opt,name=SkinId,proto3,oneof" json:"SkinId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FakeBulletInfo) Reset() {
	*x = FakeBulletInfo{}
	mi := &file_pb_bp_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FakeBulletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FakeBulletInfo) ProtoMessage() {}

func (x *FakeBulletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FakeBulletInfo.ProtoReflect.Descriptor instead.
func (*FakeBulletInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{74}
}

func (x *FakeBulletInfo) GetUuid() int32 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *FakeBulletInfo) GetBulletId() int32 {
	if x != nil && x.BulletId != nil {
		return *x.BulletId
	}
	return 0
}

func (x *FakeBulletInfo) GetTargetId() int64 {
	if x != nil && x.TargetId != nil {
		return *x.TargetId
	}
	return 0
}

func (x *FakeBulletInfo) GetPartId() int32 {
	if x != nil && x.PartId != nil {
		return *x.PartId
	}
	return 0
}

func (x *FakeBulletInfo) GetOffset() *Vector3 {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *FakeBulletInfo) GetRotate() *Vector3 {
	if x != nil {
		return x.Rotate
	}
	return nil
}

func (x *FakeBulletInfo) GetSkinId() int32 {
	if x != nil && x.SkinId != nil {
		return *x.SkinId
	}
	return 0
}

type PassengerChangeParam struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IsAddPassenger  *bool                  `protobuf:"varint,1,opt,name=IsAddPassenger,proto3,oneof" json:"IsAddPassenger,omitempty"`
	AddOrRemoveUuid *int64                 `protobuf:"varint,2,opt,name=AddOrRemoveUuid,proto3,oneof" json:"AddOrRemoveUuid,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PassengerChangeParam) Reset() {
	*x = PassengerChangeParam{}
	mi := &file_pb_bp_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PassengerChangeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassengerChangeParam) ProtoMessage() {}

func (x *PassengerChangeParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassengerChangeParam.ProtoReflect.Descriptor instead.
func (*PassengerChangeParam) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{75}
}

func (x *PassengerChangeParam) GetIsAddPassenger() bool {
	if x != nil && x.IsAddPassenger != nil {
		return *x.IsAddPassenger
	}
	return false
}

func (x *PassengerChangeParam) GetAddOrRemoveUuid() int64 {
	if x != nil && x.AddOrRemoveUuid != nil {
		return *x.AddOrRemoveUuid
	}
	return 0
}

type MagneticRidePassengerChangeInfo struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	PassengerChangeList []*PassengerChangeParam `protobuf:"bytes,1,rep,name=PassengerChangeList,proto3" json:"PassengerChangeList,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MagneticRidePassengerChangeInfo) Reset() {
	*x = MagneticRidePassengerChangeInfo{}
	mi := &file_pb_bp_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticRidePassengerChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticRidePassengerChangeInfo) ProtoMessage() {}

func (x *MagneticRidePassengerChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticRidePassengerChangeInfo.ProtoReflect.Descriptor instead.
func (*MagneticRidePassengerChangeInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{76}
}

func (x *MagneticRidePassengerChangeInfo) GetPassengerChangeList() []*PassengerChangeParam {
	if x != nil {
		return x.PassengerChangeList
	}
	return nil
}

type PathPointChangeParam struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Operation        *int32                 `protobuf:"varint,1,opt,name=Operation,proto3,oneof" json:"Operation,omitempty"`
	AddPoint         *Position              `protobuf:"bytes,2,opt,name=AddPoint,proto3,oneof" json:"AddPoint,omitempty"`
	RemovePointCount *int32                 `protobuf:"varint,3,opt,name=RemovePointCount,proto3,oneof" json:"RemovePointCount,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PathPointChangeParam) Reset() {
	*x = PathPointChangeParam{}
	mi := &file_pb_bp_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathPointChangeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathPointChangeParam) ProtoMessage() {}

func (x *PathPointChangeParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathPointChangeParam.ProtoReflect.Descriptor instead.
func (*PathPointChangeParam) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{77}
}

func (x *PathPointChangeParam) GetOperation() int32 {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return 0
}

func (x *PathPointChangeParam) GetAddPoint() *Position {
	if x != nil {
		return x.AddPoint
	}
	return nil
}

func (x *PathPointChangeParam) GetRemovePointCount() int32 {
	if x != nil && x.RemovePointCount != nil {
		return *x.RemovePointCount
	}
	return 0
}

type MagneticRidePathPointChangeInfo struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	PathPointChangeList []*PathPointChangeParam `protobuf:"bytes,1,rep,name=PathPointChangeList,proto3" json:"PathPointChangeList,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MagneticRidePathPointChangeInfo) Reset() {
	*x = MagneticRidePathPointChangeInfo{}
	mi := &file_pb_bp_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticRidePathPointChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticRidePathPointChangeInfo) ProtoMessage() {}

func (x *MagneticRidePathPointChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticRidePathPointChangeInfo.ProtoReflect.Descriptor instead.
func (*MagneticRidePathPointChangeInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{78}
}

func (x *MagneticRidePathPointChangeInfo) GetPathPointChangeList() []*PathPointChangeParam {
	if x != nil {
		return x.PathPointChangeList
	}
	return nil
}

type MagneticRideQueueChangeInfo struct {
	state               protoimpl.MessageState           `protogen:"open.v1"`
	QueueUuid           *int64                           `protobuf:"varint,1,opt,name=QueueUuid,proto3,oneof" json:"QueueUuid,omitempty"`
	PassengerChangeInfo *MagneticRidePassengerChangeInfo `protobuf:"bytes,2,opt,name=PassengerChangeInfo,proto3,oneof" json:"PassengerChangeInfo,omitempty"`
	PathPointChangeInfo *MagneticRidePathPointChangeInfo `protobuf:"bytes,3,opt,name=PathPointChangeInfo,proto3,oneof" json:"PathPointChangeInfo,omitempty"`
	IsCircle            *bool                            `protobuf:"varint,4,opt,name=IsCircle,proto3,oneof" json:"IsCircle,omitempty"`
	IsRemove            *bool                            `protobuf:"varint,5,opt,name=IsRemove,proto3,oneof" json:"IsRemove,omitempty"`
	PathLength          *float32                         `protobuf:"fixed32,6,opt,name=PathLength,proto3,oneof" json:"PathLength,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MagneticRideQueueChangeInfo) Reset() {
	*x = MagneticRideQueueChangeInfo{}
	mi := &file_pb_bp_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticRideQueueChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticRideQueueChangeInfo) ProtoMessage() {}

func (x *MagneticRideQueueChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticRideQueueChangeInfo.ProtoReflect.Descriptor instead.
func (*MagneticRideQueueChangeInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{79}
}

func (x *MagneticRideQueueChangeInfo) GetQueueUuid() int64 {
	if x != nil && x.QueueUuid != nil {
		return *x.QueueUuid
	}
	return 0
}

func (x *MagneticRideQueueChangeInfo) GetPassengerChangeInfo() *MagneticRidePassengerChangeInfo {
	if x != nil {
		return x.PassengerChangeInfo
	}
	return nil
}

func (x *MagneticRideQueueChangeInfo) GetPathPointChangeInfo() *MagneticRidePathPointChangeInfo {
	if x != nil {
		return x.PathPointChangeInfo
	}
	return nil
}

func (x *MagneticRideQueueChangeInfo) GetIsCircle() bool {
	if x != nil && x.IsCircle != nil {
		return *x.IsCircle
	}
	return false
}

func (x *MagneticRideQueueChangeInfo) GetIsRemove() bool {
	if x != nil && x.IsRemove != nil {
		return *x.IsRemove
	}
	return false
}

func (x *MagneticRideQueueChangeInfo) GetPathLength() float32 {
	if x != nil && x.PathLength != nil {
		return *x.PathLength
	}
	return 0
}

type AoiSyncDelta struct {
	state                           protoimpl.MessageState         `protogen:"open.v1"`
	Uuid                            *int64                         `protobuf:"varint,1,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	Attrs                           *AttrCollection                `protobuf:"bytes,2,opt,name=Attrs,proto3,oneof" json:"Attrs,omitempty"`
	TempAttrs                       *TempAttrCollection            `protobuf:"bytes,3,opt,name=TempAttrs,proto3,oneof" json:"TempAttrs,omitempty"`
	EventDataList                   *EventDataList                 `protobuf:"bytes,4,opt,name=EventDataList,proto3,oneof" json:"EventDataList,omitempty"`
	BulletEvent                     *BulletEvent                   `protobuf:"bytes,5,opt,name=BulletEvent,proto3,oneof" json:"BulletEvent,omitempty"`
	BodyPartInfos                   *ActorBodyPartInfos            `protobuf:"bytes,6,opt,name=BodyPartInfos,proto3,oneof" json:"BodyPartInfos,omitempty"`
	SkillEffects                    *SkillEffect                   `protobuf:"bytes,7,opt,name=SkillEffects,proto3,oneof" json:"SkillEffects,omitempty"`
	PassiveSkillInfos               *SeqPassiveSkillInfo           `protobuf:"bytes,8,opt,name=PassiveSkillInfos,proto3,oneof" json:"PassiveSkillInfos,omitempty"`
	PassiveSkillEndInfos            *SeqPassiveSkillEndInfo        `protobuf:"bytes,9,opt,name=PassiveSkillEndInfos,proto3,oneof" json:"PassiveSkillEndInfos,omitempty"`
	BuffInfos                       *BuffInfoSync                  `protobuf:"bytes,10,opt,name=BuffInfos,proto3,oneof" json:"BuffInfos,omitempty"`
	BuffEffect                      *BuffEffectSync                `protobuf:"bytes,11,opt,name=BuffEffect,proto3,oneof" json:"BuffEffect,omitempty"`
	FakeBullets                     []*FakeBulletInfo              `protobuf:"bytes,12,rep,name=FakeBullets,proto3" json:"FakeBullets,omitempty"`
	MagneticRideQueueChangeInfoList []*MagneticRideQueueChangeInfo `protobuf:"bytes,13,rep,name=MagneticRideQueueChangeInfoList,proto3" json:"MagneticRideQueueChangeInfoList,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *AoiSyncDelta) Reset() {
	*x = AoiSyncDelta{}
	mi := &file_pb_bp_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AoiSyncDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AoiSyncDelta) ProtoMessage() {}

func (x *AoiSyncDelta) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AoiSyncDelta.ProtoReflect.Descriptor instead.
func (*AoiSyncDelta) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{80}
}

func (x *AoiSyncDelta) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

func (x *AoiSyncDelta) GetAttrs() *AttrCollection {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *AoiSyncDelta) GetTempAttrs() *TempAttrCollection {
	if x != nil {
		return x.TempAttrs
	}
	return nil
}

func (x *AoiSyncDelta) GetEventDataList() *EventDataList {
	if x != nil {
		return x.EventDataList
	}
	return nil
}

func (x *AoiSyncDelta) GetBulletEvent() *BulletEvent {
	if x != nil {
		return x.BulletEvent
	}
	return nil
}

func (x *AoiSyncDelta) GetBodyPartInfos() *ActorBodyPartInfos {
	if x != nil {
		return x.BodyPartInfos
	}
	return nil
}

func (x *AoiSyncDelta) GetSkillEffects() *SkillEffect {
	if x != nil {
		return x.SkillEffects
	}
	return nil
}

func (x *AoiSyncDelta) GetPassiveSkillInfos() *SeqPassiveSkillInfo {
	if x != nil {
		return x.PassiveSkillInfos
	}
	return nil
}

func (x *AoiSyncDelta) GetPassiveSkillEndInfos() *SeqPassiveSkillEndInfo {
	if x != nil {
		return x.PassiveSkillEndInfos
	}
	return nil
}

func (x *AoiSyncDelta) GetBuffInfos() *BuffInfoSync {
	if x != nil {
		return x.BuffInfos
	}
	return nil
}

func (x *AoiSyncDelta) GetBuffEffect() *BuffEffectSync {
	if x != nil {
		return x.BuffEffect
	}
	return nil
}

func (x *AoiSyncDelta) GetFakeBullets() []*FakeBulletInfo {
	if x != nil {
		return x.FakeBullets
	}
	return nil
}

func (x *AoiSyncDelta) GetMagneticRideQueueChangeInfoList() []*MagneticRideQueueChangeInfo {
	if x != nil {
		return x.MagneticRideQueueChangeInfoList
	}
	return nil
}

type SkillCD struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SkillLevelId  *int32                 `protobuf:"varint,1,opt,name=SkillLevelId,proto3,oneof" json:"SkillLevelId,omitempty"`
	BeginTime     *int64                 `protobuf:"varint,2,opt,name=BeginTime,proto3,oneof" json:"BeginTime,omitempty"`
	Duration      *int32                 `protobuf:"varint,3,opt,name=Duration,proto3,oneof" json:"Duration,omitempty"`
	SkillCDType   *ESkillCDType          `protobuf:"varint,4,opt,name=SkillCDType,proto3,enum=ESkillCDType,oneof" json:"SkillCDType,omitempty"`
	ValidCDTime   *int32                 `protobuf:"varint,5,opt,name=ValidCDTime,proto3,oneof" json:"ValidCDTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SkillCD) Reset() {
	*x = SkillCD{}
	mi := &file_pb_bp_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillCD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillCD) ProtoMessage() {}

func (x *SkillCD) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillCD.ProtoReflect.Descriptor instead.
func (*SkillCD) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{81}
}

func (x *SkillCD) GetSkillLevelId() int32 {
	if x != nil && x.SkillLevelId != nil {
		return *x.SkillLevelId
	}
	return 0
}

func (x *SkillCD) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *SkillCD) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *SkillCD) GetSkillCDType() ESkillCDType {
	if x != nil && x.SkillCDType != nil {
		return *x.SkillCDType
	}
	return ESkillCDType_ESkillCDNormal
}

func (x *SkillCD) GetValidCDTime() int32 {
	if x != nil && x.ValidCDTime != nil {
		return *x.ValidCDTime
	}
	return 0
}

type FightResCD struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResId         *int32                 `protobuf:"varint,1,opt,name=ResId,proto3,oneof" json:"ResId,omitempty"`
	BeginTime     *int64                 `protobuf:"varint,2,opt,name=BeginTime,proto3,oneof" json:"BeginTime,omitempty"`
	Duration      *int32                 `protobuf:"varint,3,opt,name=Duration,proto3,oneof" json:"Duration,omitempty"`
	ValidCDTime   *int32                 `protobuf:"varint,4,opt,name=ValidCDTime,proto3,oneof" json:"ValidCDTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FightResCD) Reset() {
	*x = FightResCD{}
	mi := &file_pb_bp_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FightResCD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightResCD) ProtoMessage() {}

func (x *FightResCD) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightResCD.ProtoReflect.Descriptor instead.
func (*FightResCD) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{82}
}

func (x *FightResCD) GetResId() int32 {
	if x != nil && x.ResId != nil {
		return *x.ResId
	}
	return 0
}

func (x *FightResCD) GetBeginTime() int64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *FightResCD) GetDuration() int32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *FightResCD) GetValidCDTime() int32 {
	if x != nil && x.ValidCDTime != nil {
		return *x.ValidCDTime
	}
	return 0
}

type AoiSyncToMeDelta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseDelta     *AoiSyncDelta          `protobuf:"bytes,1,opt,name=BaseDelta,proto3,oneof" json:"BaseDelta,omitempty"`
	SyncHateIds   []int64                `protobuf:"varint,2,rep,packed,name=SyncHateIds,proto3" json:"SyncHateIds,omitempty"`
	SyncSkillCDs  []*SkillCD             `protobuf:"bytes,3,rep,name=SyncSkillCDs,proto3" json:"SyncSkillCDs,omitempty"`
	FightResCDs   []*FightResCD          `protobuf:"bytes,4,rep,name=FightResCDs,proto3" json:"FightResCDs,omitempty"`
	Uuid          *int64                 `protobuf:"varint,5,opt,name=Uuid,proto3,oneof" json:"Uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AoiSyncToMeDelta) Reset() {
	*x = AoiSyncToMeDelta{}
	mi := &file_pb_bp_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AoiSyncToMeDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AoiSyncToMeDelta) ProtoMessage() {}

func (x *AoiSyncToMeDelta) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AoiSyncToMeDelta.ProtoReflect.Descriptor instead.
func (*AoiSyncToMeDelta) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{83}
}

func (x *AoiSyncToMeDelta) GetBaseDelta() *AoiSyncDelta {
	if x != nil {
		return x.BaseDelta
	}
	return nil
}

func (x *AoiSyncToMeDelta) GetSyncHateIds() []int64 {
	if x != nil {
		return x.SyncHateIds
	}
	return nil
}

func (x *AoiSyncToMeDelta) GetSyncSkillCDs() []*SkillCD {
	if x != nil {
		return x.SyncSkillCDs
	}
	return nil
}

func (x *AoiSyncToMeDelta) GetFightResCDs() []*FightResCD {
	if x != nil {
		return x.FightResCDs
	}
	return nil
}

func (x *AoiSyncToMeDelta) GetUuid() int64 {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return 0
}

type SyncNearDeltaInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeltaInfos    []*AoiSyncDelta        `protobuf:"bytes,1,rep,name=DeltaInfos,proto3" json:"DeltaInfos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncNearDeltaInfo) Reset() {
	*x = SyncNearDeltaInfo{}
	mi := &file_pb_bp_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncNearDeltaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNearDeltaInfo) ProtoMessage() {}

func (x *SyncNearDeltaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNearDeltaInfo.ProtoReflect.Descriptor instead.
func (*SyncNearDeltaInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{84}
}

func (x *SyncNearDeltaInfo) GetDeltaInfos() []*AoiSyncDelta {
	if x != nil {
		return x.DeltaInfos
	}
	return nil
}

type SyncToMeDeltaInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeltaInfo     *AoiSyncToMeDelta      `protobuf:"bytes,1,opt,name=DeltaInfo,proto3" json:"DeltaInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncToMeDeltaInfo) Reset() {
	*x = SyncToMeDeltaInfo{}
	mi := &file_pb_bp_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncToMeDeltaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncToMeDeltaInfo) ProtoMessage() {}

func (x *SyncToMeDeltaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncToMeDeltaInfo.ProtoReflect.Descriptor instead.
func (*SyncToMeDeltaInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{85}
}

func (x *SyncToMeDeltaInfo) GetDeltaInfo() *AoiSyncToMeDelta {
	if x != nil {
		return x.DeltaInfo
	}
	return nil
}

type SyncNearEntities struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appear        []*Entity              `protobuf:"bytes,1,rep,name=Appear,proto3" json:"Appear,omitempty"`
	Disappear     []*DisappearEntity     `protobuf:"bytes,2,rep,name=Disappear,proto3" json:"Disappear,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncNearEntities) Reset() {
	*x = SyncNearEntities{}
	mi := &file_pb_bp_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncNearEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncNearEntities) ProtoMessage() {}

func (x *SyncNearEntities) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncNearEntities.ProtoReflect.Descriptor instead.
func (*SyncNearEntities) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{86}
}

func (x *SyncNearEntities) GetAppear() []*Entity {
	if x != nil {
		return x.Appear
	}
	return nil
}

func (x *SyncNearEntities) GetDisappear() []*DisappearEntity {
	if x != nil {
		return x.Disappear
	}
	return nil
}

type MagneticQueueAppearInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	PassengerUuidList []int64                `protobuf:"varint,1,rep,packed,name=PassengerUuidList,proto3" json:"PassengerUuidList,omitempty"`
	IsCircle          bool                   `protobuf:"varint,2,opt,name=IsCircle,proto3" json:"IsCircle,omitempty"`
	PathLength        float32                `protobuf:"fixed32,3,opt,name=PathLength,proto3" json:"PathLength,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MagneticQueueAppearInfo) Reset() {
	*x = MagneticQueueAppearInfo{}
	mi := &file_pb_bp_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MagneticQueueAppearInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MagneticQueueAppearInfo) ProtoMessage() {}

func (x *MagneticQueueAppearInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MagneticQueueAppearInfo.ProtoReflect.Descriptor instead.
func (*MagneticQueueAppearInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{87}
}

func (x *MagneticQueueAppearInfo) GetPassengerUuidList() []int64 {
	if x != nil {
		return x.PassengerUuidList
	}
	return nil
}

func (x *MagneticQueueAppearInfo) GetIsCircle() bool {
	if x != nil {
		return x.IsCircle
	}
	return false
}

func (x *MagneticQueueAppearInfo) GetPathLength() float32 {
	if x != nil {
		return x.PathLength
	}
	return 0
}

// 怪物实体
type Entity struct {
	state                       protoimpl.MessageState             `protogen:"open.v1"`
	Uuid                        int64                              `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	EntityType                  EEntityType                        `protobuf:"varint,2,opt,name=EntityType,proto3,enum=EEntityType" json:"EntityType,omitempty"` //实体类型
	Attrs                       *AttrCollection                    `protobuf:"bytes,3,opt,name=Attrs,proto3" json:"Attrs,omitempty"`
	TempAttrs                   *TempAttrCollection                `protobuf:"bytes,4,opt,name=TempAttrs,proto3" json:"TempAttrs,omitempty"`
	BodyInfos                   *ActorBodyPartInfos                `protobuf:"bytes,5,opt,name=BodyInfos,proto3" json:"BodyInfos,omitempty"`
	SeqPassiveSkillInfo         *SeqPassiveSkillInfo               `protobuf:"bytes,6,opt,name=SeqPassiveSkillInfo,proto3" json:"SeqPassiveSkillInfo,omitempty"`
	BuffInfos                   *BuffInfoSync                      `protobuf:"bytes,7,opt,name=BuffInfos,proto3" json:"BuffInfos,omitempty"`
	AppearType                  EAppearType                        `protobuf:"varint,8,opt,name=AppearType,proto3,enum=EAppearType" json:"AppearType,omitempty"`
	MagneticRideQueueChangeInfo map[int32]*MagneticQueueAppearInfo `protobuf:"bytes,9,rep,name=MagneticRideQueueChangeInfo,proto3" json:"MagneticRideQueueChangeInfo,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Entity) Reset() {
	*x = Entity{}
	mi := &file_pb_bp_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{88}
}

func (x *Entity) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *Entity) GetEntityType() EEntityType {
	if x != nil {
		return x.EntityType
	}
	return EEntityType_EntErrType
}

func (x *Entity) GetAttrs() *AttrCollection {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Entity) GetTempAttrs() *TempAttrCollection {
	if x != nil {
		return x.TempAttrs
	}
	return nil
}

func (x *Entity) GetBodyInfos() *ActorBodyPartInfos {
	if x != nil {
		return x.BodyInfos
	}
	return nil
}

func (x *Entity) GetSeqPassiveSkillInfo() *SeqPassiveSkillInfo {
	if x != nil {
		return x.SeqPassiveSkillInfo
	}
	return nil
}

func (x *Entity) GetBuffInfos() *BuffInfoSync {
	if x != nil {
		return x.BuffInfos
	}
	return nil
}

func (x *Entity) GetAppearType() EAppearType {
	if x != nil {
		return x.AppearType
	}
	return EAppearType_EAppearNull
}

func (x *Entity) GetMagneticRideQueueChangeInfo() map[int32]*MagneticQueueAppearInfo {
	if x != nil {
		return x.MagneticRideQueueChangeInfo
	}
	return nil
}

type DisappearEntity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          int64                  `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DisappearType EDisappearType         `protobuf:"varint,2,opt,name=DisappearType,proto3,enum=EDisappearType" json:"DisappearType,omitempty"` //实体消失类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisappearEntity) Reset() {
	*x = DisappearEntity{}
	mi := &file_pb_bp_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisappearEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisappearEntity) ProtoMessage() {}

func (x *DisappearEntity) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisappearEntity.ProtoReflect.Descriptor instead.
func (*DisappearEntity) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{89}
}

func (x *DisappearEntity) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *DisappearEntity) GetDisappearType() EDisappearType {
	if x != nil {
		return x.DisappearType
	}
	return EDisappearType_EDisappearNormal
}

type UnionHistoryActive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnionId       int64                  `protobuf:"varint,1,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	ActivePoints  int64                  `protobuf:"varint,2,opt,name=active_points,json=activePoints,proto3" json:"active_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnionHistoryActive) Reset() {
	*x = UnionHistoryActive{}
	mi := &file_pb_bp_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnionHistoryActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionHistoryActive) ProtoMessage() {}

func (x *UnionHistoryActive) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionHistoryActive.ProtoReflect.Descriptor instead.
func (*UnionHistoryActive) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{90}
}

func (x *UnionHistoryActive) GetUnionId() int64 {
	if x != nil {
		return x.UnionId
	}
	return 0
}

func (x *UnionHistoryActive) GetActivePoints() int64 {
	if x != nil {
		return x.ActivePoints
	}
	return 0
}

type UserUnionHuntInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HuntRank      int32                  `protobuf:"varint,1,opt,name=hunt_rank,json=huntRank,proto3" json:"hunt_rank,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUnionHuntInfo) Reset() {
	*x = UserUnionHuntInfo{}
	mi := &file_pb_bp_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUnionHuntInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnionHuntInfo) ProtoMessage() {}

func (x *UserUnionHuntInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnionHuntInfo.ProtoReflect.Descriptor instead.
func (*UserUnionHuntInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{91}
}

func (x *UserUnionHuntInfo) GetHuntRank() int32 {
	if x != nil {
		return x.HuntRank
	}
	return 0
}

type UnionDanceHistory struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DanceEndTime    int64                  `protobuf:"varint,1,opt,name=dance_end_time,json=danceEndTime,proto3" json:"dance_end_time,omitempty"`
	SentDanceAward  bool                   `protobuf:"varint,2,opt,name=sent_dance_award,json=sentDanceAward,proto3" json:"sent_dance_award,omitempty"`
	DrawnDanceAward bool                   `protobuf:"varint,3,opt,name=drawn_dance_award,json=drawnDanceAward,proto3" json:"drawn_dance_award,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UnionDanceHistory) Reset() {
	*x = UnionDanceHistory{}
	mi := &file_pb_bp_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnionDanceHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnionDanceHistory) ProtoMessage() {}

func (x *UnionDanceHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnionDanceHistory.ProtoReflect.Descriptor instead.
func (*UnionDanceHistory) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{92}
}

func (x *UnionDanceHistory) GetDanceEndTime() int64 {
	if x != nil {
		return x.DanceEndTime
	}
	return 0
}

func (x *UnionDanceHistory) GetSentDanceAward() bool {
	if x != nil {
		return x.SentDanceAward
	}
	return false
}

func (x *UnionDanceHistory) GetDrawnDanceAward() bool {
	if x != nil {
		return x.DrawnDanceAward
	}
	return false
}

type UserUnion struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	UnionId               int64                  `protobuf:"varint,1,opt,name=union_id,json=unionId,proto3" json:"union_id,omitempty"`
	NextJoinTime          uint64                 `protobuf:"varint,2,opt,name=next_join_time,json=nextJoinTime,proto3" json:"next_join_time,omitempty"`
	ReqUnionTimes         map[int64]uint64       `protobuf:"bytes,3,rep,name=req_union_times,json=reqUnionTimes,proto3" json:"req_union_times,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	JoinFlag              bool                   `protobuf:"varint,4,opt,name=join_flag,json=joinFlag,proto3" json:"join_flag,omitempty"`
	CollectedIds          []int64                `protobuf:"varint,5,rep,packed,name=collected_ids,json=collectedIds,proto3" json:"collected_ids,omitempty"`
	ActiveAwardResetTime  int64                  `protobuf:"varint,6,opt,name=active_award_reset_time,json=activeAwardResetTime,proto3" json:"active_award_reset_time,omitempty"`
	ReceivedAwardIds      []int32                `protobuf:"varint,7,rep,packed,name=received_award_ids,json=receivedAwardIds,proto3" json:"received_award_ids,omitempty"`
	HistoryActivePoints   []*UnionHistoryActive  `protobuf:"bytes,8,rep,name=history_active_points,json=historyActivePoints,proto3" json:"history_active_points,omitempty"`
	ActiveLastRefreshTime int64                  `protobuf:"varint,9,opt,name=active_last_refresh_time,json=activeLastRefreshTime,proto3" json:"active_last_refresh_time,omitempty"`
	FinishDailyActiveIds  []int32                `protobuf:"varint,10,rep,packed,name=finish_daily_active_ids,json=finishDailyActiveIds,proto3" json:"finish_daily_active_ids,omitempty"`
	LeaveTime             uint64                 `protobuf:"varint,11,opt,name=leave_time,json=leaveTime,proto3" json:"leave_time,omitempty"`
	DanceRecord           *UnionDanceHistory     `protobuf:"bytes,13,opt,name=dance_record,json=danceRecord,proto3" json:"dance_record,omitempty"`
	UserUnionHuntInfo     *UserUnionHuntInfo     `protobuf:"bytes,14,opt,name=user_union_hunt_info,json=userUnionHuntInfo,proto3" json:"user_union_hunt_info,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *UserUnion) Reset() {
	*x = UserUnion{}
	mi := &file_pb_bp_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUnion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUnion) ProtoMessage() {}

func (x *UserUnion) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUnion.ProtoReflect.Descriptor instead.
func (*UserUnion) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{93}
}

func (x *UserUnion) GetUnionId() int64 {
	if x != nil {
		return x.UnionId
	}
	return 0
}

func (x *UserUnion) GetNextJoinTime() uint64 {
	if x != nil {
		return x.NextJoinTime
	}
	return 0
}

func (x *UserUnion) GetReqUnionTimes() map[int64]uint64 {
	if x != nil {
		return x.ReqUnionTimes
	}
	return nil
}

func (x *UserUnion) GetJoinFlag() bool {
	if x != nil {
		return x.JoinFlag
	}
	return false
}

func (x *UserUnion) GetCollectedIds() []int64 {
	if x != nil {
		return x.CollectedIds
	}
	return nil
}

func (x *UserUnion) GetActiveAwardResetTime() int64 {
	if x != nil {
		return x.ActiveAwardResetTime
	}
	return 0
}

func (x *UserUnion) GetReceivedAwardIds() []int32 {
	if x != nil {
		return x.ReceivedAwardIds
	}
	return nil
}

func (x *UserUnion) GetHistoryActivePoints() []*UnionHistoryActive {
	if x != nil {
		return x.HistoryActivePoints
	}
	return nil
}

func (x *UserUnion) GetActiveLastRefreshTime() int64 {
	if x != nil {
		return x.ActiveLastRefreshTime
	}
	return 0
}

func (x *UserUnion) GetFinishDailyActiveIds() []int32 {
	if x != nil {
		return x.FinishDailyActiveIds
	}
	return nil
}

func (x *UserUnion) GetLeaveTime() uint64 {
	if x != nil {
		return x.LeaveTime
	}
	return 0
}

func (x *UserUnion) GetDanceRecord() *UnionDanceHistory {
	if x != nil {
		return x.DanceRecord
	}
	return nil
}

func (x *UserUnion) GetUserUnionHuntInfo() *UserUnionHuntInfo {
	if x != nil {
		return x.UserUnionHuntInfo
	}
	return nil
}

type ProfileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ProfileId     int32                  `protobuf:"varint,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ProfileUrl    string                 `protobuf:"bytes,2,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`
	HalfBodyUrl   string                 `protobuf:"bytes,3,opt,name=half_body_url,json=halfBodyUrl,proto3" json:"half_body_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProfileInfo) Reset() {
	*x = ProfileInfo{}
	mi := &file_pb_bp_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileInfo) ProtoMessage() {}

func (x *ProfileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileInfo.ProtoReflect.Descriptor instead.
func (*ProfileInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{94}
}

func (x *ProfileInfo) GetProfileId() int32 {
	if x != nil {
		return x.ProfileId
	}
	return 0
}

func (x *ProfileInfo) GetProfileUrl() string {
	if x != nil {
		return x.ProfileUrl
	}
	return ""
}

func (x *ProfileInfo) GetHalfBodyUrl() string {
	if x != nil {
		return x.HalfBodyUrl
	}
	return ""
}

type CharBaseInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	CharId                int64                  `protobuf:"varint,1,opt,name=char_id,json=charId,proto3" json:"char_id,omitempty"`
	AccountId             string                 `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ShowId                int64                  `protobuf:"varint,3,opt,name=show_id,json=showId,proto3" json:"show_id,omitempty"`
	ServerId              uint32                 `protobuf:"varint,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Name                  string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Gender                EGender                `protobuf:"varint,6,opt,name=gender,proto3,enum=EGender" json:"gender,omitempty"`
	IsDeleted             bool                   `protobuf:"varint,7,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	IsForbid              bool                   `protobuf:"varint,8,opt,name=is_forbid,json=isForbid,proto3" json:"is_forbid,omitempty"`
	IsMute                bool                   `protobuf:"varint,9,opt,name=is_mute,json=isMute,proto3" json:"is_mute,omitempty"`
	X                     float32                `protobuf:"fixed32,10,opt,name=x,proto3" json:"x,omitempty"`
	Y                     float32                `protobuf:"fixed32,11,opt,name=y,proto3" json:"y,omitempty"`
	Z                     float32                `protobuf:"fixed32,12,opt,name=z,proto3" json:"z,omitempty"`
	Dir                   float32                `protobuf:"fixed32,13,opt,name=dir,proto3" json:"dir,omitempty"`
	FaceData              *FaceData              `protobuf:"bytes,14,opt,name=face_data,json=faceData,proto3" json:"face_data,omitempty"`
	CardId                uint32                 `protobuf:"varint,15,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CreateTime            int64                  `protobuf:"varint,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	OnlineTime            int64                  `protobuf:"varint,17,opt,name=online_time,json=onlineTime,proto3" json:"online_time,omitempty"`
	OfflineTime           int64                  `protobuf:"varint,18,opt,name=offline_time,json=offlineTime,proto3" json:"offline_time,omitempty"`
	ProfileInfo           *ProfileInfo           `protobuf:"bytes,19,opt,name=profile_info,json=profileInfo,proto3" json:"profile_info,omitempty"`
	TeamInfo              *CharTeam              `protobuf:"bytes,20,opt,name=team_info,json=teamInfo,proto3" json:"team_info,omitempty"`
	CharState             uint64                 `protobuf:"varint,21,opt,name=char_state,json=charState,proto3" json:"char_state,omitempty"`
	BodySize              EBodySize              `protobuf:"varint,22,opt,name=body_size,json=bodySize,proto3,enum=EBodySize" json:"body_size,omitempty"`
	UnionInfo             *UserUnion             `protobuf:"bytes,23,opt,name=union_info,json=unionInfo,proto3" json:"union_info,omitempty"`
	PersonalState         []int32                `protobuf:"varint,24,rep,packed,name=personal_state,json=personalState,proto3" json:"personal_state,omitempty"`
	AvatarInfo            *AvatarInfo            `protobuf:"bytes,25,opt,name=avatar_info,json=avatarInfo,proto3" json:"avatar_info,omitempty"`
	TotalOnlineTime       uint64                 `protobuf:"varint,26,opt,name=total_online_time,json=totalOnlineTime,proto3" json:"total_online_time,omitempty"`
	OpenId                string                 `protobuf:"bytes,27,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	SdkType               int32                  `protobuf:"varint,28,opt,name=sdk_type,json=sdkType,proto3" json:"sdk_type,omitempty"`
	Os                    int32                  `protobuf:"varint,29,opt,name=os,proto3" json:"os,omitempty"`
	InitProfessionId      int32                  `protobuf:"varint,31,opt,name=init_profession_id,json=initProfessionId,proto3" json:"init_profession_id,omitempty"`
	LastCalTotalTime      uint64                 `protobuf:"varint,32,opt,name=last_cal_total_time,json=lastCalTotalTime,proto3" json:"last_cal_total_time,omitempty"`
	AreaId                int32                  `protobuf:"varint,33,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	ClientVersion         string                 `protobuf:"bytes,34,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	FightPoint            int32                  `protobuf:"varint,35,opt,name=fight_point,json=fightPoint,proto3" json:"fight_point,omitempty"`
	SumSave               int64                  `protobuf:"varint,36,opt,name=sum_save,json=sumSave,proto3" json:"sum_save,omitempty"`
	ClientResourceVersion string                 `protobuf:"bytes,37,opt,name=client_resource_version,json=clientResourceVersion,proto3" json:"client_resource_version,omitempty"`
	LastOfflineTime       int64                  `protobuf:"varint,38,opt,name=last_offline_time,json=lastOfflineTime,proto3" json:"last_offline_time,omitempty"`
	DayAccDurTime         int32                  `protobuf:"varint,39,opt,name=day_acc_dur_time,json=dayAccDurTime,proto3" json:"day_acc_dur_time,omitempty"`
	LastAccDurTimestamp   int64                  `protobuf:"varint,40,opt,name=last_acc_dur_timestamp,json=lastAccDurTimestamp,proto3" json:"last_acc_dur_timestamp,omitempty"`
	SaveSerial            int64                  `protobuf:"varint,41,opt,name=save_serial,json=saveSerial,proto3" json:"save_serial,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CharBaseInfo) Reset() {
	*x = CharBaseInfo{}
	mi := &file_pb_bp_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharBaseInfo) ProtoMessage() {}

func (x *CharBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharBaseInfo.ProtoReflect.Descriptor instead.
func (*CharBaseInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{95}
}

func (x *CharBaseInfo) GetCharId() int64 {
	if x != nil {
		return x.CharId
	}
	return 0
}

func (x *CharBaseInfo) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CharBaseInfo) GetShowId() int64 {
	if x != nil {
		return x.ShowId
	}
	return 0
}

func (x *CharBaseInfo) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *CharBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CharBaseInfo) GetGender() EGender {
	if x != nil {
		return x.Gender
	}
	return EGender_GenderNull
}

func (x *CharBaseInfo) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *CharBaseInfo) GetIsForbid() bool {
	if x != nil {
		return x.IsForbid
	}
	return false
}

func (x *CharBaseInfo) GetIsMute() bool {
	if x != nil {
		return x.IsMute
	}
	return false
}

func (x *CharBaseInfo) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CharBaseInfo) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CharBaseInfo) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *CharBaseInfo) GetDir() float32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

func (x *CharBaseInfo) GetFaceData() *FaceData {
	if x != nil {
		return x.FaceData
	}
	return nil
}

func (x *CharBaseInfo) GetCardId() uint32 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *CharBaseInfo) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *CharBaseInfo) GetOnlineTime() int64 {
	if x != nil {
		return x.OnlineTime
	}
	return 0
}

func (x *CharBaseInfo) GetOfflineTime() int64 {
	if x != nil {
		return x.OfflineTime
	}
	return 0
}

func (x *CharBaseInfo) GetProfileInfo() *ProfileInfo {
	if x != nil {
		return x.ProfileInfo
	}
	return nil
}

func (x *CharBaseInfo) GetTeamInfo() *CharTeam {
	if x != nil {
		return x.TeamInfo
	}
	return nil
}

func (x *CharBaseInfo) GetCharState() uint64 {
	if x != nil {
		return x.CharState
	}
	return 0
}

func (x *CharBaseInfo) GetBodySize() EBodySize {
	if x != nil {
		return x.BodySize
	}
	return EBodySize_BodySizeNull
}

func (x *CharBaseInfo) GetUnionInfo() *UserUnion {
	if x != nil {
		return x.UnionInfo
	}
	return nil
}

func (x *CharBaseInfo) GetPersonalState() []int32 {
	if x != nil {
		return x.PersonalState
	}
	return nil
}

func (x *CharBaseInfo) GetAvatarInfo() *AvatarInfo {
	if x != nil {
		return x.AvatarInfo
	}
	return nil
}

func (x *CharBaseInfo) GetTotalOnlineTime() uint64 {
	if x != nil {
		return x.TotalOnlineTime
	}
	return 0
}

func (x *CharBaseInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CharBaseInfo) GetSdkType() int32 {
	if x != nil {
		return x.SdkType
	}
	return 0
}

func (x *CharBaseInfo) GetOs() int32 {
	if x != nil {
		return x.Os
	}
	return 0
}

func (x *CharBaseInfo) GetInitProfessionId() int32 {
	if x != nil {
		return x.InitProfessionId
	}
	return 0
}

func (x *CharBaseInfo) GetLastCalTotalTime() uint64 {
	if x != nil {
		return x.LastCalTotalTime
	}
	return 0
}

func (x *CharBaseInfo) GetAreaId() int32 {
	if x != nil {
		return x.AreaId
	}
	return 0
}

func (x *CharBaseInfo) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

func (x *CharBaseInfo) GetFightPoint() int32 {
	if x != nil {
		return x.FightPoint
	}
	return 0
}

func (x *CharBaseInfo) GetSumSave() int64 {
	if x != nil {
		return x.SumSave
	}
	return 0
}

func (x *CharBaseInfo) GetClientResourceVersion() string {
	if x != nil {
		return x.ClientResourceVersion
	}
	return ""
}

func (x *CharBaseInfo) GetLastOfflineTime() int64 {
	if x != nil {
		return x.LastOfflineTime
	}
	return 0
}

func (x *CharBaseInfo) GetDayAccDurTime() int32 {
	if x != nil {
		return x.DayAccDurTime
	}
	return 0
}

func (x *CharBaseInfo) GetLastAccDurTimestamp() int64 {
	if x != nil {
		return x.LastAccDurTimestamp
	}
	return 0
}

func (x *CharBaseInfo) GetSaveSerial() int64 {
	if x != nil {
		return x.SaveSerial
	}
	return 0
}

type SceneLuaData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SceneLuaInfo  map[uint32]string      `protobuf:"bytes,1,rep,name=scene_lua_info,json=sceneLuaInfo,proto3" json:"scene_lua_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneLuaData) Reset() {
	*x = SceneLuaData{}
	mi := &file_pb_bp_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneLuaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneLuaData) ProtoMessage() {}

func (x *SceneLuaData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneLuaData.ProtoReflect.Descriptor instead.
func (*SceneLuaData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{96}
}

func (x *SceneLuaData) GetSceneLuaInfo() map[uint32]string {
	if x != nil {
		return x.SceneLuaInfo
	}
	return nil
}

type PioneerData struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	InfoMap       map[uint32]*PioneerInfo `protobuf:"bytes,1,rep,name=info_map,json=infoMap,proto3" json:"info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PioneerData) Reset() {
	*x = PioneerData{}
	mi := &file_pb_bp_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PioneerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PioneerData) ProtoMessage() {}

func (x *PioneerData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PioneerData.ProtoReflect.Descriptor instead.
func (*PioneerData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{97}
}

func (x *PioneerData) GetInfoMap() map[uint32]*PioneerInfo {
	if x != nil {
		return x.InfoMap
	}
	return nil
}

type PioneerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentTotal  uint32                 `protobuf:"varint,1,opt,name=current_total,json=currentTotal,proto3" json:"current_total,omitempty"`
	Targets       map[uint32]uint32      `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Awards        map[int32]bool         `protobuf:"bytes,3,rep,name=awards,proto3" json:"awards,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	EnteredZones  map[uint32]bool        `protobuf:"bytes,4,rep,name=entered_zones,json=enteredZones,proto3" json:"entered_zones,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Id            uint32                 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	ErrCode       EErrorCode             `protobuf:"varint,6,opt,name=err_code,json=errCode,proto3,enum=EErrorCode" json:"err_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PioneerInfo) Reset() {
	*x = PioneerInfo{}
	mi := &file_pb_bp_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PioneerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PioneerInfo) ProtoMessage() {}

func (x *PioneerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PioneerInfo.ProtoReflect.Descriptor instead.
func (*PioneerInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{98}
}

func (x *PioneerInfo) GetCurrentTotal() uint32 {
	if x != nil {
		return x.CurrentTotal
	}
	return 0
}

func (x *PioneerInfo) GetTargets() map[uint32]uint32 {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *PioneerInfo) GetAwards() map[int32]bool {
	if x != nil {
		return x.Awards
	}
	return nil
}

func (x *PioneerInfo) GetEnteredZones() map[uint32]bool {
	if x != nil {
		return x.EnteredZones
	}
	return nil
}

func (x *PioneerInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PioneerInfo) GetErrCode() EErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return EErrorCode_ErrSuccess
}

type BuffDBInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxId         uint32                 `protobuf:"varint,1,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	AllBuffDbData map[uint32]*BuffDBData `protobuf:"bytes,2,rep,name=all_buff_db_data,json=allBuffDbData,proto3" json:"all_buff_db_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuffDBInfo) Reset() {
	*x = BuffDBInfo{}
	mi := &file_pb_bp_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffDBInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffDBInfo) ProtoMessage() {}

func (x *BuffDBInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffDBInfo.ProtoReflect.Descriptor instead.
func (*BuffDBInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{99}
}

func (x *BuffDBInfo) GetMaxId() uint32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *BuffDBInfo) GetAllBuffDbData() map[uint32]*BuffDBData {
	if x != nil {
		return x.AllBuffDbData
	}
	return nil
}

type BuffDBData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BuffUuid        int64                  `protobuf:"varint,1,opt,name=buff_uuid,json=buffUuid,proto3" json:"buff_uuid,omitempty"`
	FirerId         int64                  `protobuf:"varint,2,opt,name=firer_id,json=firerId,proto3" json:"firer_id,omitempty"`
	BuffConfigId    uint32                 `protobuf:"varint,3,opt,name=buff_config_id,json=buffConfigId,proto3" json:"buff_config_id,omitempty"`
	BaseId          uint32                 `protobuf:"varint,4,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Level           uint32                 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Layer           uint32                 `protobuf:"varint,6,opt,name=layer,proto3" json:"layer,omitempty"`
	Duration        int32                  `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Count           int32                  `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	CreateTime      int64                  `protobuf:"varint,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	PartId          int32                  `protobuf:"varint,10,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	CreateSceneId   int32                  `protobuf:"varint,11,opt,name=create_scene_id,json=createSceneId,proto3" json:"create_scene_id,omitempty"`
	CustomParamsKey []string               `protobuf:"bytes,12,rep,name=custom_params_key,json=customParamsKey,proto3" json:"custom_params_key,omitempty"`
	CustomParams    []int32                `protobuf:"varint,13,rep,packed,name=custom_params,json=customParams,proto3" json:"custom_params,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BuffDBData) Reset() {
	*x = BuffDBData{}
	mi := &file_pb_bp_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuffDBData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuffDBData) ProtoMessage() {}

func (x *BuffDBData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuffDBData.ProtoReflect.Descriptor instead.
func (*BuffDBData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{100}
}

func (x *BuffDBData) GetBuffUuid() int64 {
	if x != nil {
		return x.BuffUuid
	}
	return 0
}

func (x *BuffDBData) GetFirerId() int64 {
	if x != nil {
		return x.FirerId
	}
	return 0
}

func (x *BuffDBData) GetBuffConfigId() uint32 {
	if x != nil {
		return x.BuffConfigId
	}
	return 0
}

func (x *BuffDBData) GetBaseId() uint32 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *BuffDBData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BuffDBData) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *BuffDBData) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *BuffDBData) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *BuffDBData) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *BuffDBData) GetPartId() int32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *BuffDBData) GetCreateSceneId() int32 {
	if x != nil {
		return x.CreateSceneId
	}
	return 0
}

func (x *BuffDBData) GetCustomParamsKey() []string {
	if x != nil {
		return x.CustomParamsKey
	}
	return nil
}

func (x *BuffDBData) GetCustomParams() []int32 {
	if x != nil {
		return x.CustomParams
	}
	return nil
}

type ItemPackage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Packages      map[int32]*Package     `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockItems   map[int32]int32        `protobuf:"bytes,2,rep,name=unlock_items,json=unlockItems,proto3" json:"unlock_items,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	QuickBar      int32                  `protobuf:"varint,3,opt,name=quick_bar,json=quickBar,proto3" json:"quick_bar,omitempty"`
	ItemUuid      int32                  `protobuf:"varint,4,opt,name=item_uuid,json=itemUuid,proto3" json:"item_uuid,omitempty"`
	UseGroupCd    map[int32]int64        `protobuf:"bytes,5,rep,name=use_group_cd,json=useGroupCd,proto3" json:"use_group_cd,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemPackage) Reset() {
	*x = ItemPackage{}
	mi := &file_pb_bp_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemPackage) ProtoMessage() {}

func (x *ItemPackage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemPackage.ProtoReflect.Descriptor instead.
func (*ItemPackage) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{101}
}

func (x *ItemPackage) GetPackages() map[int32]*Package {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *ItemPackage) GetUnlockItems() map[int32]int32 {
	if x != nil {
		return x.UnlockItems
	}
	return nil
}

func (x *ItemPackage) GetQuickBar() int32 {
	if x != nil {
		return x.QuickBar
	}
	return 0
}

func (x *ItemPackage) GetItemUuid() int32 {
	if x != nil {
		return x.ItemUuid
	}
	return 0
}

func (x *ItemPackage) GetUseGroupCd() map[int32]int64 {
	if x != nil {
		return x.UseGroupCd
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	MaxCapacity   int32                  `protobuf:"varint,2,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	ItemCd        map[int32]int64        `protobuf:"bytes,3,rep,name=item_cd,json=itemCd,proto3" json:"item_cd,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Items         map[int64]*Item        `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PublicCd      int64                  `protobuf:"varint,5,opt,name=public_cd,json=publicCd,proto3" json:"public_cd,omitempty"`
	ChangeVersion int32                  `protobuf:"varint,6,opt,name=change_version,json=changeVersion,proto3" json:"change_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Package) Reset() {
	*x = Package{}
	mi := &file_pb_bp_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{102}
}

func (x *Package) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Package) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *Package) GetItemCd() map[int32]int64 {
	if x != nil {
		return x.ItemCd
	}
	return nil
}

func (x *Package) GetItems() map[int64]*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Package) GetPublicCd() int64 {
	if x != nil {
		return x.PublicCd
	}
	return 0
}

func (x *Package) GetChangeVersion() int32 {
	if x != nil {
		return x.ChangeVersion
	}
	return 0
}

type QuestData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StepId        uint32                 `protobuf:"varint,2,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	State         uint32                 `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	TargetNum     map[int32]int32        `protobuf:"bytes,4,rep,name=target_num,json=targetNum,proto3" json:"target_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TargetMaxNum  map[int32]int32        `protobuf:"bytes,5,rep,name=target_max_num,json=targetMaxNum,proto3" json:"target_max_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StepLimitTime int64                  `protobuf:"varint,6,opt,name=step_limit_time,json=stepLimitTime,proto3" json:"step_limit_time,omitempty"`
	StepStatus    EQuestStepStatus       `protobuf:"varint,7,opt,name=step_status,json=stepStatus,proto3,enum=EQuestStepStatus" json:"step_status,omitempty"`
	AddLimitTime  uint32                 `protobuf:"varint,8,opt,name=add_limit_time,json=addLimitTime,proto3" json:"add_limit_time,omitempty"`
	TargetType    map[int32]int32        `protobuf:"bytes,9,rep,name=target_type,json=targetType,proto3" json:"target_type,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestData) Reset() {
	*x = QuestData{}
	mi := &file_pb_bp_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestData) ProtoMessage() {}

func (x *QuestData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestData.ProtoReflect.Descriptor instead.
func (*QuestData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{103}
}

func (x *QuestData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestData) GetStepId() uint32 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *QuestData) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *QuestData) GetTargetNum() map[int32]int32 {
	if x != nil {
		return x.TargetNum
	}
	return nil
}

func (x *QuestData) GetTargetMaxNum() map[int32]int32 {
	if x != nil {
		return x.TargetMaxNum
	}
	return nil
}

func (x *QuestData) GetStepLimitTime() int64 {
	if x != nil {
		return x.StepLimitTime
	}
	return 0
}

func (x *QuestData) GetStepStatus() EQuestStepStatus {
	if x != nil {
		return x.StepStatus
	}
	return EQuestStepStatus_QuestStepGoing
}

func (x *QuestData) GetAddLimitTime() uint32 {
	if x != nil {
		return x.AddLimitTime
	}
	return 0
}

func (x *QuestData) GetTargetType() map[int32]int32 {
	if x != nil {
		return x.TargetType
	}
	return nil
}

type QuestHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StepHistory   map[uint32]uint32      `protobuf:"bytes,1,rep,name=step_history,json=stepHistory,proto3" json:"step_history,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuestHistory) Reset() {
	*x = QuestHistory{}
	mi := &file_pb_bp_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestHistory) ProtoMessage() {}

func (x *QuestHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestHistory.ProtoReflect.Descriptor instead.
func (*QuestHistory) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{104}
}

func (x *QuestHistory) GetStepHistory() map[uint32]uint32 {
	if x != nil {
		return x.StepHistory
	}
	return nil
}

type WorldQuestInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FinishPoints    uint32                 `protobuf:"varint,1,opt,name=finish_points,json=finishPoints,proto3" json:"finish_points,omitempty"`
	Rewards         []uint32               `protobuf:"varint,2,rep,packed,name=rewards,proto3" json:"rewards,omitempty"`
	ExceedingPoints uint32                 `protobuf:"varint,3,opt,name=exceeding_points,json=exceedingPoints,proto3" json:"exceeding_points,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WorldQuestInfo) Reset() {
	*x = WorldQuestInfo{}
	mi := &file_pb_bp_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldQuestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldQuestInfo) ProtoMessage() {}

func (x *WorldQuestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldQuestInfo.ProtoReflect.Descriptor instead.
func (*WorldQuestInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{105}
}

func (x *WorldQuestInfo) GetFinishPoints() uint32 {
	if x != nil {
		return x.FinishPoints
	}
	return 0
}

func (x *WorldQuestInfo) GetRewards() []uint32 {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *WorldQuestInfo) GetExceedingPoints() uint32 {
	if x != nil {
		return x.ExceedingPoints
	}
	return 0
}

type WorldQuestList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuestList     []int32                `protobuf:"varint,1,rep,packed,name=quest_list,json=questList,proto3" json:"quest_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorldQuestList) Reset() {
	*x = WorldQuestList{}
	mi := &file_pb_bp_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldQuestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldQuestList) ProtoMessage() {}

func (x *WorldQuestList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldQuestList.ProtoReflect.Descriptor instead.
func (*WorldQuestList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{106}
}

func (x *WorldQuestList) GetQuestList() []int32 {
	if x != nil {
		return x.QuestList
	}
	return nil
}

type QuestDataList struct {
	state                 protoimpl.MessageState     `protogen:"open.v1"`
	QuestMap              map[uint32]*QuestData      `protobuf:"bytes,1,rep,name=quest_map,json=questMap,proto3" json:"quest_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FinishQuest           map[uint32]bool            `protobuf:"bytes,2,rep,name=finish_quest,json=finishQuest,proto3" json:"finish_quest,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TrackingId            uint32                     `protobuf:"varint,3,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	FinishResetQuest      map[uint32]uint32          `protobuf:"bytes,4,rep,name=finish_reset_quest,json=finishResetQuest,proto3" json:"finish_reset_quest,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	HistoryMap            map[uint32]*QuestHistory   `protobuf:"bytes,5,rep,name=history_map,json=historyMap,proto3" json:"history_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WorldQuestTimeStamp   int64                      `protobuf:"varint,6,opt,name=world_quest_time_stamp,json=worldQuestTimeStamp,proto3" json:"world_quest_time_stamp,omitempty"`
	WorldQuestInfo        map[uint32]*WorldQuestInfo `protobuf:"bytes,7,rep,name=world_quest_info,json=worldQuestInfo,proto3" json:"world_quest_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AllWorldQuestList     map[uint32]uint32          `protobuf:"bytes,8,rep,name=all_world_quest_list,json=allWorldQuestList,proto3" json:"all_world_quest_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	BlueWorldQuestMap     map[uint32]uint32          `protobuf:"bytes,9,rep,name=blue_world_quest_map,json=blueWorldQuestMap,proto3" json:"blue_world_quest_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FilterEventId         map[int32]*WorldQuestList  `protobuf:"bytes,10,rep,name=filter_event_id,json=filterEventId,proto3" json:"filter_event_id,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AcceptQuestList       []uint32                   `protobuf:"varint,11,rep,packed,name=accept_quest_list,json=acceptQuestList,proto3" json:"accept_quest_list,omitempty"`
	FollowWorldQuestList  []uint32                   `protobuf:"varint,12,rep,packed,name=follow_world_quest_list,json=followWorldQuestList,proto3" json:"follow_world_quest_list,omitempty"`
	TrackOptionalQuest    map[uint32]uint32          `protobuf:"bytes,13,rep,name=track_optional_quest,json=trackOptionalQuest,proto3" json:"track_optional_quest,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FinishResetQuestCount map[uint32]uint32          `protobuf:"bytes,14,rep,name=finish_reset_quest_count,json=finishResetQuestCount,proto3" json:"finish_reset_quest_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AcceptQuestMap        map[uint32]bool            `protobuf:"bytes,15,rep,name=accept_quest_map,json=acceptQuestMap,proto3" json:"accept_quest_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Version               uint64                     `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QuestDataList) Reset() {
	*x = QuestDataList{}
	mi := &file_pb_bp_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestDataList) ProtoMessage() {}

func (x *QuestDataList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestDataList.ProtoReflect.Descriptor instead.
func (*QuestDataList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{107}
}

func (x *QuestDataList) GetQuestMap() map[uint32]*QuestData {
	if x != nil {
		return x.QuestMap
	}
	return nil
}

func (x *QuestDataList) GetFinishQuest() map[uint32]bool {
	if x != nil {
		return x.FinishQuest
	}
	return nil
}

func (x *QuestDataList) GetTrackingId() uint32 {
	if x != nil {
		return x.TrackingId
	}
	return 0
}

func (x *QuestDataList) GetFinishResetQuest() map[uint32]uint32 {
	if x != nil {
		return x.FinishResetQuest
	}
	return nil
}

func (x *QuestDataList) GetHistoryMap() map[uint32]*QuestHistory {
	if x != nil {
		return x.HistoryMap
	}
	return nil
}

func (x *QuestDataList) GetWorldQuestTimeStamp() int64 {
	if x != nil {
		return x.WorldQuestTimeStamp
	}
	return 0
}

func (x *QuestDataList) GetWorldQuestInfo() map[uint32]*WorldQuestInfo {
	if x != nil {
		return x.WorldQuestInfo
	}
	return nil
}

func (x *QuestDataList) GetAllWorldQuestList() map[uint32]uint32 {
	if x != nil {
		return x.AllWorldQuestList
	}
	return nil
}

func (x *QuestDataList) GetBlueWorldQuestMap() map[uint32]uint32 {
	if x != nil {
		return x.BlueWorldQuestMap
	}
	return nil
}

func (x *QuestDataList) GetFilterEventId() map[int32]*WorldQuestList {
	if x != nil {
		return x.FilterEventId
	}
	return nil
}

func (x *QuestDataList) GetAcceptQuestList() []uint32 {
	if x != nil {
		return x.AcceptQuestList
	}
	return nil
}

func (x *QuestDataList) GetFollowWorldQuestList() []uint32 {
	if x != nil {
		return x.FollowWorldQuestList
	}
	return nil
}

func (x *QuestDataList) GetTrackOptionalQuest() map[uint32]uint32 {
	if x != nil {
		return x.TrackOptionalQuest
	}
	return nil
}

func (x *QuestDataList) GetFinishResetQuestCount() map[uint32]uint32 {
	if x != nil {
		return x.FinishResetQuestCount
	}
	return nil
}

func (x *QuestDataList) GetAcceptQuestMap() map[uint32]bool {
	if x != nil {
		return x.AcceptQuestMap
	}
	return nil
}

func (x *QuestDataList) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MiscInfo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ExpressionIdsLearned map[int32]int32        `protobuf:"bytes,1,rep,name=expression_ids_learned,json=expressionIdsLearned,proto3" json:"expression_ids_learned,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MiscInfo) Reset() {
	*x = MiscInfo{}
	mi := &file_pb_bp_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MiscInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiscInfo) ProtoMessage() {}

func (x *MiscInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiscInfo.ProtoReflect.Descriptor instead.
func (*MiscInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{108}
}

func (x *MiscInfo) GetExpressionIdsLearned() map[int32]int32 {
	if x != nil {
		return x.ExpressionIdsLearned
	}
	return nil
}

type ExchangeItem struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ExchangeInfo  map[int32]*ExchangeInfo `protobuf:"bytes,1,rep,name=exchange_info,json=exchangeInfo,proto3" json:"exchange_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeItem) Reset() {
	*x = ExchangeItem{}
	mi := &file_pb_bp_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeItem) ProtoMessage() {}

func (x *ExchangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeItem.ProtoReflect.Descriptor instead.
func (*ExchangeItem) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{109}
}

func (x *ExchangeItem) GetExchangeInfo() map[int32]*ExchangeInfo {
	if x != nil {
		return x.ExchangeInfo
	}
	return nil
}

type ExchangeInfo struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeData  map[int32]*ExchangeData `protobuf:"bytes,2,rep,name=exchange_data,json=exchangeData,proto3" json:"exchange_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeInfo) Reset() {
	*x = ExchangeInfo{}
	mi := &file_pb_bp_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeInfo) ProtoMessage() {}

func (x *ExchangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeInfo.ProtoReflect.Descriptor instead.
func (*ExchangeInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{110}
}

func (x *ExchangeInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeInfo) GetExchangeData() map[int32]*ExchangeData {
	if x != nil {
		return x.ExchangeData
	}
	return nil
}

type ExchangeData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ItemConfigId     int32                  `protobuf:"varint,1,opt,name=item_config_id,json=itemConfigId,proto3" json:"item_config_id,omitempty"`
	Unlock           int32                  `protobuf:"varint,2,opt,name=unlock,proto3" json:"unlock,omitempty"`
	CurExchangeCount int32                  `protobuf:"varint,3,opt,name=cur_exchange_count,json=curExchangeCount,proto3" json:"cur_exchange_count,omitempty"`
	ExpireTime       int64                  `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	LastRefreshTime  int64                  `protobuf:"varint,5,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExchangeData) Reset() {
	*x = ExchangeData{}
	mi := &file_pb_bp_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeData) ProtoMessage() {}

func (x *ExchangeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeData.ProtoReflect.Descriptor instead.
func (*ExchangeData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{111}
}

func (x *ExchangeData) GetItemConfigId() int32 {
	if x != nil {
		return x.ItemConfigId
	}
	return 0
}

func (x *ExchangeData) GetUnlock() int32 {
	if x != nil {
		return x.Unlock
	}
	return 0
}

func (x *ExchangeData) GetCurExchangeCount() int32 {
	if x != nil {
		return x.CurExchangeCount
	}
	return 0
}

func (x *ExchangeData) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ExchangeData) GetLastRefreshTime() int64 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type EquipInfo struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	EquipSlot                  int32                  `protobuf:"varint,1,opt,name=equip_slot,json=equipSlot,proto3" json:"equip_slot,omitempty"`
	ItemUuid                   uint64                 `protobuf:"varint,2,opt,name=item_uuid,json=itemUuid,proto3" json:"item_uuid,omitempty"`
	EquipSlotRefineLevel       uint32                 `protobuf:"varint,3,opt,name=equip_slot_refine_level,json=equipSlotRefineLevel,proto3" json:"equip_slot_refine_level,omitempty"`
	EquipSlotRefineFailedCount uint32                 `protobuf:"varint,4,opt,name=equip_slot_refine_failed_count,json=equipSlotRefineFailedCount,proto3" json:"equip_slot_refine_failed_count,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *EquipInfo) Reset() {
	*x = EquipInfo{}
	mi := &file_pb_bp_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipInfo) ProtoMessage() {}

func (x *EquipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipInfo.ProtoReflect.Descriptor instead.
func (*EquipInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{112}
}

func (x *EquipInfo) GetEquipSlot() int32 {
	if x != nil {
		return x.EquipSlot
	}
	return 0
}

func (x *EquipInfo) GetItemUuid() uint64 {
	if x != nil {
		return x.ItemUuid
	}
	return 0
}

func (x *EquipInfo) GetEquipSlotRefineLevel() uint32 {
	if x != nil {
		return x.EquipSlotRefineLevel
	}
	return 0
}

func (x *EquipInfo) GetEquipSlotRefineFailedCount() uint32 {
	if x != nil {
		return x.EquipSlotRefineFailedCount
	}
	return 0
}

type EquipEnchantInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EnchantItemTypeId int32                  `protobuf:"varint,1,opt,name=enchant_item_type_id,json=enchantItemTypeId,proto3" json:"enchant_item_type_id,omitempty"`
	EnchantLevel      int32                  `protobuf:"varint,2,opt,name=enchant_level,json=enchantLevel,proto3" json:"enchant_level,omitempty"`
	EnchantType       EEquipEnchantType      `protobuf:"varint,3,opt,name=enchant_type,json=enchantType,proto3,enum=EEquipEnchantType" json:"enchant_type,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EquipEnchantInfo) Reset() {
	*x = EquipEnchantInfo{}
	mi := &file_pb_bp_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipEnchantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipEnchantInfo) ProtoMessage() {}

func (x *EquipEnchantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipEnchantInfo.ProtoReflect.Descriptor instead.
func (*EquipEnchantInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{113}
}

func (x *EquipEnchantInfo) GetEnchantItemTypeId() int32 {
	if x != nil {
		return x.EnchantItemTypeId
	}
	return 0
}

func (x *EquipEnchantInfo) GetEnchantLevel() int32 {
	if x != nil {
		return x.EnchantLevel
	}
	return 0
}

func (x *EquipEnchantInfo) GetEnchantType() EEquipEnchantType {
	if x != nil {
		return x.EnchantType
	}
	return EEquipEnchantType_EEquipEnchantNone
}

type EquipSuitInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SuitAttr      map[int32]int32        `protobuf:"bytes,3,rep,name=suit_attr,json=suitAttr,proto3" json:"suit_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AttrType      int32                  `protobuf:"varint,4,opt,name=attr_type,json=attrType,proto3" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EquipSuitInfo) Reset() {
	*x = EquipSuitInfo{}
	mi := &file_pb_bp_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipSuitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipSuitInfo) ProtoMessage() {}

func (x *EquipSuitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipSuitInfo.ProtoReflect.Descriptor instead.
func (*EquipSuitInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{114}
}

func (x *EquipSuitInfo) GetSuitAttr() map[int32]int32 {
	if x != nil {
		return x.SuitAttr
	}
	return nil
}

func (x *EquipSuitInfo) GetAttrType() int32 {
	if x != nil {
		return x.AttrType
	}
	return 0
}

type EquipList struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	EquipList       map[int32]*EquipInfo        `protobuf:"bytes,1,rep,name=equip_list,json=equipList,proto3" json:"equip_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EquipAttr       *EquipAttr                  `protobuf:"bytes,2,opt,name=equip_attr,json=equipAttr,proto3" json:"equip_attr,omitempty"`
	EquipRecastInfo map[uint64]*EquipAttr       `protobuf:"bytes,4,rep,name=equip_recast_info,json=equipRecastInfo,proto3" json:"equip_recast_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EquipEnchant    map[int64]*EquipEnchantInfo `protobuf:"bytes,5,rep,name=equip_enchant,json=equipEnchant,proto3" json:"equip_enchant,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SuitInfoDict    map[int32]*EquipSuitInfo    `protobuf:"bytes,6,rep,name=suit_info_dict,json=suitInfoDict,proto3" json:"suit_info_dict,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EquipList) Reset() {
	*x = EquipList{}
	mi := &file_pb_bp_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipList) ProtoMessage() {}

func (x *EquipList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipList.ProtoReflect.Descriptor instead.
func (*EquipList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{115}
}

func (x *EquipList) GetEquipList() map[int32]*EquipInfo {
	if x != nil {
		return x.EquipList
	}
	return nil
}

func (x *EquipList) GetEquipAttr() *EquipAttr {
	if x != nil {
		return x.EquipAttr
	}
	return nil
}

func (x *EquipList) GetEquipRecastInfo() map[uint64]*EquipAttr {
	if x != nil {
		return x.EquipRecastInfo
	}
	return nil
}

func (x *EquipList) GetEquipEnchant() map[int64]*EquipEnchantInfo {
	if x != nil {
		return x.EquipEnchant
	}
	return nil
}

func (x *EquipList) GetSuitInfoDict() map[int32]*EquipSuitInfo {
	if x != nil {
		return x.SuitInfoDict
	}
	return nil
}

type EnergyItem struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	EnergyLimit      uint32                 `protobuf:"varint,1,opt,name=energy_limit,json=energyLimit,proto3" json:"energy_limit,omitempty"`
	ExtraEnergyLimit uint32                 `protobuf:"varint,2,opt,name=extra_energy_limit,json=extraEnergyLimit,proto3" json:"extra_energy_limit,omitempty"`
	EnergyInfo       map[uint32]*EnergyInfo `protobuf:"bytes,3,rep,name=energy_info,json=energyInfo,proto3" json:"energy_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EnergyItem) Reset() {
	*x = EnergyItem{}
	mi := &file_pb_bp_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnergyItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyItem) ProtoMessage() {}

func (x *EnergyItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyItem.ProtoReflect.Descriptor instead.
func (*EnergyItem) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{116}
}

func (x *EnergyItem) GetEnergyLimit() uint32 {
	if x != nil {
		return x.EnergyLimit
	}
	return 0
}

func (x *EnergyItem) GetExtraEnergyLimit() uint32 {
	if x != nil {
		return x.ExtraEnergyLimit
	}
	return 0
}

func (x *EnergyItem) GetEnergyInfo() map[uint32]*EnergyInfo {
	if x != nil {
		return x.EnergyInfo
	}
	return nil
}

type EnergyInfo struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	EnergyValue    uint32                     `protobuf:"varint,1,opt,name=energy_value,json=energyValue,proto3" json:"energy_value,omitempty"`
	UnlockNum      uint32                     `protobuf:"varint,2,opt,name=unlock_num,json=unlockNum,proto3" json:"unlock_num,omitempty"`
	EnergyItemInfo map[uint32]*EnergyItemInfo `protobuf:"bytes,3,rep,name=energy_item_info,json=energyItemInfo,proto3" json:"energy_item_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EnergyInfo) Reset() {
	*x = EnergyInfo{}
	mi := &file_pb_bp_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnergyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyInfo) ProtoMessage() {}

func (x *EnergyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyInfo.ProtoReflect.Descriptor instead.
func (*EnergyInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{117}
}

func (x *EnergyInfo) GetEnergyValue() uint32 {
	if x != nil {
		return x.EnergyValue
	}
	return 0
}

func (x *EnergyInfo) GetUnlockNum() uint32 {
	if x != nil {
		return x.UnlockNum
	}
	return 0
}

func (x *EnergyInfo) GetEnergyItemInfo() map[uint32]*EnergyItemInfo {
	if x != nil {
		return x.EnergyItemInfo
	}
	return nil
}

type EnergyItemInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueId       uint32                 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	ColumnId      uint32                 `protobuf:"varint,2,opt,name=column_id,json=columnId,proto3" json:"column_id,omitempty"`
	RefineState   uint32                 `protobuf:"varint,3,opt,name=refine_state,json=refineState,proto3" json:"refine_state,omitempty"`
	GainTime      int64                  `protobuf:"varint,4,opt,name=gain_time,json=gainTime,proto3" json:"gain_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnergyItemInfo) Reset() {
	*x = EnergyItemInfo{}
	mi := &file_pb_bp_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnergyItemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergyItemInfo) ProtoMessage() {}

func (x *EnergyItemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergyItemInfo.ProtoReflect.Descriptor instead.
func (*EnergyItemInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{118}
}

func (x *EnergyItemInfo) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *EnergyItemInfo) GetColumnId() uint32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *EnergyItemInfo) GetRefineState() uint32 {
	if x != nil {
		return x.RefineState
	}
	return 0
}

func (x *EnergyItemInfo) GetGainTime() int64 {
	if x != nil {
		return x.GainTime
	}
	return 0
}

type MapData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarkDataMap   map[int32]*MarkData    `protobuf:"bytes,1,rep,name=mark_data_map,json=markDataMap,proto3" json:"mark_data_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AresMap       map[int32]bool         `protobuf:"bytes,2,rep,name=ares_map,json=aresMap,proto3" json:"ares_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MarkUuid      int32                  `protobuf:"varint,3,opt,name=mark_uuid,json=markUuid,proto3" json:"mark_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapData) Reset() {
	*x = MapData{}
	mi := &file_pb_bp_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapData) ProtoMessage() {}

func (x *MapData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapData.ProtoReflect.Descriptor instead.
func (*MapData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{119}
}

func (x *MapData) GetMarkDataMap() map[int32]*MarkData {
	if x != nil {
		return x.MarkDataMap
	}
	return nil
}

func (x *MapData) GetAresMap() map[int32]bool {
	if x != nil {
		return x.AresMap
	}
	return nil
}

func (x *MapData) GetMarkUuid() int32 {
	if x != nil {
		return x.MarkUuid
	}
	return 0
}

type MarkData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MarkInfoMap   map[int64]*MarkInfo    `protobuf:"bytes,2,rep,name=mark_info_map,json=markInfoMap,proto3" json:"mark_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MarkUuid      int32                  `protobuf:"varint,3,opt,name=mark_uuid,json=markUuid,proto3" json:"mark_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkData) Reset() {
	*x = MarkData{}
	mi := &file_pb_bp_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkData) ProtoMessage() {}

func (x *MarkData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkData.ProtoReflect.Descriptor instead.
func (*MarkData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{120}
}

func (x *MarkData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarkData) GetMarkInfoMap() map[int64]*MarkInfo {
	if x != nil {
		return x.MarkInfoMap
	}
	return nil
}

func (x *MarkData) GetMarkUuid() int32 {
	if x != nil {
		return x.MarkUuid
	}
	return 0
}

type MarkInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TagId         int64                  `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	IconId        uint32                 `protobuf:"varint,4,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Position      *MarkPosition          `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkInfo) Reset() {
	*x = MarkInfo{}
	mi := &file_pb_bp_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkInfo) ProtoMessage() {}

func (x *MarkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkInfo.ProtoReflect.Descriptor instead.
func (*MarkInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{121}
}

func (x *MarkInfo) GetTagId() int64 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *MarkInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MarkInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MarkInfo) GetIconId() uint32 {
	if x != nil {
		return x.IconId
	}
	return 0
}

func (x *MarkInfo) GetPosition() *MarkPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

type MarkPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             int32                  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkPosition) Reset() {
	*x = MarkPosition{}
	mi := &file_pb_bp_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkPosition) ProtoMessage() {}

func (x *MarkPosition) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkPosition.ProtoReflect.Descriptor instead.
func (*MarkPosition) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{122}
}

func (x *MarkPosition) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *MarkPosition) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type DungeonEnterLimit struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	EnterCount    map[int32]*DungeonEnterCount `protobuf:"bytes,1,rep,name=enter_count,json=enterCount,proto3" json:"enter_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DungeonEnterLimit) Reset() {
	*x = DungeonEnterLimit{}
	mi := &file_pb_bp_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonEnterLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEnterLimit) ProtoMessage() {}

func (x *DungeonEnterLimit) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEnterLimit.ProtoReflect.Descriptor instead.
func (*DungeonEnterLimit) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{123}
}

func (x *DungeonEnterLimit) GetEnterCount() map[int32]*DungeonEnterCount {
	if x != nil {
		return x.EnterCount
	}
	return nil
}

type DungeonEnterCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EnterTime     uint32                 `protobuf:"varint,1,opt,name=enter_time,json=enterTime,proto3" json:"enter_time,omitempty"`
	EnterCount    int32                  `protobuf:"varint,2,opt,name=enter_count,json=enterCount,proto3" json:"enter_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DungeonEnterCount) Reset() {
	*x = DungeonEnterCount{}
	mi := &file_pb_bp_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonEnterCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonEnterCount) ProtoMessage() {}

func (x *DungeonEnterCount) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonEnterCount.ProtoReflect.Descriptor instead.
func (*DungeonEnterCount) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{124}
}

func (x *DungeonEnterCount) GetEnterTime() uint32 {
	if x != nil {
		return x.EnterTime
	}
	return 0
}

func (x *DungeonEnterCount) GetEnterCount() int32 {
	if x != nil {
		return x.EnterCount
	}
	return 0
}

type DungeonWeekTargetList struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	WeekTarget    map[int32]*DungeonTargetProgress `protobuf:"bytes,1,rep,name=week_target,json=weekTarget,proto3" json:"week_target,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RefreshTime   uint32                           `protobuf:"varint,2,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DungeonWeekTargetList) Reset() {
	*x = DungeonWeekTargetList{}
	mi := &file_pb_bp_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonWeekTargetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonWeekTargetList) ProtoMessage() {}

func (x *DungeonWeekTargetList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonWeekTargetList.ProtoReflect.Descriptor instead.
func (*DungeonWeekTargetList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{125}
}

func (x *DungeonWeekTargetList) GetWeekTarget() map[int32]*DungeonTargetProgress {
	if x != nil {
		return x.WeekTarget
	}
	return nil
}

func (x *DungeonWeekTargetList) GetRefreshTime() uint32 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

type DungeonTargetProgress struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TargetId       int32                  `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetProgress int32                  `protobuf:"varint,2,opt,name=target_progress,json=targetProgress,proto3" json:"target_progress,omitempty"`
	AwardState     int32                  `protobuf:"varint,3,opt,name=award_state,json=awardState,proto3" json:"award_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DungeonTargetProgress) Reset() {
	*x = DungeonTargetProgress{}
	mi := &file_pb_bp_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonTargetProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonTargetProgress) ProtoMessage() {}

func (x *DungeonTargetProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonTargetProgress.ProtoReflect.Descriptor instead.
func (*DungeonTargetProgress) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{126}
}

func (x *DungeonTargetProgress) GetTargetId() int32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *DungeonTargetProgress) GetTargetProgress() int32 {
	if x != nil {
		return x.TargetProgress
	}
	return 0
}

func (x *DungeonTargetProgress) GetAwardState() int32 {
	if x != nil {
		return x.AwardState
	}
	return 0
}

type RaidRecord struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	BossProgress  map[int32]*BossProgress `protobuf:"bytes,2,rep,name=boss_progress,json=bossProgress,proto3" json:"boss_progress,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidRecord) Reset() {
	*x = RaidRecord{}
	mi := &file_pb_bp_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidRecord) ProtoMessage() {}

func (x *RaidRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidRecord.ProtoReflect.Descriptor instead.
func (*RaidRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{127}
}

func (x *RaidRecord) GetBossProgress() map[int32]*BossProgress {
	if x != nil {
		return x.BossProgress
	}
	return nil
}

type BossProgress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalAwardCnt int32                  `protobuf:"varint,1,opt,name=total_award_cnt,json=totalAwardCnt,proto3" json:"total_award_cnt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BossProgress) Reset() {
	*x = BossProgress{}
	mi := &file_pb_bp_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BossProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BossProgress) ProtoMessage() {}

func (x *BossProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BossProgress.ProtoReflect.Descriptor instead.
func (*BossProgress) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{128}
}

func (x *BossProgress) GetTotalAwardCnt() int32 {
	if x != nil {
		return x.TotalAwardCnt
	}
	return 0
}

type DungeonList struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CompleteDungeon        map[int32]*DungeonInfo `protobuf:"bytes,1,rep,name=complete_dungeon,json=completeDungeon,proto3" json:"complete_dungeon,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ResetTime              uint32                 `protobuf:"varint,2,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
	NormalDungeonPassCount uint32                 `protobuf:"varint,3,opt,name=normal_dungeon_pass_count,json=normalDungeonPassCount,proto3" json:"normal_dungeon_pass_count,omitempty"`
	DungeonEnterLimit      *DungeonEnterLimit     `protobuf:"bytes,4,opt,name=dungeon_enter_limit,json=dungeonEnterLimit,proto3" json:"dungeon_enter_limit,omitempty"`
	WeekTarget             *DungeonWeekTargetList `protobuf:"bytes,5,opt,name=week_target,json=weekTarget,proto3" json:"week_target,omitempty"`
	IsAssist               bool                   `protobuf:"varint,6,opt,name=is_assist,json=isAssist,proto3" json:"is_assist,omitempty"`
	RaidRecordTable        map[int32]*RaidRecord  `protobuf:"bytes,7,rep,name=raid_record_table,json=raidRecordTable,proto3" json:"raid_record_table,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DungeonList) Reset() {
	*x = DungeonList{}
	mi := &file_pb_bp_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonList) ProtoMessage() {}

func (x *DungeonList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonList.ProtoReflect.Descriptor instead.
func (*DungeonList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{129}
}

func (x *DungeonList) GetCompleteDungeon() map[int32]*DungeonInfo {
	if x != nil {
		return x.CompleteDungeon
	}
	return nil
}

func (x *DungeonList) GetResetTime() uint32 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

func (x *DungeonList) GetNormalDungeonPassCount() uint32 {
	if x != nil {
		return x.NormalDungeonPassCount
	}
	return 0
}

func (x *DungeonList) GetDungeonEnterLimit() *DungeonEnterLimit {
	if x != nil {
		return x.DungeonEnterLimit
	}
	return nil
}

func (x *DungeonList) GetWeekTarget() *DungeonWeekTargetList {
	if x != nil {
		return x.WeekTarget
	}
	return nil
}

func (x *DungeonList) GetIsAssist() bool {
	if x != nil {
		return x.IsAssist
	}
	return false
}

func (x *DungeonList) GetRaidRecordTable() map[int32]*RaidRecord {
	if x != nil {
		return x.RaidRecordTable
	}
	return nil
}

type UserFightAttr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurHp         int64                  `protobuf:"varint,1,opt,name=cur_hp,json=curHp,proto3" json:"cur_hp,omitempty"`
	MaxHp         int64                  `protobuf:"varint,2,opt,name=max_hp,json=maxHp,proto3" json:"max_hp,omitempty"`
	OriginEnergy  float32                `protobuf:"fixed32,3,opt,name=origin_energy,json=originEnergy,proto3" json:"origin_energy,omitempty"`
	ResourceIds   []uint32               `protobuf:"varint,4,rep,packed,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	Resources     []uint32               `protobuf:"varint,5,rep,packed,name=resources,proto3" json:"resources,omitempty"`
	IsDead        int32                  `protobuf:"varint,6,opt,name=is_dead,json=isDead,proto3" json:"is_dead,omitempty"`
	DeadTime      int64                  `protobuf:"varint,7,opt,name=dead_time,json=deadTime,proto3" json:"dead_time,omitempty"`
	ReviveId      int32                  `protobuf:"varint,8,opt,name=revive_id,json=reviveId,proto3" json:"revive_id,omitempty"`
	CdInfo        []*SkillCDInfo         `protobuf:"bytes,9,rep,name=cd_info,json=cdInfo,proto3" json:"cd_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserFightAttr) Reset() {
	*x = UserFightAttr{}
	mi := &file_pb_bp_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFightAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFightAttr) ProtoMessage() {}

func (x *UserFightAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFightAttr.ProtoReflect.Descriptor instead.
func (*UserFightAttr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{130}
}

func (x *UserFightAttr) GetCurHp() int64 {
	if x != nil {
		return x.CurHp
	}
	return 0
}

func (x *UserFightAttr) GetMaxHp() int64 {
	if x != nil {
		return x.MaxHp
	}
	return 0
}

func (x *UserFightAttr) GetOriginEnergy() float32 {
	if x != nil {
		return x.OriginEnergy
	}
	return 0
}

func (x *UserFightAttr) GetResourceIds() []uint32 {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *UserFightAttr) GetResources() []uint32 {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *UserFightAttr) GetIsDead() int32 {
	if x != nil {
		return x.IsDead
	}
	return 0
}

func (x *UserFightAttr) GetDeadTime() int64 {
	if x != nil {
		return x.DeadTime
	}
	return 0
}

func (x *UserFightAttr) GetReviveId() int32 {
	if x != nil {
		return x.ReviveId
	}
	return 0
}

func (x *UserFightAttr) GetCdInfo() []*SkillCDInfo {
	if x != nil {
		return x.CdInfo
	}
	return nil
}

type SkillCDInfo struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	SkillLevelId            int32                  `protobuf:"varint,1,opt,name=skill_level_id,json=skillLevelId,proto3" json:"skill_level_id,omitempty"`
	SkillBeginTime          int64                  `protobuf:"varint,2,opt,name=skill_begin_time,json=skillBeginTime,proto3" json:"skill_begin_time,omitempty"`
	Duration                int32                  `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	SkillCdType             uint32                 `protobuf:"varint,4,opt,name=skill_cd_type,json=skillCdType,proto3" json:"skill_cd_type,omitempty"`
	ProfessionHoldBeginTime int64                  `protobuf:"varint,6,opt,name=profession_hold_begin_time,json=professionHoldBeginTime,proto3" json:"profession_hold_begin_time,omitempty"`
	ChargeCount             int32                  `protobuf:"varint,7,opt,name=charge_count,json=chargeCount,proto3" json:"charge_count,omitempty"`
	ValidCdTime             int32                  `protobuf:"varint,8,opt,name=valid_cd_time,json=validCdTime,proto3" json:"valid_cd_time,omitempty"`
	SubCdRatio              int32                  `protobuf:"varint,9,opt,name=sub_cd_ratio,json=subCdRatio,proto3" json:"sub_cd_ratio,omitempty"`
	SubCdFixed              int64                  `protobuf:"varint,10,opt,name=sub_cd_fixed,json=subCdFixed,proto3" json:"sub_cd_fixed,omitempty"`
	AccelerateCdRatio       int32                  `protobuf:"varint,11,opt,name=accelerate_cd_ratio,json=accelerateCdRatio,proto3" json:"accelerate_cd_ratio,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SkillCDInfo) Reset() {
	*x = SkillCDInfo{}
	mi := &file_pb_bp_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SkillCDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkillCDInfo) ProtoMessage() {}

func (x *SkillCDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkillCDInfo.ProtoReflect.Descriptor instead.
func (*SkillCDInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{131}
}

func (x *SkillCDInfo) GetSkillLevelId() int32 {
	if x != nil {
		return x.SkillLevelId
	}
	return 0
}

func (x *SkillCDInfo) GetSkillBeginTime() int64 {
	if x != nil {
		return x.SkillBeginTime
	}
	return 0
}

func (x *SkillCDInfo) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SkillCDInfo) GetSkillCdType() uint32 {
	if x != nil {
		return x.SkillCdType
	}
	return 0
}

func (x *SkillCDInfo) GetProfessionHoldBeginTime() int64 {
	if x != nil {
		return x.ProfessionHoldBeginTime
	}
	return 0
}

func (x *SkillCDInfo) GetChargeCount() int32 {
	if x != nil {
		return x.ChargeCount
	}
	return 0
}

func (x *SkillCDInfo) GetValidCdTime() int32 {
	if x != nil {
		return x.ValidCdTime
	}
	return 0
}

func (x *SkillCDInfo) GetSubCdRatio() int32 {
	if x != nil {
		return x.SubCdRatio
	}
	return 0
}

func (x *SkillCDInfo) GetSubCdFixed() int64 {
	if x != nil {
		return x.SubCdFixed
	}
	return 0
}

func (x *SkillCDInfo) GetAccelerateCdRatio() int32 {
	if x != nil {
		return x.AccelerateCdRatio
	}
	return 0
}

type UnlockColorInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ColorInfoMap      map[int32]bool         `protobuf:"bytes,1,rep,name=color_info_map,json=colorInfoMap,proto3" json:"color_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ColorBlockInfoMap map[int32]bool         `protobuf:"bytes,2,rep,name=color_block_info_map,json=colorBlockInfoMap,proto3" json:"color_block_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UnlockColorInfo) Reset() {
	*x = UnlockColorInfo{}
	mi := &file_pb_bp_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockColorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockColorInfo) ProtoMessage() {}

func (x *UnlockColorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockColorInfo.ProtoReflect.Descriptor instead.
func (*UnlockColorInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{132}
}

func (x *UnlockColorInfo) GetColorInfoMap() map[int32]bool {
	if x != nil {
		return x.ColorInfoMap
	}
	return nil
}

func (x *UnlockColorInfo) GetColorBlockInfoMap() map[int32]bool {
	if x != nil {
		return x.ColorBlockInfoMap
	}
	return nil
}

type FashionAdvanceInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FashionId      int32                  `protobuf:"varint,1,opt,name=fashion_id,json=fashionId,proto3" json:"fashion_id,omitempty"`
	UsingAdvanceId int32                  `protobuf:"varint,2,opt,name=using_advance_id,json=usingAdvanceId,proto3" json:"using_advance_id,omitempty"`
	AdvanceIds     []int32                `protobuf:"varint,3,rep,packed,name=advance_ids,json=advanceIds,proto3" json:"advance_ids,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FashionAdvanceInfo) Reset() {
	*x = FashionAdvanceInfo{}
	mi := &file_pb_bp_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionAdvanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionAdvanceInfo) ProtoMessage() {}

func (x *FashionAdvanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionAdvanceInfo.ProtoReflect.Descriptor instead.
func (*FashionAdvanceInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{133}
}

func (x *FashionAdvanceInfo) GetFashionId() int32 {
	if x != nil {
		return x.FashionId
	}
	return 0
}

func (x *FashionAdvanceInfo) GetUsingAdvanceId() int32 {
	if x != nil {
		return x.UsingAdvanceId
	}
	return 0
}

func (x *FashionAdvanceInfo) GetAdvanceIds() []int32 {
	if x != nil {
		return x.AdvanceIds
	}
	return nil
}

type FashionMgr struct {
	state                  protoimpl.MessageState        `protogen:"open.v1"`
	WearInfo               map[int32]int32               `protobuf:"bytes,1,rep,name=wear_info,json=wearInfo,proto3" json:"wear_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FashionDatas           map[int32]*FashionColorInfo   `protobuf:"bytes,2,rep,name=fashion_datas,json=fashionDatas,proto3" json:"fashion_datas,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockColor            map[int32]*UnlockColorInfo    `protobuf:"bytes,3,rep,name=unlock_color,json=unlockColor,proto3" json:"unlock_color,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FashionReward          map[int32]bool                `protobuf:"bytes,4,rep,name=fashion_reward,json=fashionReward,proto3" json:"fashion_reward,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AllFashion             map[int32]bool                `protobuf:"bytes,5,rep,name=all_fashion,json=allFashion,proto3" json:"all_fashion,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AllRide                map[int32]bool                `protobuf:"bytes,6,rep,name=all_ride,json=allRide,proto3" json:"all_ride,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AllWeaponSkin          map[int32]bool                `protobuf:"bytes,7,rep,name=all_weapon_skin,json=allWeaponSkin,proto3" json:"all_weapon_skin,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FashionAdvance         map[int32]*FashionAdvanceInfo `protobuf:"bytes,8,rep,name=fashion_advance,json=fashionAdvance,proto3" json:"fashion_advance,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FashionCollectPoint    int32                         `protobuf:"varint,9,opt,name=fashion_collect_point,json=fashionCollectPoint,proto3" json:"fashion_collect_point,omitempty"`
	RideCollectPoint       int32                         `protobuf:"varint,10,opt,name=ride_collect_point,json=rideCollectPoint,proto3" json:"ride_collect_point,omitempty"`
	WeaponSkinCollectPoint int32                         `protobuf:"varint,11,opt,name=weapon_skin_collect_point,json=weaponSkinCollectPoint,proto3" json:"weapon_skin_collect_point,omitempty"`
	AllFashionNum          map[int32]int32               `protobuf:"bytes,12,rep,name=all_fashion_num,json=allFashionNum,proto3" json:"all_fashion_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AllRideNum             map[int32]int32               `protobuf:"bytes,13,rep,name=all_ride_num,json=allRideNum,proto3" json:"all_ride_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AllWeaponSkinNum       map[int32]int32               `protobuf:"bytes,14,rep,name=all_weapon_skin_num,json=allWeaponSkinNum,proto3" json:"all_weapon_skin_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	IsFashionInit          bool                          `protobuf:"varint,15,opt,name=is_fashion_init,json=isFashionInit,proto3" json:"is_fashion_init,omitempty"`
	IsRideInit             bool                          `protobuf:"varint,16,opt,name=is_ride_init,json=isRideInit,proto3" json:"is_ride_init,omitempty"`
	IsWeaponSkinInit       bool                          `protobuf:"varint,17,opt,name=is_weapon_skin_init,json=isWeaponSkinInit,proto3" json:"is_weapon_skin_init,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FashionMgr) Reset() {
	*x = FashionMgr{}
	mi := &file_pb_bp_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionMgr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionMgr) ProtoMessage() {}

func (x *FashionMgr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionMgr.ProtoReflect.Descriptor instead.
func (*FashionMgr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{134}
}

func (x *FashionMgr) GetWearInfo() map[int32]int32 {
	if x != nil {
		return x.WearInfo
	}
	return nil
}

func (x *FashionMgr) GetFashionDatas() map[int32]*FashionColorInfo {
	if x != nil {
		return x.FashionDatas
	}
	return nil
}

func (x *FashionMgr) GetUnlockColor() map[int32]*UnlockColorInfo {
	if x != nil {
		return x.UnlockColor
	}
	return nil
}

func (x *FashionMgr) GetFashionReward() map[int32]bool {
	if x != nil {
		return x.FashionReward
	}
	return nil
}

func (x *FashionMgr) GetAllFashion() map[int32]bool {
	if x != nil {
		return x.AllFashion
	}
	return nil
}

func (x *FashionMgr) GetAllRide() map[int32]bool {
	if x != nil {
		return x.AllRide
	}
	return nil
}

func (x *FashionMgr) GetAllWeaponSkin() map[int32]bool {
	if x != nil {
		return x.AllWeaponSkin
	}
	return nil
}

func (x *FashionMgr) GetFashionAdvance() map[int32]*FashionAdvanceInfo {
	if x != nil {
		return x.FashionAdvance
	}
	return nil
}

func (x *FashionMgr) GetFashionCollectPoint() int32 {
	if x != nil {
		return x.FashionCollectPoint
	}
	return 0
}

func (x *FashionMgr) GetRideCollectPoint() int32 {
	if x != nil {
		return x.RideCollectPoint
	}
	return 0
}

func (x *FashionMgr) GetWeaponSkinCollectPoint() int32 {
	if x != nil {
		return x.WeaponSkinCollectPoint
	}
	return 0
}

func (x *FashionMgr) GetAllFashionNum() map[int32]int32 {
	if x != nil {
		return x.AllFashionNum
	}
	return nil
}

func (x *FashionMgr) GetAllRideNum() map[int32]int32 {
	if x != nil {
		return x.AllRideNum
	}
	return nil
}

func (x *FashionMgr) GetAllWeaponSkinNum() map[int32]int32 {
	if x != nil {
		return x.AllWeaponSkinNum
	}
	return nil
}

func (x *FashionMgr) GetIsFashionInit() bool {
	if x != nil {
		return x.IsFashionInit
	}
	return false
}

func (x *FashionMgr) GetIsRideInit() bool {
	if x != nil {
		return x.IsRideInit
	}
	return false
}

func (x *FashionMgr) GetIsWeaponSkinInit() bool {
	if x != nil {
		return x.IsWeaponSkinInit
	}
	return false
}

type ProfileList struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	UnlockProfileList map[int32]bool         `protobuf:"bytes,1,rep,name=unlock_profile_list,json=unlockProfileList,proto3" json:"unlock_profile_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProfileList) Reset() {
	*x = ProfileList{}
	mi := &file_pb_bp_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfileList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileList) ProtoMessage() {}

func (x *ProfileList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileList.ProtoReflect.Descriptor instead.
func (*ProfileList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{135}
}

func (x *ProfileList) GetUnlockProfileList() map[int32]bool {
	if x != nil {
		return x.UnlockProfileList
	}
	return nil
}

type PlayHelper struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DisplayedHelperList map[int32]bool         `protobuf:"bytes,1,rep,name=displayed_helper_list,json=displayedHelperList,proto3" json:"displayed_helper_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	CompletedGuide      map[int32]bool         `protobuf:"bytes,2,rep,name=completed_guide,json=completedGuide,proto3" json:"completed_guide,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PlayHelper) Reset() {
	*x = PlayHelper{}
	mi := &file_pb_bp_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayHelper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayHelper) ProtoMessage() {}

func (x *PlayHelper) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayHelper.ProtoReflect.Descriptor instead.
func (*PlayHelper) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{136}
}

func (x *PlayHelper) GetDisplayedHelperList() map[int32]bool {
	if x != nil {
		return x.DisplayedHelperList
	}
	return nil
}

func (x *PlayHelper) GetCompletedGuide() map[int32]bool {
	if x != nil {
		return x.CompletedGuide
	}
	return nil
}

type CounterList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CounterMap    map[int32]*CounterInfo `protobuf:"bytes,1,rep,name=counter_map,json=counterMap,proto3" json:"counter_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterList) Reset() {
	*x = CounterList{}
	mi := &file_pb_bp_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterList) ProtoMessage() {}

func (x *CounterList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterList.ProtoReflect.Descriptor instead.
func (*CounterList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{137}
}

func (x *CounterList) GetCounterMap() map[int32]*CounterInfo {
	if x != nil {
		return x.CounterMap
	}
	return nil
}

type CounterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Counter       int64                  `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterInfo) Reset() {
	*x = CounterInfo{}
	mi := &file_pb_bp_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterInfo) ProtoMessage() {}

func (x *CounterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterInfo.ProtoReflect.Descriptor instead.
func (*CounterInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{138}
}

func (x *CounterInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CounterInfo) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

type PersonalObject struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	SceneObjData  map[int32]*ScenePersonalObject `protobuf:"bytes,1,rep,name=scene_obj_data,json=sceneObjData,proto3" json:"scene_obj_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PersonalObject) Reset() {
	*x = PersonalObject{}
	mi := &file_pb_bp_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalObject) ProtoMessage() {}

func (x *PersonalObject) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalObject.ProtoReflect.Descriptor instead.
func (*PersonalObject) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{139}
}

func (x *PersonalObject) GetSceneObjData() map[int32]*ScenePersonalObject {
	if x != nil {
		return x.SceneObjData
	}
	return nil
}

type ScenePersonalObject struct {
	state           protoimpl.MessageState                       `protogen:"open.v1"`
	PersonalObjData map[int64]*ServerStateObjectInteractionParam `protobuf:"bytes,1,rep,name=personal_obj_data,json=personalObjData,proto3" json:"personal_obj_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ScenePersonalObject) Reset() {
	*x = ScenePersonalObject{}
	mi := &file_pb_bp_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScenePersonalObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScenePersonalObject) ProtoMessage() {}

func (x *ScenePersonalObject) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScenePersonalObject.ProtoReflect.Descriptor instead.
func (*ScenePersonalObject) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{140}
}

func (x *ScenePersonalObject) GetPersonalObjData() map[int64]*ServerStateObjectInteractionParam {
	if x != nil {
		return x.PersonalObjData
	}
	return nil
}

type ServerStateObjectInteractionParam struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ObjUuid             int64                  `protobuf:"varint,1,opt,name=obj_uuid,json=objUuid,proto3" json:"obj_uuid,omitempty"`
	StateValue          int32                  `protobuf:"varint,2,opt,name=state_value,json=stateValue,proto3" json:"state_value,omitempty"`
	LastInteractionTime int64                  `protobuf:"varint,3,opt,name=last_interaction_time,json=lastInteractionTime,proto3" json:"last_interaction_time,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ServerStateObjectInteractionParam) Reset() {
	*x = ServerStateObjectInteractionParam{}
	mi := &file_pb_bp_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStateObjectInteractionParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStateObjectInteractionParam) ProtoMessage() {}

func (x *ServerStateObjectInteractionParam) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStateObjectInteractionParam.ProtoReflect.Descriptor instead.
func (*ServerStateObjectInteractionParam) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{141}
}

func (x *ServerStateObjectInteractionParam) GetObjUuid() int64 {
	if x != nil {
		return x.ObjUuid
	}
	return 0
}

func (x *ServerStateObjectInteractionParam) GetStateValue() int32 {
	if x != nil {
		return x.StateValue
	}
	return 0
}

func (x *ServerStateObjectInteractionParam) GetLastInteractionTime() int64 {
	if x != nil {
		return x.LastInteractionTime
	}
	return 0
}

type RoleLevel struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Level              int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	CurLevelExp        int64                  `protobuf:"varint,2,opt,name=cur_level_exp,json=curLevelExp,proto3" json:"cur_level_exp,omitempty"`
	ReceivedLevelList  map[int32]bool         `protobuf:"bytes,3,rep,name=received_level_list,json=receivedLevelList,proto3" json:"received_level_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ProficiencyInfo    *LevelProficiency      `protobuf:"bytes,4,opt,name=proficiency_info,json=proficiencyInfo,proto3" json:"proficiency_info,omitempty"`
	ActiveExpMap       map[int32]int64        `protobuf:"bytes,5,rep,name=active_exp_map,json=activeExpMap,proto3" json:"active_exp_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	LastSeasonDay      int32                  `protobuf:"varint,6,opt,name=last_season_day,json=lastSeasonDay,proto3" json:"last_season_day,omitempty"`
	BlessExpPool       int64                  `protobuf:"varint,7,opt,name=bless_exp_pool,json=blessExpPool,proto3" json:"bless_exp_pool,omitempty"`
	GrantBlessExp      int64                  `protobuf:"varint,8,opt,name=grant_bless_exp,json=grantBlessExp,proto3" json:"grant_bless_exp,omitempty"`
	AccumulateBlessExp int64                  `protobuf:"varint,9,opt,name=accumulate_bless_exp,json=accumulateBlessExp,proto3" json:"accumulate_bless_exp,omitempty"`
	AccumulateExp      int64                  `protobuf:"varint,10,opt,name=accumulate_exp,json=accumulateExp,proto3" json:"accumulate_exp,omitempty"`
	PrevSeasonMaxLv    int32                  `protobuf:"varint,11,opt,name=prev_season_max_lv,json=prevSeasonMaxLv,proto3" json:"prev_season_max_lv,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RoleLevel) Reset() {
	*x = RoleLevel{}
	mi := &file_pb_bp_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleLevel) ProtoMessage() {}

func (x *RoleLevel) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleLevel.ProtoReflect.Descriptor instead.
func (*RoleLevel) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{142}
}

func (x *RoleLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *RoleLevel) GetCurLevelExp() int64 {
	if x != nil {
		return x.CurLevelExp
	}
	return 0
}

func (x *RoleLevel) GetReceivedLevelList() map[int32]bool {
	if x != nil {
		return x.ReceivedLevelList
	}
	return nil
}

func (x *RoleLevel) GetProficiencyInfo() *LevelProficiency {
	if x != nil {
		return x.ProficiencyInfo
	}
	return nil
}

func (x *RoleLevel) GetActiveExpMap() map[int32]int64 {
	if x != nil {
		return x.ActiveExpMap
	}
	return nil
}

func (x *RoleLevel) GetLastSeasonDay() int32 {
	if x != nil {
		return x.LastSeasonDay
	}
	return 0
}

func (x *RoleLevel) GetBlessExpPool() int64 {
	if x != nil {
		return x.BlessExpPool
	}
	return 0
}

func (x *RoleLevel) GetGrantBlessExp() int64 {
	if x != nil {
		return x.GrantBlessExp
	}
	return 0
}

func (x *RoleLevel) GetAccumulateBlessExp() int64 {
	if x != nil {
		return x.AccumulateBlessExp
	}
	return 0
}

func (x *RoleLevel) GetAccumulateExp() int64 {
	if x != nil {
		return x.AccumulateExp
	}
	return 0
}

func (x *RoleLevel) GetPrevSeasonMaxLv() int32 {
	if x != nil {
		return x.PrevSeasonMaxLv
	}
	return 0
}

type LevelProficiency struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	UsingProficiencyMap  map[int32]int32              `protobuf:"bytes,1,rep,name=using_proficiency_map,json=usingProficiencyMap,proto3" json:"using_proficiency_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	UnlockProficiencyMap map[int32]*UnlockProficiency `protobuf:"bytes,2,rep,name=unlock_proficiency_map,json=unlockProficiencyMap,proto3" json:"unlock_proficiency_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LevelProficiency) Reset() {
	*x = LevelProficiency{}
	mi := &file_pb_bp_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LevelProficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelProficiency) ProtoMessage() {}

func (x *LevelProficiency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelProficiency.ProtoReflect.Descriptor instead.
func (*LevelProficiency) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{143}
}

func (x *LevelProficiency) GetUsingProficiencyMap() map[int32]int32 {
	if x != nil {
		return x.UsingProficiencyMap
	}
	return nil
}

func (x *LevelProficiency) GetUnlockProficiencyMap() map[int32]*UnlockProficiency {
	if x != nil {
		return x.UnlockProficiencyMap
	}
	return nil
}

type UnlockProficiency struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UnlockBufferId []int32                `protobuf:"varint,1,rep,packed,name=unlock_buffer_id,json=unlockBufferId,proto3" json:"unlock_buffer_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UnlockProficiency) Reset() {
	*x = UnlockProficiency{}
	mi := &file_pb_bp_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockProficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockProficiency) ProtoMessage() {}

func (x *UnlockProficiency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockProficiency.ProtoReflect.Descriptor instead.
func (*UnlockProficiency) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{144}
}

func (x *UnlockProficiency) GetUnlockBufferId() []int32 {
	if x != nil {
		return x.UnlockBufferId
	}
	return nil
}

type Pivot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pivots        map[int32]*PivotInfo   `protobuf:"bytes,1,rep,name=pivots,proto3" json:"pivots,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MapPivots     map[int32]*PivotInfo   `protobuf:"bytes,2,rep,name=map_pivots,json=mapPivots,proto3" json:"map_pivots,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pivot) Reset() {
	*x = Pivot{}
	mi := &file_pb_bp_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pivot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pivot) ProtoMessage() {}

func (x *Pivot) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pivot.ProtoReflect.Descriptor instead.
func (*Pivot) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{145}
}

func (x *Pivot) GetPivots() map[int32]*PivotInfo {
	if x != nil {
		return x.Pivots
	}
	return nil
}

func (x *Pivot) GetMapPivots() map[int32]*PivotInfo {
	if x != nil {
		return x.MapPivots
	}
	return nil
}

type PivotInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BreakPoint      []int32                `protobuf:"varint,2,rep,packed,name=break_point,json=breakPoint,proto3" json:"break_point,omitempty"`
	RewardStage     []int32                `protobuf:"varint,3,rep,packed,name=reward_stage,json=rewardStage,proto3" json:"reward_stage,omitempty"`
	RewardFullState int32                  `protobuf:"varint,4,opt,name=reward_full_state,json=rewardFullState,proto3" json:"reward_full_state,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PivotInfo) Reset() {
	*x = PivotInfo{}
	mi := &file_pb_bp_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PivotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotInfo) ProtoMessage() {}

func (x *PivotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotInfo.ProtoReflect.Descriptor instead.
func (*PivotInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{146}
}

func (x *PivotInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PivotInfo) GetBreakPoint() []int32 {
	if x != nil {
		return x.BreakPoint
	}
	return nil
}

func (x *PivotInfo) GetRewardStage() []int32 {
	if x != nil {
		return x.RewardStage
	}
	return nil
}

func (x *PivotInfo) GetRewardFullState() int32 {
	if x != nil {
		return x.RewardFullState
	}
	return 0
}

type TransferPoint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Points        map[int32]int32        `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferPoint) Reset() {
	*x = TransferPoint{}
	mi := &file_pb_bp_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPoint) ProtoMessage() {}

func (x *TransferPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPoint.ProtoReflect.Descriptor instead.
func (*TransferPoint) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{147}
}

func (x *TransferPoint) GetPoints() map[int32]int32 {
	if x != nil {
		return x.Points
	}
	return nil
}

type PlanetMemory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PassRoom      []int32                `protobuf:"varint,1,rep,packed,name=pass_room,json=passRoom,proto3" json:"pass_room,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanetMemory) Reset() {
	*x = PlanetMemory{}
	mi := &file_pb_bp_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanetMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanetMemory) ProtoMessage() {}

func (x *PlanetMemory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanetMemory.ProtoReflect.Descriptor instead.
func (*PlanetMemory) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{148}
}

func (x *PlanetMemory) GetPassRoom() []int32 {
	if x != nil {
		return x.PassRoom
	}
	return nil
}

type SeasonTarget struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	TargetInfo    map[int32]*SeasonTargetInfo `protobuf:"bytes,1,rep,name=target_info,json=targetInfo,proto3" json:"target_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeasonTarget) Reset() {
	*x = SeasonTarget{}
	mi := &file_pb_bp_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTarget) ProtoMessage() {}

func (x *SeasonTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTarget.ProtoReflect.Descriptor instead.
func (*SeasonTarget) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{149}
}

func (x *SeasonTarget) GetTargetInfo() map[int32]*SeasonTargetInfo {
	if x != nil {
		return x.TargetInfo
	}
	return nil
}

type SeasonTargetInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TargetId       int32                  `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetProgress int32                  `protobuf:"varint,2,opt,name=target_progress,json=targetProgress,proto3" json:"target_progress,omitempty"`
	AwardState     int32                  `protobuf:"varint,3,opt,name=award_state,json=awardState,proto3" json:"award_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SeasonTargetInfo) Reset() {
	*x = SeasonTargetInfo{}
	mi := &file_pb_bp_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonTargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonTargetInfo) ProtoMessage() {}

func (x *SeasonTargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonTargetInfo.ProtoReflect.Descriptor instead.
func (*SeasonTargetInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{150}
}

func (x *SeasonTargetInfo) GetTargetId() int32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *SeasonTargetInfo) GetTargetProgress() int32 {
	if x != nil {
		return x.TargetProgress
	}
	return 0
}

func (x *SeasonTargetInfo) GetAwardState() int32 {
	if x != nil {
		return x.AwardState
	}
	return 0
}

type RedDotData struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PermanentClosedRedDot map[int32]bool         `protobuf:"bytes,1,rep,name=permanent_closed_red_dot,json=permanentClosedRedDot,proto3" json:"permanent_closed_red_dot,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RedDotCount           map[int32]int32        `protobuf:"bytes,2,rep,name=red_dot_count,json=redDotCount,proto3" json:"red_dot_count,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RedDotData) Reset() {
	*x = RedDotData{}
	mi := &file_pb_bp_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedDotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedDotData) ProtoMessage() {}

func (x *RedDotData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedDotData.ProtoReflect.Descriptor instead.
func (*RedDotData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{151}
}

func (x *RedDotData) GetPermanentClosedRedDot() map[int32]bool {
	if x != nil {
		return x.PermanentClosedRedDot
	}
	return nil
}

func (x *RedDotData) GetRedDotCount() map[int32]int32 {
	if x != nil {
		return x.RedDotCount
	}
	return nil
}

type Resonance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resonances    map[uint32]int64       `protobuf:"bytes,1,rep,name=resonances,proto3" json:"resonances,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Installed     []uint32               `protobuf:"varint,2,rep,packed,name=installed,proto3" json:"installed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resonance) Reset() {
	*x = Resonance{}
	mi := &file_pb_bp_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resonance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resonance) ProtoMessage() {}

func (x *Resonance) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resonance.ProtoReflect.Descriptor instead.
func (*Resonance) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{152}
}

func (x *Resonance) GetResonances() map[uint32]int64 {
	if x != nil {
		return x.Resonances
	}
	return nil
}

func (x *Resonance) GetInstalled() []uint32 {
	if x != nil {
		return x.Installed
	}
	return nil
}

type CutsState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StateInfo     map[int32]int32        `protobuf:"bytes,1,rep,name=state_info,json=stateInfo,proto3" json:"state_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CutsState) Reset() {
	*x = CutsState{}
	mi := &file_pb_bp_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CutsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutsState) ProtoMessage() {}

func (x *CutsState) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutsState.ProtoReflect.Descriptor instead.
func (*CutsState) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{153}
}

func (x *CutsState) GetStateInfo() map[int32]int32 {
	if x != nil {
		return x.StateInfo
	}
	return nil
}

type InvestigateList struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	InvestigateMap     map[uint32]*InvestigateData `protobuf:"bytes,1,rep,name=investigate_map,json=investigateMap,proto3" json:"investigate_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompInvestigateMap map[uint32]bool             `protobuf:"bytes,2,rep,name=comp_investigate_map,json=compInvestigateMap,proto3" json:"comp_investigate_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	CompReasoningMap   []uint32                    `protobuf:"varint,3,rep,packed,name=comp_reasoning_map,json=compReasoningMap,proto3" json:"comp_reasoning_map,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InvestigateList) Reset() {
	*x = InvestigateList{}
	mi := &file_pb_bp_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvestigateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigateList) ProtoMessage() {}

func (x *InvestigateList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigateList.ProtoReflect.Descriptor instead.
func (*InvestigateList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{154}
}

func (x *InvestigateList) GetInvestigateMap() map[uint32]*InvestigateData {
	if x != nil {
		return x.InvestigateMap
	}
	return nil
}

func (x *InvestigateList) GetCompInvestigateMap() map[uint32]bool {
	if x != nil {
		return x.CompInvestigateMap
	}
	return nil
}

func (x *InvestigateList) GetCompReasoningMap() []uint32 {
	if x != nil {
		return x.CompReasoningMap
	}
	return nil
}

type InvestigateData struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            uint32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StepIds       map[int32]*InvestigateStep `protobuf:"bytes,2,rep,name=step_ids,json=stepIds,proto3" json:"step_ids,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvestigateData) Reset() {
	*x = InvestigateData{}
	mi := &file_pb_bp_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvestigateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigateData) ProtoMessage() {}

func (x *InvestigateData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigateData.ProtoReflect.Descriptor instead.
func (*InvestigateData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{155}
}

func (x *InvestigateData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InvestigateData) GetStepIds() map[int32]*InvestigateStep {
	if x != nil {
		return x.StepIds
	}
	return nil
}

type InvestigateStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clues         []int32                `protobuf:"varint,1,rep,packed,name=clues,proto3" json:"clues,omitempty"`
	ReasoningMap  map[int32]*AnswerList  `protobuf:"bytes,2,rep,name=reasoning_map,json=reasoningMap,proto3" json:"reasoning_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvestigateStep) Reset() {
	*x = InvestigateStep{}
	mi := &file_pb_bp_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvestigateStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvestigateStep) ProtoMessage() {}

func (x *InvestigateStep) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvestigateStep.ProtoReflect.Descriptor instead.
func (*InvestigateStep) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{156}
}

func (x *InvestigateStep) GetClues() []int32 {
	if x != nil {
		return x.Clues
	}
	return nil
}

func (x *InvestigateStep) GetReasoningMap() map[int32]*AnswerList {
	if x != nil {
		return x.ReasoningMap
	}
	return nil
}

type AnswerList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Answers       []int32                `protobuf:"varint,1,rep,packed,name=answers,proto3" json:"answers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnswerList) Reset() {
	*x = AnswerList{}
	mi := &file_pb_bp_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnswerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerList) ProtoMessage() {}

func (x *AnswerList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerList.ProtoReflect.Descriptor instead.
func (*AnswerList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{157}
}

func (x *AnswerList) GetAnswers() []int32 {
	if x != nil {
		return x.Answers
	}
	return nil
}

type ParkourRecordList struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	RecordList    map[uint32]*ParkourRecord `protobuf:"bytes,1,rep,name=record_list,json=recordList,proto3" json:"record_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParkourRecordList) Reset() {
	*x = ParkourRecordList{}
	mi := &file_pb_bp_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParkourRecordList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkourRecordList) ProtoMessage() {}

func (x *ParkourRecordList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkourRecordList.ProtoReflect.Descriptor instead.
func (*ParkourRecordList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{158}
}

func (x *ParkourRecordList) GetRecordList() map[uint32]*ParkourRecord {
	if x != nil {
		return x.RecordList
	}
	return nil
}

type ParkourRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          uint32                 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	State         uint32                 `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	PerfectTime   uint32                 `protobuf:"varint,3,opt,name=perfect_time,json=perfectTime,proto3" json:"perfect_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParkourRecord) Reset() {
	*x = ParkourRecord{}
	mi := &file_pb_bp_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParkourRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParkourRecord) ProtoMessage() {}

func (x *ParkourRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParkourRecord.ProtoReflect.Descriptor instead.
func (*ParkourRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{159}
}

func (x *ParkourRecord) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ParkourRecord) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ParkourRecord) GetPerfectTime() uint32 {
	if x != nil {
		return x.PerfectTime
	}
	return 0
}

type InteractionInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	InteractionStage int32                  `protobuf:"varint,1,opt,name=interaction_stage,json=interactionStage,proto3" json:"interaction_stage,omitempty"`
	ActionId         int32                  `protobuf:"varint,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	OriginatorId     int64                  `protobuf:"varint,3,opt,name=originator_id,json=originatorId,proto3" json:"originator_id,omitempty"`
	InviteeId        int64                  `protobuf:"varint,4,opt,name=invitee_id,json=inviteeId,proto3" json:"invitee_id,omitempty"`
	IsOriginator     bool                   `protobuf:"varint,5,opt,name=is_originator,json=isOriginator,proto3" json:"is_originator,omitempty"`
	InteractionType  int32                  `protobuf:"varint,6,opt,name=interaction_type,json=interactionType,proto3" json:"interaction_type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InteractionInfo) Reset() {
	*x = InteractionInfo{}
	mi := &file_pb_bp_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InteractionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionInfo) ProtoMessage() {}

func (x *InteractionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionInfo.ProtoReflect.Descriptor instead.
func (*InteractionInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{160}
}

func (x *InteractionInfo) GetInteractionStage() int32 {
	if x != nil {
		return x.InteractionStage
	}
	return 0
}

func (x *InteractionInfo) GetActionId() int32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

func (x *InteractionInfo) GetOriginatorId() int64 {
	if x != nil {
		return x.OriginatorId
	}
	return 0
}

func (x *InteractionInfo) GetInviteeId() int64 {
	if x != nil {
		return x.InviteeId
	}
	return 0
}

func (x *InteractionInfo) GetIsOriginator() bool {
	if x != nil {
		return x.IsOriginator
	}
	return false
}

func (x *InteractionInfo) GetInteractionType() int32 {
	if x != nil {
		return x.InteractionType
	}
	return 0
}

type SeasonQuestList struct {
	state            protoimpl.MessageState      `protogen:"open.v1"`
	SeasonMap        map[uint32]*SeasonQuestData `protobuf:"bytes,1,rep,name=season_map,json=seasonMap,proto3" json:"season_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RefreshWeek      int32                       `protobuf:"varint,2,opt,name=refresh_week,json=refreshWeek,proto3" json:"refresh_week,omitempty"`
	RefreshTimeStamp int64                       `protobuf:"varint,3,opt,name=refresh_time_stamp,json=refreshTimeStamp,proto3" json:"refresh_time_stamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SeasonQuestList) Reset() {
	*x = SeasonQuestList{}
	mi := &file_pb_bp_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonQuestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonQuestList) ProtoMessage() {}

func (x *SeasonQuestList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonQuestList.ProtoReflect.Descriptor instead.
func (*SeasonQuestList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{161}
}

func (x *SeasonQuestList) GetSeasonMap() map[uint32]*SeasonQuestData {
	if x != nil {
		return x.SeasonMap
	}
	return nil
}

func (x *SeasonQuestList) GetRefreshWeek() int32 {
	if x != nil {
		return x.RefreshWeek
	}
	return 0
}

func (x *SeasonQuestList) GetRefreshTimeStamp() int64 {
	if x != nil {
		return x.RefreshTimeStamp
	}
	return 0
}

type SeasonQuestData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetNum     int32                  `protobuf:"varint,2,opt,name=target_num,json=targetNum,proto3" json:"target_num,omitempty"`
	Award         int32                  `protobuf:"varint,3,opt,name=award,proto3" json:"award,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeasonQuestData) Reset() {
	*x = SeasonQuestData{}
	mi := &file_pb_bp_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonQuestData) ProtoMessage() {}

func (x *SeasonQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonQuestData.ProtoReflect.Descriptor instead.
func (*SeasonQuestData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{162}
}

func (x *SeasonQuestData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeasonQuestData) GetTargetNum() int32 {
	if x != nil {
		return x.TargetNum
	}
	return 0
}

func (x *SeasonQuestData) GetAward() int32 {
	if x != nil {
		return x.Award
	}
	return 0
}

type RoleFace struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UnlockItemMap   map[int32]bool         `protobuf:"bytes,1,rep,name=unlock_item_map,json=unlockItemMap,proto3" json:"unlock_item_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SaveNeedConsume bool                   `protobuf:"varint,2,opt,name=save_need_consume,json=saveNeedConsume,proto3" json:"save_need_consume,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RoleFace) Reset() {
	*x = RoleFace{}
	mi := &file_pb_bp_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoleFace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleFace) ProtoMessage() {}

func (x *RoleFace) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleFace.ProtoReflect.Descriptor instead.
func (*RoleFace) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{163}
}

func (x *RoleFace) GetUnlockItemMap() map[int32]bool {
	if x != nil {
		return x.UnlockItemMap
	}
	return nil
}

func (x *RoleFace) GetSaveNeedConsume() bool {
	if x != nil {
		return x.SaveNeedConsume
	}
	return false
}

type MapBookInfoList struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	MapBookMap    map[uint32]*MapBookInfo `protobuf:"bytes,1,rep,name=map_book_map,json=mapBookMap,proto3" json:"map_book_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapBookInfoList) Reset() {
	*x = MapBookInfoList{}
	mi := &file_pb_bp_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapBookInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBookInfoList) ProtoMessage() {}

func (x *MapBookInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBookInfoList.ProtoReflect.Descriptor instead.
func (*MapBookInfoList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{164}
}

func (x *MapBookInfoList) GetMapBookMap() map[uint32]*MapBookInfo {
	if x != nil {
		return x.MapBookMap
	}
	return nil
}

type MapBookInfo struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            uint32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MapStickerMap map[uint32]*MapStickerInfo `protobuf:"bytes,2,rep,name=map_sticker_map,json=mapStickerMap,proto3" json:"map_sticker_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AwardFlag     uint32                     `protobuf:"varint,3,opt,name=award_flag,json=awardFlag,proto3" json:"award_flag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapBookInfo) Reset() {
	*x = MapBookInfo{}
	mi := &file_pb_bp_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapBookInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBookInfo) ProtoMessage() {}

func (x *MapBookInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBookInfo.ProtoReflect.Descriptor instead.
func (*MapBookInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{165}
}

func (x *MapBookInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MapBookInfo) GetMapStickerMap() map[uint32]*MapStickerInfo {
	if x != nil {
		return x.MapStickerMap
	}
	return nil
}

func (x *MapBookInfo) GetAwardFlag() uint32 {
	if x != nil {
		return x.AwardFlag
	}
	return 0
}

type MapStickerInfo struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	StickerMap    map[uint32]*MapStickerTaskInfo `protobuf:"bytes,1,rep,name=sticker_map,json=stickerMap,proto3" json:"sticker_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FinishMap     []uint32                       `protobuf:"varint,2,rep,packed,name=finish_map,json=finishMap,proto3" json:"finish_map,omitempty"`
	AwardFlag     uint32                         `protobuf:"varint,3,opt,name=award_flag,json=awardFlag,proto3" json:"award_flag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapStickerInfo) Reset() {
	*x = MapStickerInfo{}
	mi := &file_pb_bp_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapStickerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStickerInfo) ProtoMessage() {}

func (x *MapStickerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStickerInfo.ProtoReflect.Descriptor instead.
func (*MapStickerInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{166}
}

func (x *MapStickerInfo) GetStickerMap() map[uint32]*MapStickerTaskInfo {
	if x != nil {
		return x.StickerMap
	}
	return nil
}

func (x *MapStickerInfo) GetFinishMap() []uint32 {
	if x != nil {
		return x.FinishMap
	}
	return nil
}

func (x *MapStickerInfo) GetAwardFlag() uint32 {
	if x != nil {
		return x.AwardFlag
	}
	return 0
}

type MapStickerTaskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TargetNum     map[int32]int32        `protobuf:"bytes,2,rep,name=target_num,json=targetNum,proto3" json:"target_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MapStickerTaskInfo) Reset() {
	*x = MapStickerTaskInfo{}
	mi := &file_pb_bp_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapStickerTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStickerTaskInfo) ProtoMessage() {}

func (x *MapStickerTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStickerTaskInfo.ProtoReflect.Descriptor instead.
func (*MapStickerTaskInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{167}
}

func (x *MapStickerTaskInfo) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *MapStickerTaskInfo) GetTargetNum() map[int32]int32 {
	if x != nil {
		return x.TargetNum
	}
	return nil
}

type AntiAddictionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastTime      uint32                 `protobuf:"varint,1,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntiAddictionInfo) Reset() {
	*x = AntiAddictionInfo{}
	mi := &file_pb_bp_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntiAddictionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiAddictionInfo) ProtoMessage() {}

func (x *AntiAddictionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiAddictionInfo.ProtoReflect.Descriptor instead.
func (*AntiAddictionInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{168}
}

func (x *AntiAddictionInfo) GetLastTime() uint32 {
	if x != nil {
		return x.LastTime
	}
	return 0
}

type MonsterExploreList struct {
	state              protoimpl.MessageState        `protogen:"open.v1"`
	MonsterExploreList map[int32]*MonsterExploreInfo `protobuf:"bytes,1,rep,name=monster_explore_list,json=monsterExploreList,proto3" json:"monster_explore_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MonsterExploreList) Reset() {
	*x = MonsterExploreList{}
	mi := &file_pb_bp_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonsterExploreList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterExploreList) ProtoMessage() {}

func (x *MonsterExploreList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterExploreList.ProtoReflect.Descriptor instead.
func (*MonsterExploreList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{169}
}

func (x *MonsterExploreList) GetMonsterExploreList() map[int32]*MonsterExploreInfo {
	if x != nil {
		return x.MonsterExploreList
	}
	return nil
}

type MonsterExploreInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsUnlock      bool                   `protobuf:"varint,1,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	TargetNum     map[int32]int32        `protobuf:"bytes,2,rep,name=target_num,json=targetNum,proto3" json:"target_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AwardFlag     uint32                 `protobuf:"varint,3,opt,name=award_flag,json=awardFlag,proto3" json:"award_flag,omitempty"`
	IsFlag        bool                   `protobuf:"varint,4,opt,name=is_flag,json=isFlag,proto3" json:"is_flag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonsterExploreInfo) Reset() {
	*x = MonsterExploreInfo{}
	mi := &file_pb_bp_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonsterExploreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterExploreInfo) ProtoMessage() {}

func (x *MonsterExploreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterExploreInfo.ProtoReflect.Descriptor instead.
func (*MonsterExploreInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{170}
}

func (x *MonsterExploreInfo) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *MonsterExploreInfo) GetTargetNum() map[int32]int32 {
	if x != nil {
		return x.TargetNum
	}
	return nil
}

func (x *MonsterExploreInfo) GetAwardFlag() uint32 {
	if x != nil {
		return x.AwardFlag
	}
	return 0
}

func (x *MonsterExploreInfo) GetIsFlag() bool {
	if x != nil {
		return x.IsFlag
	}
	return false
}

type ShowPieceData struct {
	state                protoimpl.MessageState     `protogen:"open.v1"`
	OftenUseTypeList     map[int32]*ShowPieceIdList `protobuf:"bytes,1,rep,name=often_use_type_list,json=oftenUseTypeList,proto3" json:"often_use_type_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockTypeList       map[int32]*ShowPieceIdList `protobuf:"bytes,2,rep,name=unlock_type_list,json=unlockTypeList,proto3" json:"unlock_type_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RoulettePosPieceInfo map[int32]*ShowPiecePair   `protobuf:"bytes,3,rep,name=roulette_pos_piece_info,json=roulettePosPieceInfo,proto3" json:"roulette_pos_piece_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ShowPieceData) Reset() {
	*x = ShowPieceData{}
	mi := &file_pb_bp_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowPieceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPieceData) ProtoMessage() {}

func (x *ShowPieceData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPieceData.ProtoReflect.Descriptor instead.
func (*ShowPieceData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{171}
}

func (x *ShowPieceData) GetOftenUseTypeList() map[int32]*ShowPieceIdList {
	if x != nil {
		return x.OftenUseTypeList
	}
	return nil
}

func (x *ShowPieceData) GetUnlockTypeList() map[int32]*ShowPieceIdList {
	if x != nil {
		return x.UnlockTypeList
	}
	return nil
}

func (x *ShowPieceData) GetRoulettePosPieceInfo() map[int32]*ShowPiecePair {
	if x != nil {
		return x.RoulettePosPieceInfo
	}
	return nil
}

type ShowPiecePair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PieceType     EShowPieceType         `protobuf:"varint,1,opt,name=piece_type,json=pieceType,proto3,enum=EShowPieceType" json:"piece_type,omitempty"`
	PieceId       int32                  `protobuf:"varint,2,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowPiecePair) Reset() {
	*x = ShowPiecePair{}
	mi := &file_pb_bp_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowPiecePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPiecePair) ProtoMessage() {}

func (x *ShowPiecePair) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPiecePair.ProtoReflect.Descriptor instead.
func (*ShowPiecePair) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{172}
}

func (x *ShowPiecePair) GetPieceType() EShowPieceType {
	if x != nil {
		return x.PieceType
	}
	return EShowPieceType_ShowPieceNull
}

func (x *ShowPiecePair) GetPieceId() int32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

type ShowPieceIdList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PieceIds      []int32                `protobuf:"varint,1,rep,packed,name=piece_ids,json=pieceIds,proto3" json:"piece_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowPieceIdList) Reset() {
	*x = ShowPieceIdList{}
	mi := &file_pb_bp_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowPieceIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowPieceIdList) ProtoMessage() {}

func (x *ShowPieceIdList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowPieceIdList.ProtoReflect.Descriptor instead.
func (*ShowPieceIdList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{173}
}

func (x *ShowPieceIdList) GetPieceIds() []int32 {
	if x != nil {
		return x.PieceIds
	}
	return nil
}

type CollectionBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModBookMap    map[uint32]bool        `protobuf:"bytes,1,rep,name=mod_book_map,json=modBookMap,proto3" json:"mod_book_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectionBook) Reset() {
	*x = CollectionBook{}
	mi := &file_pb_bp_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectionBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionBook) ProtoMessage() {}

func (x *CollectionBook) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionBook.ProtoReflect.Descriptor instead.
func (*CollectionBook) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{174}
}

func (x *CollectionBook) GetModBookMap() map[uint32]bool {
	if x != nil {
		return x.ModBookMap
	}
	return nil
}

type NotGetProceedAwardInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AwardIdTimes  map[uint32]uint32      `protobuf:"bytes,1,rep,name=award_id_times,json=awardIdTimes,proto3" json:"award_id_times,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotGetProceedAwardInfo) Reset() {
	*x = NotGetProceedAwardInfo{}
	mi := &file_pb_bp_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotGetProceedAwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotGetProceedAwardInfo) ProtoMessage() {}

func (x *NotGetProceedAwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotGetProceedAwardInfo.ProtoReflect.Descriptor instead.
func (*NotGetProceedAwardInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{175}
}

func (x *NotGetProceedAwardInfo) GetAwardIdTimes() map[uint32]uint32 {
	if x != nil {
		return x.AwardIdTimes
	}
	return nil
}

type CookList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BookData      map[uint32]*CookBook   `protobuf:"bytes,1,rep,name=book_data,json=bookData,proto3" json:"book_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CookList) Reset() {
	*x = CookList{}
	mi := &file_pb_bp_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CookList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookList) ProtoMessage() {}

func (x *CookList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookList.ProtoReflect.Descriptor instead.
func (*CookList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{176}
}

func (x *CookList) GetBookData() map[uint32]*CookBook {
	if x != nil {
		return x.BookData
	}
	return nil
}

type CookBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreateTime    uint32                 `protobuf:"varint,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CookBook) Reset() {
	*x = CookBook{}
	mi := &file_pb_bp_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CookBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CookBook) ProtoMessage() {}

func (x *CookBook) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CookBook.ProtoReflect.Descriptor instead.
func (*CookBook) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{177}
}

func (x *CookBook) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type TimerRefreshDataList struct {
	state           protoimpl.MessageState       `protogen:"open.v1"`
	RefreshDataList map[uint32]*TimerRefreshList `protobuf:"bytes,1,rep,name=refresh_data_list,json=refreshDataList,proto3" json:"refresh_data_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TimerRefreshDataList) Reset() {
	*x = TimerRefreshDataList{}
	mi := &file_pb_bp_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerRefreshDataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerRefreshDataList) ProtoMessage() {}

func (x *TimerRefreshDataList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerRefreshDataList.ProtoReflect.Descriptor instead.
func (*TimerRefreshDataList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{178}
}

func (x *TimerRefreshDataList) GetRefreshDataList() map[uint32]*TimerRefreshList {
	if x != nil {
		return x.RefreshDataList
	}
	return nil
}

type TimerRefreshList struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	RefreshData   map[uint32]*TimerRefreshInfo `protobuf:"bytes,1,rep,name=refresh_data,json=refreshData,proto3" json:"refresh_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimerRefreshList) Reset() {
	*x = TimerRefreshList{}
	mi := &file_pb_bp_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerRefreshList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerRefreshList) ProtoMessage() {}

func (x *TimerRefreshList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerRefreshList.ProtoReflect.Descriptor instead.
func (*TimerRefreshList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{179}
}

func (x *TimerRefreshList) GetRefreshData() map[uint32]*TimerRefreshInfo {
	if x != nil {
		return x.RefreshData
	}
	return nil
}

type TimerRefreshInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	LastRefreshTime int64                  `protobuf:"varint,1,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TimerRefreshInfo) Reset() {
	*x = TimerRefreshInfo{}
	mi := &file_pb_bp_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimerRefreshInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerRefreshInfo) ProtoMessage() {}

func (x *TimerRefreshInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerRefreshInfo.ProtoReflect.Descriptor instead.
func (*TimerRefreshInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{180}
}

func (x *TimerRefreshInfo) GetLastRefreshTime() int64 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type ChallengeDungeonInfo struct {
	state              protoimpl.MessageState        `protogen:"open.v1"`
	DungeonInfo        map[int32]*DungeonInfo        `protobuf:"bytes,1,rep,name=dungeon_info,json=dungeonInfo,proto3" json:"dungeon_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DungeonTargetAward map[int32]*DungeonTargetAward `protobuf:"bytes,2,rep,name=dungeon_target_award,json=dungeonTargetAward,proto3" json:"dungeon_target_award,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChallengeDungeonInfo) Reset() {
	*x = ChallengeDungeonInfo{}
	mi := &file_pb_bp_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeDungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeDungeonInfo) ProtoMessage() {}

func (x *ChallengeDungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeDungeonInfo.ProtoReflect.Descriptor instead.
func (*ChallengeDungeonInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{181}
}

func (x *ChallengeDungeonInfo) GetDungeonInfo() map[int32]*DungeonInfo {
	if x != nil {
		return x.DungeonInfo
	}
	return nil
}

func (x *ChallengeDungeonInfo) GetDungeonTargetAward() map[int32]*DungeonTargetAward {
	if x != nil {
		return x.DungeonTargetAward
	}
	return nil
}

type DungeonTargetAward struct {
	state                 protoimpl.MessageState           `protogen:"open.v1"`
	DungeonTargetProgress map[int32]*DungeonTargetProgress `protobuf:"bytes,1,rep,name=dungeon_target_progress,json=dungeonTargetProgress,proto3" json:"dungeon_target_progress,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *DungeonTargetAward) Reset() {
	*x = DungeonTargetAward{}
	mi := &file_pb_bp_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonTargetAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonTargetAward) ProtoMessage() {}

func (x *DungeonTargetAward) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonTargetAward.ProtoReflect.Descriptor instead.
func (*DungeonTargetAward) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{182}
}

func (x *DungeonTargetAward) GetDungeonTargetProgress() map[int32]*DungeonTargetProgress {
	if x != nil {
		return x.DungeonTargetProgress
	}
	return nil
}

type SyncAwardData struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	LevelUpAwardInfos map[uint32]*LevelUpAward `protobuf:"bytes,1,rep,name=level_up_award_infos,json=levelUpAwardInfos,proto3" json:"level_up_award_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SyncAwardData) Reset() {
	*x = SyncAwardData{}
	mi := &file_pb_bp_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAwardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAwardData) ProtoMessage() {}

func (x *SyncAwardData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAwardData.ProtoReflect.Descriptor instead.
func (*SyncAwardData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{183}
}

func (x *SyncAwardData) GetLevelUpAwardInfos() map[uint32]*LevelUpAward {
	if x != nil {
		return x.LevelUpAwardInfos
	}
	return nil
}

type LevelUpAward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DropTimes     uint32                 `protobuf:"varint,1,opt,name=drop_times,json=dropTimes,proto3" json:"drop_times,omitempty"`
	LastDropTime  int64                  `protobuf:"varint,2,opt,name=last_drop_time,json=lastDropTime,proto3" json:"last_drop_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LevelUpAward) Reset() {
	*x = LevelUpAward{}
	mi := &file_pb_bp_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LevelUpAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelUpAward) ProtoMessage() {}

func (x *LevelUpAward) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelUpAward.ProtoReflect.Descriptor instead.
func (*LevelUpAward) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{184}
}

func (x *LevelUpAward) GetDropTimes() uint32 {
	if x != nil {
		return x.DropTimes
	}
	return 0
}

func (x *LevelUpAward) GetLastDropTime() int64 {
	if x != nil {
		return x.LastDropTime
	}
	return 0
}

type SeasonAchievementList struct {
	state                 protoimpl.MessageState        `protogen:"open.v1"`
	SeasonAchievementList map[uint32]*SeasonAchievement `protobuf:"bytes,1,rep,name=season_achievement_list,json=seasonAchievementList,proto3" json:"season_achievement_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HasInitDones          map[uint32]bool               `protobuf:"bytes,2,rep,name=has_init_dones,json=hasInitDones,proto3" json:"has_init_dones,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Version               uint64                        `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SeasonAchievementList) Reset() {
	*x = SeasonAchievementList{}
	mi := &file_pb_bp_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonAchievementList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonAchievementList) ProtoMessage() {}

func (x *SeasonAchievementList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonAchievementList.ProtoReflect.Descriptor instead.
func (*SeasonAchievementList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{185}
}

func (x *SeasonAchievementList) GetSeasonAchievementList() map[uint32]*SeasonAchievement {
	if x != nil {
		return x.SeasonAchievementList
	}
	return nil
}

func (x *SeasonAchievementList) GetHasInitDones() map[uint32]bool {
	if x != nil {
		return x.HasInitDones
	}
	return nil
}

func (x *SeasonAchievementList) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type SeasonAchievement struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	SeasonAchievement map[uint32]*Achievement `protobuf:"bytes,1,rep,name=season_achievement,json=seasonAchievement,proto3" json:"season_achievement,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SeasonAchievement) Reset() {
	*x = SeasonAchievement{}
	mi := &file_pb_bp_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonAchievement) ProtoMessage() {}

func (x *SeasonAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonAchievement.ProtoReflect.Descriptor instead.
func (*SeasonAchievement) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{186}
}

func (x *SeasonAchievement) GetSeasonAchievement() map[uint32]*Achievement {
	if x != nil {
		return x.SeasonAchievement
	}
	return nil
}

type Achievement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FinishNum     uint32                 `protobuf:"varint,1,opt,name=finish_num,json=finishNum,proto3" json:"finish_num,omitempty"`
	HasReceived   bool                   `protobuf:"varint,2,opt,name=has_received,json=hasReceived,proto3" json:"has_received,omitempty"`
	BeginProgress uint64                 `protobuf:"varint,3,opt,name=begin_progress,json=beginProgress,proto3" json:"begin_progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	mi := &file_pb_bp_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{187}
}

func (x *Achievement) GetFinishNum() uint32 {
	if x != nil {
		return x.FinishNum
	}
	return 0
}

func (x *Achievement) GetHasReceived() bool {
	if x != nil {
		return x.HasReceived
	}
	return false
}

func (x *Achievement) GetBeginProgress() uint64 {
	if x != nil {
		return x.BeginProgress
	}
	return 0
}

type SeasonRankList struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	SeasonRankList map[uint32]*SeasonRankInfo `protobuf:"bytes,1,rep,name=season_rank_list,json=seasonRankList,proto3" json:"season_rank_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ShowArmbandId  uint32                     `protobuf:"varint,2,opt,name=show_armband_id,json=showArmbandId,proto3" json:"show_armband_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SeasonRankList) Reset() {
	*x = SeasonRankList{}
	mi := &file_pb_bp_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonRankList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRankList) ProtoMessage() {}

func (x *SeasonRankList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRankList.ProtoReflect.Descriptor instead.
func (*SeasonRankList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{188}
}

func (x *SeasonRankList) GetSeasonRankList() map[uint32]*SeasonRankInfo {
	if x != nil {
		return x.SeasonRankList
	}
	return nil
}

func (x *SeasonRankList) GetShowArmbandId() uint32 {
	if x != nil {
		return x.ShowArmbandId
	}
	return 0
}

type SeasonRankInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CurRanKStar      uint32                 `protobuf:"varint,1,opt,name=cur_ran_k_star,json=curRanKStar,proto3" json:"cur_ran_k_star,omitempty"`
	ReceivedRankStar []uint32               `protobuf:"varint,2,rep,packed,name=received_rank_star,json=receivedRankStar,proto3" json:"received_rank_star,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SeasonRankInfo) Reset() {
	*x = SeasonRankInfo{}
	mi := &file_pb_bp_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonRankInfo) ProtoMessage() {}

func (x *SeasonRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonRankInfo.ProtoReflect.Descriptor instead.
func (*SeasonRankInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{189}
}

func (x *SeasonRankInfo) GetCurRanKStar() uint32 {
	if x != nil {
		return x.CurRanKStar
	}
	return 0
}

func (x *SeasonRankInfo) GetReceivedRankStar() []uint32 {
	if x != nil {
		return x.ReceivedRankStar
	}
	return nil
}

type SeasonCenter struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	SeasonId      int32                           `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	BattlePass    *BattlePass                     `protobuf:"bytes,2,opt,name=battle_pass,json=battlePass,proto3" json:"battle_pass,omitempty"`
	BpQuestList   *SeasonBpQuestList              `protobuf:"bytes,3,opt,name=bp_quest_list,json=bpQuestList,proto3" json:"bp_quest_list,omitempty"`
	SeasonHistory map[uint32]*SeasonCenterHistory `protobuf:"bytes,4,rep,name=season_history,json=seasonHistory,proto3" json:"season_history,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeasonCenter) Reset() {
	*x = SeasonCenter{}
	mi := &file_pb_bp_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonCenter) ProtoMessage() {}

func (x *SeasonCenter) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonCenter.ProtoReflect.Descriptor instead.
func (*SeasonCenter) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{190}
}

func (x *SeasonCenter) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonCenter) GetBattlePass() *BattlePass {
	if x != nil {
		return x.BattlePass
	}
	return nil
}

func (x *SeasonCenter) GetBpQuestList() *SeasonBpQuestList {
	if x != nil {
		return x.BpQuestList
	}
	return nil
}

func (x *SeasonCenter) GetSeasonHistory() map[uint32]*SeasonCenterHistory {
	if x != nil {
		return x.SeasonHistory
	}
	return nil
}

type SeasonBpQuestList struct {
	state            protoimpl.MessageState        `protogen:"open.v1"`
	SeasonMap        map[uint32]*SeasonBpQuestData `protobuf:"bytes,1,rep,name=season_map,json=seasonMap,proto3" json:"season_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RandomMap        []uint32                      `protobuf:"varint,2,rep,packed,name=random_map,json=randomMap,proto3" json:"random_map,omitempty"`
	RefreshTimeStamp int64                         `protobuf:"varint,3,opt,name=refresh_time_stamp,json=refreshTimeStamp,proto3" json:"refresh_time_stamp,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SeasonBpQuestList) Reset() {
	*x = SeasonBpQuestList{}
	mi := &file_pb_bp_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonBpQuestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonBpQuestList) ProtoMessage() {}

func (x *SeasonBpQuestList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonBpQuestList.ProtoReflect.Descriptor instead.
func (*SeasonBpQuestList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{191}
}

func (x *SeasonBpQuestList) GetSeasonMap() map[uint32]*SeasonBpQuestData {
	if x != nil {
		return x.SeasonMap
	}
	return nil
}

func (x *SeasonBpQuestList) GetRandomMap() []uint32 {
	if x != nil {
		return x.RandomMap
	}
	return nil
}

func (x *SeasonBpQuestList) GetRefreshTimeStamp() int64 {
	if x != nil {
		return x.RefreshTimeStamp
	}
	return 0
}

type SeasonCenterHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BattlePass    *BattlePass            `protobuf:"bytes,1,opt,name=battle_pass,json=battlePass,proto3" json:"battle_pass,omitempty"`
	BpQuestList   *SeasonBpQuestList     `protobuf:"bytes,2,opt,name=bp_quest_list,json=bpQuestList,proto3" json:"bp_quest_list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeasonCenterHistory) Reset() {
	*x = SeasonCenterHistory{}
	mi := &file_pb_bp_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonCenterHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonCenterHistory) ProtoMessage() {}

func (x *SeasonCenterHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonCenterHistory.ProtoReflect.Descriptor instead.
func (*SeasonCenterHistory) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{192}
}

func (x *SeasonCenterHistory) GetBattlePass() *BattlePass {
	if x != nil {
		return x.BattlePass
	}
	return nil
}

func (x *SeasonCenterHistory) GetBpQuestList() *SeasonBpQuestList {
	if x != nil {
		return x.BpQuestList
	}
	return nil
}

type SeasonBpQuestData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetNum     int32                  `protobuf:"varint,2,opt,name=target_num,json=targetNum,proto3" json:"target_num,omitempty"`
	Award         int32                  `protobuf:"varint,3,opt,name=award,proto3" json:"award,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeasonBpQuestData) Reset() {
	*x = SeasonBpQuestData{}
	mi := &file_pb_bp_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonBpQuestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonBpQuestData) ProtoMessage() {}

func (x *SeasonBpQuestData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonBpQuestData.ProtoReflect.Descriptor instead.
func (*SeasonBpQuestData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{193}
}

func (x *SeasonBpQuestData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeasonBpQuestData) GetTargetNum() int32 {
	if x != nil {
		return x.TargetNum
	}
	return 0
}

func (x *SeasonBpQuestData) GetAward() int32 {
	if x != nil {
		return x.Award
	}
	return 0
}

type SeasonMedalInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SeasonId          uint32                 `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	NormalHoleInfos   map[uint32]*MedalHole  `protobuf:"bytes,2,rep,name=normal_hole_infos,json=normalHoleInfos,proto3" json:"normal_hole_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CoreHoleInfo      *MedalHole             `protobuf:"bytes,3,opt,name=core_hole_info,json=coreHoleInfo,proto3" json:"core_hole_info,omitempty"`
	CoreHoleNodeInfos map[uint32]*MedalNode  `protobuf:"bytes,4,rep,name=core_hole_node_infos,json=coreHoleNodeInfos,proto3" json:"core_hole_node_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SeasonMedalInfo) Reset() {
	*x = SeasonMedalInfo{}
	mi := &file_pb_bp_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonMedalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonMedalInfo) ProtoMessage() {}

func (x *SeasonMedalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonMedalInfo.ProtoReflect.Descriptor instead.
func (*SeasonMedalInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{194}
}

func (x *SeasonMedalInfo) GetSeasonId() uint32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonMedalInfo) GetNormalHoleInfos() map[uint32]*MedalHole {
	if x != nil {
		return x.NormalHoleInfos
	}
	return nil
}

func (x *SeasonMedalInfo) GetCoreHoleInfo() *MedalHole {
	if x != nil {
		return x.CoreHoleInfo
	}
	return nil
}

func (x *SeasonMedalInfo) GetCoreHoleNodeInfos() map[uint32]*MedalNode {
	if x != nil {
		return x.CoreHoleNodeInfos
	}
	return nil
}

type MedalNode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        uint32                 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeLevel     uint32                 `protobuf:"varint,2,opt,name=node_level,json=nodeLevel,proto3" json:"node_level,omitempty"`
	Choose        bool                   `protobuf:"varint,3,opt,name=choose,proto3" json:"choose,omitempty"`
	Slot          int32                  `protobuf:"varint,4,opt,name=slot,proto3" json:"slot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MedalNode) Reset() {
	*x = MedalNode{}
	mi := &file_pb_bp_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedalNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedalNode) ProtoMessage() {}

func (x *MedalNode) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedalNode.ProtoReflect.Descriptor instead.
func (*MedalNode) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{195}
}

func (x *MedalNode) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *MedalNode) GetNodeLevel() uint32 {
	if x != nil {
		return x.NodeLevel
	}
	return 0
}

func (x *MedalNode) GetChoose() bool {
	if x != nil {
		return x.Choose
	}
	return false
}

func (x *MedalNode) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type MedalHole struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HoleId        uint32                 `protobuf:"varint,1,opt,name=hole_id,json=holeId,proto3" json:"hole_id,omitempty"`
	HoleLevel     uint32                 `protobuf:"varint,2,opt,name=hole_level,json=holeLevel,proto3" json:"hole_level,omitempty"`
	CurExp        uint32                 `protobuf:"varint,3,opt,name=cur_exp,json=curExp,proto3" json:"cur_exp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MedalHole) Reset() {
	*x = MedalHole{}
	mi := &file_pb_bp_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedalHole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedalHole) ProtoMessage() {}

func (x *MedalHole) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedalHole.ProtoReflect.Descriptor instead.
func (*MedalHole) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{196}
}

func (x *MedalHole) GetHoleId() uint32 {
	if x != nil {
		return x.HoleId
	}
	return 0
}

func (x *MedalHole) GetHoleLevel() uint32 {
	if x != nil {
		return x.HoleLevel
	}
	return 0
}

func (x *MedalHole) GetCurExp() uint32 {
	if x != nil {
		return x.CurExp
	}
	return 0
}

type CommunityHomeData struct {
	state           protoimpl.MessageState             `protogen:"open.v1"`
	CommunityId     int64                              `protobuf:"varint,1,opt,name=community_id,json=communityId,proto3" json:"community_id,omitempty"`
	HomelandId      int64                              `protobuf:"varint,2,opt,name=homeland_id,json=homelandId,proto3" json:"homeland_id,omitempty"`
	BuyCount        int32                              `protobuf:"varint,3,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	UnlockedRecipes map[int32]*CommunityHomelandRecipe `protobuf:"bytes,4,rep,name=unlocked_recipes,json=unlockedRecipes,proto3" json:"unlocked_recipes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Level           int32                              `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CommunityHomeData) Reset() {
	*x = CommunityHomeData{}
	mi := &file_pb_bp_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunityHomeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityHomeData) ProtoMessage() {}

func (x *CommunityHomeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityHomeData.ProtoReflect.Descriptor instead.
func (*CommunityHomeData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{197}
}

func (x *CommunityHomeData) GetCommunityId() int64 {
	if x != nil {
		return x.CommunityId
	}
	return 0
}

func (x *CommunityHomeData) GetHomelandId() int64 {
	if x != nil {
		return x.HomelandId
	}
	return 0
}

func (x *CommunityHomeData) GetBuyCount() int32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *CommunityHomeData) GetUnlockedRecipes() map[int32]*CommunityHomelandRecipe {
	if x != nil {
		return x.UnlockedRecipes
	}
	return nil
}

func (x *CommunityHomeData) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CommunityHomelandRecipe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommunityHomelandRecipe) Reset() {
	*x = CommunityHomelandRecipe{}
	mi := &file_pb_bp_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommunityHomelandRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityHomelandRecipe) ProtoMessage() {}

func (x *CommunityHomelandRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityHomelandRecipe.ProtoReflect.Descriptor instead.
func (*CommunityHomelandRecipe) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{198}
}

func (x *CommunityHomelandRecipe) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SeasonActivation struct {
	state             protoimpl.MessageState            `protogen:"open.v1"`
	SeasonId          int32                             `protobuf:"varint,1,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	ActivationPoint   int32                             `protobuf:"varint,2,opt,name=activation_point,json=activationPoint,proto3" json:"activation_point,omitempty"`
	RefreshTime       int32                             `protobuf:"varint,3,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	ActivationTargets map[int32]*SeasonActivationTarget `protobuf:"bytes,4,rep,name=activation_targets,json=activationTargets,proto3" json:"activation_targets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StageRewardStatus map[uint32]int32                  `protobuf:"bytes,5,rep,name=stage_reward_status,json=stageRewardStatus,proto3" json:"stage_reward_status,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SeasonActivation) Reset() {
	*x = SeasonActivation{}
	mi := &file_pb_bp_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonActivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonActivation) ProtoMessage() {}

func (x *SeasonActivation) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonActivation.ProtoReflect.Descriptor instead.
func (*SeasonActivation) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{199}
}

func (x *SeasonActivation) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *SeasonActivation) GetActivationPoint() int32 {
	if x != nil {
		return x.ActivationPoint
	}
	return 0
}

func (x *SeasonActivation) GetRefreshTime() int32 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *SeasonActivation) GetActivationTargets() map[int32]*SeasonActivationTarget {
	if x != nil {
		return x.ActivationTargets
	}
	return nil
}

func (x *SeasonActivation) GetStageRewardStatus() map[uint32]int32 {
	if x != nil {
		return x.StageRewardStatus
	}
	return nil
}

type SeasonActivationTarget struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetType     int32                  `protobuf:"varint,2,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	TargetUuid     int32                  `protobuf:"varint,3,opt,name=target_uuid,json=targetUuid,proto3" json:"target_uuid,omitempty"`
	RewardRate     int32                  `protobuf:"varint,4,opt,name=reward_rate,json=rewardRate,proto3" json:"reward_rate,omitempty"`
	Progress       int32                  `protobuf:"varint,5,opt,name=progress,proto3" json:"progress,omitempty"`
	CompletedTimes int32                  `protobuf:"varint,6,opt,name=completed_times,json=completedTimes,proto3" json:"completed_times,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SeasonActivationTarget) Reset() {
	*x = SeasonActivationTarget{}
	mi := &file_pb_bp_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonActivationTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonActivationTarget) ProtoMessage() {}

func (x *SeasonActivationTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonActivationTarget.ProtoReflect.Descriptor instead.
func (*SeasonActivationTarget) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{200}
}

func (x *SeasonActivationTarget) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeasonActivationTarget) GetTargetType() int32 {
	if x != nil {
		return x.TargetType
	}
	return 0
}

func (x *SeasonActivationTarget) GetTargetUuid() int32 {
	if x != nil {
		return x.TargetUuid
	}
	return 0
}

func (x *SeasonActivationTarget) GetRewardRate() int32 {
	if x != nil {
		return x.RewardRate
	}
	return 0
}

func (x *SeasonActivationTarget) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SeasonActivationTarget) GetCompletedTimes() int32 {
	if x != nil {
		return x.CompletedTimes
	}
	return 0
}

type Slot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slots         map[int32]*SlotInfo    `protobuf:"bytes,1,rep,name=slots,proto3" json:"slots,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slot) Reset() {
	*x = Slot{}
	mi := &file_pb_bp_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{201}
}

func (x *Slot) GetSlots() map[int32]*SlotInfo {
	if x != nil {
		return x.Slots
	}
	return nil
}

type SlotInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SkillId           int32                  `protobuf:"varint,2,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	IsAutoBattleClose bool                   `protobuf:"varint,3,opt,name=is_auto_battle_close,json=isAutoBattleClose,proto3" json:"is_auto_battle_close,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SlotInfo) Reset() {
	*x = SlotInfo{}
	mi := &file_pb_bp_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SlotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotInfo) ProtoMessage() {}

func (x *SlotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotInfo.ProtoReflect.Descriptor instead.
func (*SlotInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{202}
}

func (x *SlotInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SlotInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *SlotInfo) GetIsAutoBattleClose() bool {
	if x != nil {
		return x.IsAutoBattleClose
	}
	return false
}

type MonsterHuntInfo struct {
	state                 protoimpl.MessageState       `protogen:"open.v1"`
	MonsterHuntList       map[int32]*MonsterHuntTarget `protobuf:"bytes,1,rep,name=monster_hunt_list,json=monsterHuntList,proto3" json:"monster_hunt_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CurLevel              int32                        `protobuf:"varint,2,opt,name=cur_level,json=curLevel,proto3" json:"cur_level,omitempty"`
	CurExp                int32                        `protobuf:"varint,3,opt,name=cur_exp,json=curExp,proto3" json:"cur_exp,omitempty"`
	LevelAwardFlag        map[int32]int32              `protobuf:"bytes,4,rep,name=level_award_flag,json=levelAwardFlag,proto3" json:"level_award_flag,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MonsterHuntRefrshTime map[int32]int64              `protobuf:"bytes,6,rep,name=monster_hunt_refrsh_time,json=monsterHuntRefrshTime,proto3" json:"monster_hunt_refrsh_time,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MonsterHuntInfo) Reset() {
	*x = MonsterHuntInfo{}
	mi := &file_pb_bp_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonsterHuntInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterHuntInfo) ProtoMessage() {}

func (x *MonsterHuntInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterHuntInfo.ProtoReflect.Descriptor instead.
func (*MonsterHuntInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{203}
}

func (x *MonsterHuntInfo) GetMonsterHuntList() map[int32]*MonsterHuntTarget {
	if x != nil {
		return x.MonsterHuntList
	}
	return nil
}

func (x *MonsterHuntInfo) GetCurLevel() int32 {
	if x != nil {
		return x.CurLevel
	}
	return 0
}

func (x *MonsterHuntInfo) GetCurExp() int32 {
	if x != nil {
		return x.CurExp
	}
	return 0
}

func (x *MonsterHuntInfo) GetLevelAwardFlag() map[int32]int32 {
	if x != nil {
		return x.LevelAwardFlag
	}
	return nil
}

func (x *MonsterHuntInfo) GetMonsterHuntRefrshTime() map[int32]int64 {
	if x != nil {
		return x.MonsterHuntRefrshTime
	}
	return nil
}

type MonsterHuntTarget struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	MonsterId      int32                        `protobuf:"varint,1,opt,name=monster_id,json=monsterId,proto3" json:"monster_id,omitempty"`
	TargetInfoList map[int32]*MonsterTargetInfo `protobuf:"bytes,2,rep,name=target_info_list,json=targetInfoList,proto3" json:"target_info_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MonsterHuntTarget) Reset() {
	*x = MonsterHuntTarget{}
	mi := &file_pb_bp_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonsterHuntTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterHuntTarget) ProtoMessage() {}

func (x *MonsterHuntTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterHuntTarget.ProtoReflect.Descriptor instead.
func (*MonsterHuntTarget) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{204}
}

func (x *MonsterHuntTarget) GetMonsterId() int32 {
	if x != nil {
		return x.MonsterId
	}
	return 0
}

func (x *MonsterHuntTarget) GetTargetInfoList() map[int32]*MonsterTargetInfo {
	if x != nil {
		return x.TargetInfoList
	}
	return nil
}

type MonsterTargetInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetUuid    int32                  `protobuf:"varint,2,opt,name=target_uuid,json=targetUuid,proto3" json:"target_uuid,omitempty"`
	TargetType    int32                  `protobuf:"varint,3,opt,name=target_type,json=targetType,proto3" json:"target_type,omitempty"`
	TargetNum     int32                  `protobuf:"varint,4,opt,name=target_num,json=targetNum,proto3" json:"target_num,omitempty"`
	AwardFlag     MonsterTargetAward     `protobuf:"varint,5,opt,name=award_flag,json=awardFlag,proto3,enum=MonsterTargetAward" json:"award_flag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonsterTargetInfo) Reset() {
	*x = MonsterTargetInfo{}
	mi := &file_pb_bp_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonsterTargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonsterTargetInfo) ProtoMessage() {}

func (x *MonsterTargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonsterTargetInfo.ProtoReflect.Descriptor instead.
func (*MonsterTargetInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{205}
}

func (x *MonsterTargetInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MonsterTargetInfo) GetTargetUuid() int32 {
	if x != nil {
		return x.TargetUuid
	}
	return 0
}

func (x *MonsterTargetInfo) GetTargetType() int32 {
	if x != nil {
		return x.TargetType
	}
	return 0
}

func (x *MonsterTargetInfo) GetTargetNum() int32 {
	if x != nil {
		return x.TargetNum
	}
	return 0
}

func (x *MonsterTargetInfo) GetAwardFlag() MonsterTargetAward {
	if x != nil {
		return x.AwardFlag
	}
	return MonsterTargetAward_MonsterTargetAwardNull
}

type Mod struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModSlots      map[int32]int64        `protobuf:"bytes,1,rep,name=mod_slots,json=modSlots,proto3" json:"mod_slots,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ModInfos      map[int64]*ModInfo     `protobuf:"bytes,2,rep,name=mod_infos,json=modInfos,proto3" json:"mod_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Mod) Reset() {
	*x = Mod{}
	mi := &file_pb_bp_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Mod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mod) ProtoMessage() {}

func (x *Mod) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mod.ProtoReflect.Descriptor instead.
func (*Mod) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{206}
}

func (x *Mod) GetModSlots() map[int32]int64 {
	if x != nil {
		return x.ModSlots
	}
	return nil
}

func (x *Mod) GetModInfos() map[int64]*ModInfo {
	if x != nil {
		return x.ModInfos
	}
	return nil
}

type ModInfo struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	PartIds        []int32                 `protobuf:"varint,1,rep,packed,name=part_ids,json=partIds,proto3" json:"part_ids,omitempty"`
	UpgradeRecords []*ModPartUpgradeRecord `protobuf:"bytes,2,rep,name=upgrade_records,json=upgradeRecords,proto3" json:"upgrade_records,omitempty"`
	SuccessRate    int32                   `protobuf:"varint,3,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`
	InitLinkNums   []int32                 `protobuf:"varint,4,rep,packed,name=init_link_nums,json=initLinkNums,proto3" json:"init_link_nums,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ModInfo) Reset() {
	*x = ModInfo{}
	mi := &file_pb_bp_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModInfo) ProtoMessage() {}

func (x *ModInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModInfo.ProtoReflect.Descriptor instead.
func (*ModInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{207}
}

func (x *ModInfo) GetPartIds() []int32 {
	if x != nil {
		return x.PartIds
	}
	return nil
}

func (x *ModInfo) GetUpgradeRecords() []*ModPartUpgradeRecord {
	if x != nil {
		return x.UpgradeRecords
	}
	return nil
}

func (x *ModInfo) GetSuccessRate() int32 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *ModInfo) GetInitLinkNums() []int32 {
	if x != nil {
		return x.InitLinkNums
	}
	return nil
}

type WorldEventMap struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	EventMap       map[uint32]*WorldEventData `protobuf:"bytes,1,rep,name=event_map,json=eventMap,proto3" json:"event_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AcceptCount    int32                      `protobuf:"varint,2,opt,name=accept_count,json=acceptCount,proto3" json:"accept_count,omitempty"`
	LastUpdateTime int64                      `protobuf:"varint,3,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	RefreshTime    int64                      `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorldEventMap) Reset() {
	*x = WorldEventMap{}
	mi := &file_pb_bp_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldEventMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldEventMap) ProtoMessage() {}

func (x *WorldEventMap) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldEventMap.ProtoReflect.Descriptor instead.
func (*WorldEventMap) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{208}
}

func (x *WorldEventMap) GetEventMap() map[uint32]*WorldEventData {
	if x != nil {
		return x.EventMap
	}
	return nil
}

func (x *WorldEventMap) GetAcceptCount() int32 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

func (x *WorldEventMap) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (x *WorldEventMap) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

type WorldEventData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetNum     int32                  `protobuf:"varint,2,opt,name=target_num,json=targetNum,proto3" json:"target_num,omitempty"`
	Award         int32                  `protobuf:"varint,3,opt,name=award,proto3" json:"award,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorldEventData) Reset() {
	*x = WorldEventData{}
	mi := &file_pb_bp_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorldEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldEventData) ProtoMessage() {}

func (x *WorldEventData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldEventData.ProtoReflect.Descriptor instead.
func (*WorldEventData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{209}
}

func (x *WorldEventData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorldEventData) GetTargetNum() int32 {
	if x != nil {
		return x.TargetNum
	}
	return 0
}

func (x *WorldEventData) GetAward() int32 {
	if x != nil {
		return x.Award
	}
	return 0
}

type FishSetting struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BaitId            int32                  `protobuf:"varint,2,opt,name=bait_id,json=baitId,proto3" json:"bait_id,omitempty"`
	Experiences       int32                  `protobuf:"varint,3,opt,name=experiences,proto3" json:"experiences,omitempty"`
	ResearchFishId    int32                  `protobuf:"varint,4,opt,name=research_fish_id,json=researchFishId,proto3" json:"research_fish_id,omitempty"`
	FishRecords       map[int32]*FishRecord  `protobuf:"bytes,5,rep,name=fish_records,json=fishRecords,proto3" json:"fish_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FishRodDurability map[uint64]int32       `protobuf:"bytes,6,rep,name=fish_rod_durability,json=fishRodDurability,proto3" json:"fish_rod_durability,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RodUuid           uint64                 `protobuf:"varint,7,opt,name=rod_uuid,json=rodUuid,proto3" json:"rod_uuid,omitempty"`
	LevelReward       map[int32]bool         `protobuf:"bytes,8,rep,name=level_reward,json=levelReward,proto3" json:"level_reward,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ZeroFishTimes     map[int32]int64        `protobuf:"bytes,9,rep,name=zero_fish_times,json=zeroFishTimes,proto3" json:"zero_fish_times,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FishSetting) Reset() {
	*x = FishSetting{}
	mi := &file_pb_bp_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FishSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FishSetting) ProtoMessage() {}

func (x *FishSetting) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FishSetting.ProtoReflect.Descriptor instead.
func (*FishSetting) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{210}
}

func (x *FishSetting) GetBaitId() int32 {
	if x != nil {
		return x.BaitId
	}
	return 0
}

func (x *FishSetting) GetExperiences() int32 {
	if x != nil {
		return x.Experiences
	}
	return 0
}

func (x *FishSetting) GetResearchFishId() int32 {
	if x != nil {
		return x.ResearchFishId
	}
	return 0
}

func (x *FishSetting) GetFishRecords() map[int32]*FishRecord {
	if x != nil {
		return x.FishRecords
	}
	return nil
}

func (x *FishSetting) GetFishRodDurability() map[uint64]int32 {
	if x != nil {
		return x.FishRodDurability
	}
	return nil
}

func (x *FishSetting) GetRodUuid() uint64 {
	if x != nil {
		return x.RodUuid
	}
	return 0
}

func (x *FishSetting) GetLevelReward() map[int32]bool {
	if x != nil {
		return x.LevelReward
	}
	return nil
}

func (x *FishSetting) GetZeroFishTimes() map[int32]int64 {
	if x != nil {
		return x.ZeroFishTimes
	}
	return nil
}

type FreightData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshTime   int64                  `protobuf:"varint,1,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	GoodsValue    int32                  `protobuf:"varint,2,opt,name=goods_value,json=goodsValue,proto3" json:"goods_value,omitempty"`
	SetOff        bool                   `protobuf:"varint,3,opt,name=set_off,json=setOff,proto3" json:"set_off,omitempty"`
	CanReceive    bool                   `protobuf:"varint,4,opt,name=can_receive,json=canReceive,proto3" json:"can_receive,omitempty"`
	UpGoodsList   []int32                `protobuf:"varint,5,rep,packed,name=up_goods_list,json=upGoodsList,proto3" json:"up_goods_list,omitempty"`
	KeepGoodsList []int32                `protobuf:"varint,6,rep,packed,name=keep_goods_list,json=keepGoodsList,proto3" json:"keep_goods_list,omitempty"`
	DownGoodsList []int32                `protobuf:"varint,7,rep,packed,name=down_goods_list,json=downGoodsList,proto3" json:"down_goods_list,omitempty"`
	CanRewardTime int64                  `protobuf:"varint,8,opt,name=can_reward_time,json=canRewardTime,proto3" json:"can_reward_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreightData) Reset() {
	*x = FreightData{}
	mi := &file_pb_bp_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreightData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreightData) ProtoMessage() {}

func (x *FreightData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreightData.ProtoReflect.Descriptor instead.
func (*FreightData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{211}
}

func (x *FreightData) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *FreightData) GetGoodsValue() int32 {
	if x != nil {
		return x.GoodsValue
	}
	return 0
}

func (x *FreightData) GetSetOff() bool {
	if x != nil {
		return x.SetOff
	}
	return false
}

func (x *FreightData) GetCanReceive() bool {
	if x != nil {
		return x.CanReceive
	}
	return false
}

func (x *FreightData) GetUpGoodsList() []int32 {
	if x != nil {
		return x.UpGoodsList
	}
	return nil
}

func (x *FreightData) GetKeepGoodsList() []int32 {
	if x != nil {
		return x.KeepGoodsList
	}
	return nil
}

func (x *FreightData) GetDownGoodsList() []int32 {
	if x != nil {
		return x.DownGoodsList
	}
	return nil
}

func (x *FreightData) GetCanRewardTime() int64 {
	if x != nil {
		return x.CanRewardTime
	}
	return 0
}

type ProfessionList struct {
	state                 protoimpl.MessageState          `protogen:"open.v1"`
	CurProfessionId       int32                           `protobuf:"varint,1,opt,name=cur_profession_id,json=curProfessionId,proto3" json:"cur_profession_id,omitempty"`
	CurAssistProfessions  []int32                         `protobuf:"varint,3,rep,packed,name=cur_assist_professions,json=curAssistProfessions,proto3" json:"cur_assist_professions,omitempty"`
	ProfessionList        map[int32]*ProfessionInfo       `protobuf:"bytes,4,rep,name=profession_list,json=professionList,proto3" json:"profession_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AoyiSkillInfoMap      map[int32]*ProfessionSkillInfo  `protobuf:"bytes,7,rep,name=aoyi_skill_info_map,json=aoyiSkillInfoMap,proto3" json:"aoyi_skill_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TotalTalentPoints     uint32                          `protobuf:"varint,8,opt,name=total_talent_points,json=totalTalentPoints,proto3" json:"total_talent_points,omitempty"`
	TotalTalentResetCount uint32                          `protobuf:"varint,9,opt,name=total_talent_reset_count,json=totalTalentResetCount,proto3" json:"total_talent_reset_count,omitempty"`
	TalentList            map[int32]*ProfessionTalentInfo `protobuf:"bytes,10,rep,name=talent_list,json=talentList,proto3" json:"talent_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProfessionList) Reset() {
	*x = ProfessionList{}
	mi := &file_pb_bp_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionList) ProtoMessage() {}

func (x *ProfessionList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionList.ProtoReflect.Descriptor instead.
func (*ProfessionList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{212}
}

func (x *ProfessionList) GetCurProfessionId() int32 {
	if x != nil {
		return x.CurProfessionId
	}
	return 0
}

func (x *ProfessionList) GetCurAssistProfessions() []int32 {
	if x != nil {
		return x.CurAssistProfessions
	}
	return nil
}

func (x *ProfessionList) GetProfessionList() map[int32]*ProfessionInfo {
	if x != nil {
		return x.ProfessionList
	}
	return nil
}

func (x *ProfessionList) GetAoyiSkillInfoMap() map[int32]*ProfessionSkillInfo {
	if x != nil {
		return x.AoyiSkillInfoMap
	}
	return nil
}

func (x *ProfessionList) GetTotalTalentPoints() uint32 {
	if x != nil {
		return x.TotalTalentPoints
	}
	return 0
}

func (x *ProfessionList) GetTotalTalentResetCount() uint32 {
	if x != nil {
		return x.TotalTalentResetCount
	}
	return 0
}

func (x *ProfessionList) GetTalentList() map[int32]*ProfessionTalentInfo {
	if x != nil {
		return x.TalentList
	}
	return nil
}

type ProfessionTalentInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UsedTalentPoints uint32                 `protobuf:"varint,1,opt,name=used_talent_points,json=usedTalentPoints,proto3" json:"used_talent_points,omitempty"`
	TalentNodeIds    []uint32               `protobuf:"varint,2,rep,packed,name=talent_node_ids,json=talentNodeIds,proto3" json:"talent_node_ids,omitempty"`
	TalentStageCfgId int32                  `protobuf:"varint,4,opt,name=talent_stage_cfg_id,json=talentStageCfgId,proto3" json:"talent_stage_cfg_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProfessionTalentInfo) Reset() {
	*x = ProfessionTalentInfo{}
	mi := &file_pb_bp_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfessionTalentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionTalentInfo) ProtoMessage() {}

func (x *ProfessionTalentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionTalentInfo.ProtoReflect.Descriptor instead.
func (*ProfessionTalentInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{213}
}

func (x *ProfessionTalentInfo) GetUsedTalentPoints() uint32 {
	if x != nil {
		return x.UsedTalentPoints
	}
	return 0
}

func (x *ProfessionTalentInfo) GetTalentNodeIds() []uint32 {
	if x != nil {
		return x.TalentNodeIds
	}
	return nil
}

func (x *ProfessionTalentInfo) GetTalentStageCfgId() int32 {
	if x != nil {
		return x.TalentStageCfgId
	}
	return 0
}

type ProfessionInfo struct {
	state            protoimpl.MessageState         `protogen:"open.v1"`
	ProfessionId     int32                          `protobuf:"varint,1,opt,name=profession_id,json=professionId,proto3" json:"profession_id,omitempty"`
	Level            int32                          `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Experience       int64                          `protobuf:"varint,3,opt,name=experience,proto3" json:"experience,omitempty"`
	SkillInfoMap     map[int32]*ProfessionSkillInfo `protobuf:"bytes,4,rep,name=skill_info_map,json=skillInfoMap,proto3" json:"skill_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ActiveSkillIds   []int32                        `protobuf:"varint,6,rep,packed,name=active_skill_ids,json=activeSkillIds,proto3" json:"active_skill_ids,omitempty"`
	SlotSkillInfoMap map[int32]int32                `protobuf:"bytes,7,rep,name=slot_skill_info_map,json=slotSkillInfoMap,proto3" json:"slot_skill_info_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	UseSkinId        int32                          `protobuf:"varint,8,opt,name=use_skin_id,json=useSkinId,proto3" json:"use_skin_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProfessionInfo) Reset() {
	*x = ProfessionInfo{}
	mi := &file_pb_bp_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionInfo) ProtoMessage() {}

func (x *ProfessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionInfo.ProtoReflect.Descriptor instead.
func (*ProfessionInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{214}
}

func (x *ProfessionInfo) GetProfessionId() int32 {
	if x != nil {
		return x.ProfessionId
	}
	return 0
}

func (x *ProfessionInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProfessionInfo) GetExperience() int64 {
	if x != nil {
		return x.Experience
	}
	return 0
}

func (x *ProfessionInfo) GetSkillInfoMap() map[int32]*ProfessionSkillInfo {
	if x != nil {
		return x.SkillInfoMap
	}
	return nil
}

func (x *ProfessionInfo) GetActiveSkillIds() []int32 {
	if x != nil {
		return x.ActiveSkillIds
	}
	return nil
}

func (x *ProfessionInfo) GetSlotSkillInfoMap() map[int32]int32 {
	if x != nil {
		return x.SlotSkillInfoMap
	}
	return nil
}

func (x *ProfessionInfo) GetUseSkinId() int32 {
	if x != nil {
		return x.UseSkinId
	}
	return 0
}

type ProfessionSkillInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SkillId          int32                  `protobuf:"varint,1,opt,name=skill_id,json=skillId,proto3" json:"skill_id,omitempty"`
	Level            int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	ReplaceSkillIds  []int32                `protobuf:"varint,3,rep,packed,name=replace_skill_ids,json=replaceSkillIds,proto3" json:"replace_skill_ids,omitempty"`
	RemodelLevel     int32                  `protobuf:"varint,4,opt,name=remodel_level,json=remodelLevel,proto3" json:"remodel_level,omitempty"`
	CurSkillSkin     int32                  `protobuf:"varint,5,opt,name=cur_skill_skin,json=curSkillSkin,proto3" json:"cur_skill_skin,omitempty"`
	ActiveSkillSkins map[int32]bool         `protobuf:"bytes,6,rep,name=active_skill_skins,json=activeSkillSkins,proto3" json:"active_skill_skins,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProfessionSkillInfo) Reset() {
	*x = ProfessionSkillInfo{}
	mi := &file_pb_bp_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProfessionSkillInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfessionSkillInfo) ProtoMessage() {}

func (x *ProfessionSkillInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfessionSkillInfo.ProtoReflect.Descriptor instead.
func (*ProfessionSkillInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{215}
}

func (x *ProfessionSkillInfo) GetSkillId() int32 {
	if x != nil {
		return x.SkillId
	}
	return 0
}

func (x *ProfessionSkillInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProfessionSkillInfo) GetReplaceSkillIds() []int32 {
	if x != nil {
		return x.ReplaceSkillIds
	}
	return nil
}

func (x *ProfessionSkillInfo) GetRemodelLevel() int32 {
	if x != nil {
		return x.RemodelLevel
	}
	return 0
}

func (x *ProfessionSkillInfo) GetCurSkillSkin() int32 {
	if x != nil {
		return x.CurSkillSkin
	}
	return 0
}

func (x *ProfessionSkillInfo) GetActiveSkillSkins() map[int32]bool {
	if x != nil {
		return x.ActiveSkillSkins
	}
	return nil
}

type TrialRoad struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	PassRoom        []int32                             `protobuf:"varint,1,rep,packed,name=pass_room,json=passRoom,proto3" json:"pass_room,omitempty"`
	RoomTargetAward map[int32]*TrialRoadRoomTargetAward `protobuf:"bytes,2,rep,name=room_target_award,json=roomTargetAward,proto3" json:"room_target_award,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TargetAward     *TrialRoadTargetAward               `protobuf:"bytes,3,opt,name=target_award,json=targetAward,proto3" json:"target_award,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TrialRoad) Reset() {
	*x = TrialRoad{}
	mi := &file_pb_bp_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrialRoad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialRoad) ProtoMessage() {}

func (x *TrialRoad) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialRoad.ProtoReflect.Descriptor instead.
func (*TrialRoad) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{216}
}

func (x *TrialRoad) GetPassRoom() []int32 {
	if x != nil {
		return x.PassRoom
	}
	return nil
}

func (x *TrialRoad) GetRoomTargetAward() map[int32]*TrialRoadRoomTargetAward {
	if x != nil {
		return x.RoomTargetAward
	}
	return nil
}

func (x *TrialRoad) GetTargetAward() *TrialRoadTargetAward {
	if x != nil {
		return x.TargetAward
	}
	return nil
}

type TrialRoadTargetAward struct {
	state          protoimpl.MessageState             `protogen:"open.v1"`
	TargetProgress map[int32]*TrialRoadTargetProgress `protobuf:"bytes,1,rep,name=target_progress,json=targetProgress,proto3" json:"target_progress,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrialRoadTargetAward) Reset() {
	*x = TrialRoadTargetAward{}
	mi := &file_pb_bp_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrialRoadTargetAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialRoadTargetAward) ProtoMessage() {}

func (x *TrialRoadTargetAward) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialRoadTargetAward.ProtoReflect.Descriptor instead.
func (*TrialRoadTargetAward) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{217}
}

func (x *TrialRoadTargetAward) GetTargetProgress() map[int32]*TrialRoadTargetProgress {
	if x != nil {
		return x.TargetProgress
	}
	return nil
}

type TrialRoadRoomTargetAward struct {
	state          protoimpl.MessageState             `protogen:"open.v1"`
	TargetProgress map[int32]*TrialRoadTargetProgress `protobuf:"bytes,1,rep,name=target_progress,json=targetProgress,proto3" json:"target_progress,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrialRoadRoomTargetAward) Reset() {
	*x = TrialRoadRoomTargetAward{}
	mi := &file_pb_bp_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrialRoadRoomTargetAward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialRoadRoomTargetAward) ProtoMessage() {}

func (x *TrialRoadRoomTargetAward) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialRoadRoomTargetAward.ProtoReflect.Descriptor instead.
func (*TrialRoadRoomTargetAward) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{218}
}

func (x *TrialRoadRoomTargetAward) GetTargetProgress() map[int32]*TrialRoadTargetProgress {
	if x != nil {
		return x.TargetProgress
	}
	return nil
}

type TrialRoadTargetProgress struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TargetId       int32                  `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetProgress int32                  `protobuf:"varint,2,opt,name=target_progress,json=targetProgress,proto3" json:"target_progress,omitempty"`
	AwardState     int32                  `protobuf:"varint,3,opt,name=award_state,json=awardState,proto3" json:"award_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TrialRoadTargetProgress) Reset() {
	*x = TrialRoadTargetProgress{}
	mi := &file_pb_bp_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrialRoadTargetProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialRoadTargetProgress) ProtoMessage() {}

func (x *TrialRoadTargetProgress) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialRoadTargetProgress.ProtoReflect.Descriptor instead.
func (*TrialRoadTargetProgress) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{219}
}

func (x *TrialRoadTargetProgress) GetTargetId() int32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *TrialRoadTargetProgress) GetTargetProgress() int32 {
	if x != nil {
		return x.TargetProgress
	}
	return 0
}

func (x *TrialRoadTargetProgress) GetAwardState() int32 {
	if x != nil {
		return x.AwardState
	}
	return 0
}

type GashaData struct {
	state               protoimpl.MessageState         `protogen:"open.v1"`
	GashaInfos          map[uint32]*GashaInfo          `protobuf:"bytes,1,rep,name=gasha_infos,json=gashaInfos,proto3" json:"gasha_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GashaGuaranteeInfos map[uint32]*GashaGuaranteeInfo `protobuf:"bytes,2,rep,name=gasha_guarantee_infos,json=gashaGuaranteeInfos,proto3" json:"gasha_guarantee_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GashaData) Reset() {
	*x = GashaData{}
	mi := &file_pb_bp_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GashaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaData) ProtoMessage() {}

func (x *GashaData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaData.ProtoReflect.Descriptor instead.
func (*GashaData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{220}
}

func (x *GashaData) GetGashaInfos() map[uint32]*GashaInfo {
	if x != nil {
		return x.GashaInfos
	}
	return nil
}

func (x *GashaData) GetGashaGuaranteeInfos() map[uint32]*GashaGuaranteeInfo {
	if x != nil {
		return x.GashaGuaranteeInfos
	}
	return nil
}

type GashaGuaranteeInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Guaranteex            uint32                 `protobuf:"varint,2,opt,name=guaranteex,proto3" json:"guaranteex,omitempty"`
	Guaranteey            uint32                 `protobuf:"varint,3,opt,name=guaranteey,proto3" json:"guaranteey,omitempty"`
	ResidueGuaranteeTimex int32                  `protobuf:"varint,4,opt,name=residue_guarantee_timex,json=residueGuaranteeTimex,proto3" json:"residue_guarantee_timex,omitempty"`
	ResidueGuaranteeTimey int32                  `protobuf:"varint,5,opt,name=residue_guarantee_timey,json=residueGuaranteeTimey,proto3" json:"residue_guarantee_timey,omitempty"`
	ResidueGuaranteeTimez int32                  `protobuf:"varint,6,opt,name=residue_guarantee_timez,json=residueGuaranteeTimez,proto3" json:"residue_guarantee_timez,omitempty"`
	Guaranteez            uint32                 `protobuf:"varint,7,opt,name=guaranteez,proto3" json:"guaranteez,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GashaGuaranteeInfo) Reset() {
	*x = GashaGuaranteeInfo{}
	mi := &file_pb_bp_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GashaGuaranteeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaGuaranteeInfo) ProtoMessage() {}

func (x *GashaGuaranteeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaGuaranteeInfo.ProtoReflect.Descriptor instead.
func (*GashaGuaranteeInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{221}
}

func (x *GashaGuaranteeInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GashaGuaranteeInfo) GetGuaranteex() uint32 {
	if x != nil {
		return x.Guaranteex
	}
	return 0
}

func (x *GashaGuaranteeInfo) GetGuaranteey() uint32 {
	if x != nil {
		return x.Guaranteey
	}
	return 0
}

func (x *GashaGuaranteeInfo) GetResidueGuaranteeTimex() int32 {
	if x != nil {
		return x.ResidueGuaranteeTimex
	}
	return 0
}

func (x *GashaGuaranteeInfo) GetResidueGuaranteeTimey() int32 {
	if x != nil {
		return x.ResidueGuaranteeTimey
	}
	return 0
}

func (x *GashaGuaranteeInfo) GetResidueGuaranteeTimez() int32 {
	if x != nil {
		return x.ResidueGuaranteeTimez
	}
	return 0
}

func (x *GashaGuaranteeInfo) GetGuaranteez() uint32 {
	if x != nil {
		return x.Guaranteez
	}
	return 0
}

type GashaInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DrawCount       uint32                 `protobuf:"varint,4,opt,name=draw_count,json=drawCount,proto3" json:"draw_count,omitempty"`
	RefreshTime     int64                  `protobuf:"varint,5,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	WishId          uint32                 `protobuf:"varint,8,opt,name=wish_id,json=wishId,proto3" json:"wish_id,omitempty"`
	WishValue       uint32                 `protobuf:"varint,9,opt,name=wish_value,json=wishValue,proto3" json:"wish_value,omitempty"`
	WishFinishCount uint32                 `protobuf:"varint,10,opt,name=wish_finish_count,json=wishFinishCount,proto3" json:"wish_finish_count,omitempty"`
	WishResetTime   int64                  `protobuf:"varint,11,opt,name=wish_reset_time,json=wishResetTime,proto3" json:"wish_reset_time,omitempty"`
	WishLimit       uint32                 `protobuf:"varint,12,opt,name=wish_limit,json=wishLimit,proto3" json:"wish_limit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GashaInfo) Reset() {
	*x = GashaInfo{}
	mi := &file_pb_bp_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GashaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GashaInfo) ProtoMessage() {}

func (x *GashaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GashaInfo.ProtoReflect.Descriptor instead.
func (*GashaInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{222}
}

func (x *GashaInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GashaInfo) GetDrawCount() uint32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *GashaInfo) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *GashaInfo) GetWishId() uint32 {
	if x != nil {
		return x.WishId
	}
	return 0
}

func (x *GashaInfo) GetWishValue() uint32 {
	if x != nil {
		return x.WishValue
	}
	return 0
}

func (x *GashaInfo) GetWishFinishCount() uint32 {
	if x != nil {
		return x.WishFinishCount
	}
	return 0
}

func (x *GashaInfo) GetWishResetTime() int64 {
	if x != nil {
		return x.WishResetTime
	}
	return 0
}

func (x *GashaInfo) GetWishLimit() uint32 {
	if x != nil {
		return x.WishLimit
	}
	return 0
}

type ShopData struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	RefreshList          map[int32]*ShopRefreshRecord `protobuf:"bytes,1,rep,name=refresh_list,json=refreshList,proto3" json:"refresh_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NormalShopRecords    map[int32]*PlayerBuyRecord   `protobuf:"bytes,2,rep,name=normal_shop_records,json=normalShopRecords,proto3" json:"normal_shop_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SeasonShopRecords    map[int32]*PlayerBuyRecord   `protobuf:"bytes,3,rep,name=season_shop_records,json=seasonShopRecords,proto3" json:"season_shop_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompensationItemData *ShopCompensationData        `protobuf:"bytes,4,opt,name=compensation_item_data,json=compensationItemData,proto3" json:"compensation_item_data,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ShopData) Reset() {
	*x = ShopData{}
	mi := &file_pb_bp_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopData) ProtoMessage() {}

func (x *ShopData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopData.ProtoReflect.Descriptor instead.
func (*ShopData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{223}
}

func (x *ShopData) GetRefreshList() map[int32]*ShopRefreshRecord {
	if x != nil {
		return x.RefreshList
	}
	return nil
}

func (x *ShopData) GetNormalShopRecords() map[int32]*PlayerBuyRecord {
	if x != nil {
		return x.NormalShopRecords
	}
	return nil
}

func (x *ShopData) GetSeasonShopRecords() map[int32]*PlayerBuyRecord {
	if x != nil {
		return x.SeasonShopRecords
	}
	return nil
}

func (x *ShopData) GetCompensationItemData() *ShopCompensationData {
	if x != nil {
		return x.CompensationItemData
	}
	return nil
}

type ShopCompensationData struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Items         map[uint32]*ShopCompensationInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopCompensationData) Reset() {
	*x = ShopCompensationData{}
	mi := &file_pb_bp_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopCompensationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopCompensationData) ProtoMessage() {}

func (x *ShopCompensationData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopCompensationData.ProtoReflect.Descriptor instead.
func (*ShopCompensationData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{224}
}

func (x *ShopCompensationData) GetItems() map[uint32]*ShopCompensationInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type ShopCompensationInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntorStoreNum int64                  `protobuf:"varint,1,opt,name=entor_store_num,json=entorStoreNum,proto3" json:"entor_store_num,omitempty"`
	BuyNum        int64                  `protobuf:"varint,2,opt,name=buy_num,json=buyNum,proto3" json:"buy_num,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopCompensationInfo) Reset() {
	*x = ShopCompensationInfo{}
	mi := &file_pb_bp_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopCompensationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopCompensationInfo) ProtoMessage() {}

func (x *ShopCompensationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopCompensationInfo.ProtoReflect.Descriptor instead.
func (*ShopCompensationInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{225}
}

func (x *ShopCompensationInfo) GetEntorStoreNum() int64 {
	if x != nil {
		return x.EntorStoreNum
	}
	return 0
}

func (x *ShopCompensationInfo) GetBuyNum() int64 {
	if x != nil {
		return x.BuyNum
	}
	return 0
}

type PlayerBuyRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	BuyTimestamp  int64                  `protobuf:"varint,3,opt,name=buy_timestamp,json=buyTimestamp,proto3" json:"buy_timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBuyRecord) Reset() {
	*x = PlayerBuyRecord{}
	mi := &file_pb_bp_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBuyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBuyRecord) ProtoMessage() {}

func (x *PlayerBuyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBuyRecord.ProtoReflect.Descriptor instead.
func (*PlayerBuyRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{226}
}

func (x *PlayerBuyRecord) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PlayerBuyRecord) GetBuyTimestamp() int64 {
	if x != nil {
		return x.BuyTimestamp
	}
	return 0
}

type ShopRefreshRecord struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	RefreshTimestamp   int64                              `protobuf:"varint,3,opt,name=refresh_timestamp,json=refreshTimestamp,proto3" json:"refresh_timestamp,omitempty"`
	RefreshCount       int32                              `protobuf:"varint,4,opt,name=refresh_count,json=refreshCount,proto3" json:"refresh_count,omitempty"`
	ShopRefreshRecords map[int32]*PlayerRefreshShopRecord `protobuf:"bytes,5,rep,name=shop_refresh_records,json=shopRefreshRecords,proto3" json:"shop_refresh_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ShopRefreshRecord) Reset() {
	*x = ShopRefreshRecord{}
	mi := &file_pb_bp_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopRefreshRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopRefreshRecord) ProtoMessage() {}

func (x *ShopRefreshRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopRefreshRecord.ProtoReflect.Descriptor instead.
func (*ShopRefreshRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{227}
}

func (x *ShopRefreshRecord) GetRefreshTimestamp() int64 {
	if x != nil {
		return x.RefreshTimestamp
	}
	return 0
}

func (x *ShopRefreshRecord) GetRefreshCount() int32 {
	if x != nil {
		return x.RefreshCount
	}
	return 0
}

func (x *ShopRefreshRecord) GetShopRefreshRecords() map[int32]*PlayerRefreshShopRecord {
	if x != nil {
		return x.ShopRefreshRecords
	}
	return nil
}

type PlayerRefreshShopRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []int32                `protobuf:"varint,2,rep,packed,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerRefreshShopRecord) Reset() {
	*x = PlayerRefreshShopRecord{}
	mi := &file_pb_bp_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRefreshShopRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRefreshShopRecord) ProtoMessage() {}

func (x *PlayerRefreshShopRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRefreshShopRecord.ProtoReflect.Descriptor instead.
func (*PlayerRefreshShopRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{228}
}

func (x *PlayerRefreshShopRecord) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

type PersonalWorldBossInfo struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	Score          int32                      `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	ScoreAwardInfo map[int32]*CommonAwardInfo `protobuf:"bytes,2,rep,name=score_award_info,json=scoreAwardInfo,proto3" json:"score_award_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BossAwardInfo  map[int32]*CommonAwardInfo `protobuf:"bytes,3,rep,name=boss_award_info,json=bossAwardInfo,proto3" json:"boss_award_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uuid           int32                      `protobuf:"varint,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PersonalWorldBossInfo) Reset() {
	*x = PersonalWorldBossInfo{}
	mi := &file_pb_bp_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonalWorldBossInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalWorldBossInfo) ProtoMessage() {}

func (x *PersonalWorldBossInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalWorldBossInfo.ProtoReflect.Descriptor instead.
func (*PersonalWorldBossInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{229}
}

func (x *PersonalWorldBossInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *PersonalWorldBossInfo) GetScoreAwardInfo() map[int32]*CommonAwardInfo {
	if x != nil {
		return x.ScoreAwardInfo
	}
	return nil
}

func (x *PersonalWorldBossInfo) GetBossAwardInfo() map[int32]*CommonAwardInfo {
	if x != nil {
		return x.BossAwardInfo
	}
	return nil
}

func (x *PersonalWorldBossInfo) GetUuid() int32 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

type CommonAwardInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AwardStatus   EReceiveRewardStatus   `protobuf:"varint,2,opt,name=award_status,json=awardStatus,proto3,enum=EReceiveRewardStatus" json:"award_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommonAwardInfo) Reset() {
	*x = CommonAwardInfo{}
	mi := &file_pb_bp_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommonAwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonAwardInfo) ProtoMessage() {}

func (x *CommonAwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonAwardInfo.ProtoReflect.Descriptor instead.
func (*CommonAwardInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{230}
}

func (x *CommonAwardInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommonAwardInfo) GetAwardStatus() EReceiveRewardStatus {
	if x != nil {
		return x.AwardStatus
	}
	return EReceiveRewardStatus_EReceiveRewardStatusNotReceive
}

type CraftEnergyRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       map[int32]int32        `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CraftEnergyRecord) Reset() {
	*x = CraftEnergyRecord{}
	mi := &file_pb_bp_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CraftEnergyRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftEnergyRecord) ProtoMessage() {}

func (x *CraftEnergyRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftEnergyRecord.ProtoReflect.Descriptor instead.
func (*CraftEnergyRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{231}
}

func (x *CraftEnergyRecord) GetRecords() map[int32]int32 {
	if x != nil {
		return x.Records
	}
	return nil
}

type WeeklyTowerRecord struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BeginTime       int64                  `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	MaxClimbUpId    int32                  `protobuf:"varint,2,opt,name=max_climb_up_id,json=maxClimbUpId,proto3" json:"max_climb_up_id,omitempty"`
	AwardClimbUpIds []int32                `protobuf:"varint,3,rep,packed,name=award_climb_up_ids,json=awardClimbUpIds,proto3" json:"award_climb_up_ids,omitempty"`
	RuleId          int32                  `protobuf:"varint,4,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WeeklyTowerRecord) Reset() {
	*x = WeeklyTowerRecord{}
	mi := &file_pb_bp_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeeklyTowerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyTowerRecord) ProtoMessage() {}

func (x *WeeklyTowerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyTowerRecord.ProtoReflect.Descriptor instead.
func (*WeeklyTowerRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{232}
}

func (x *WeeklyTowerRecord) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *WeeklyTowerRecord) GetMaxClimbUpId() int32 {
	if x != nil {
		return x.MaxClimbUpId
	}
	return 0
}

func (x *WeeklyTowerRecord) GetAwardClimbUpIds() []int32 {
	if x != nil {
		return x.AwardClimbUpIds
	}
	return nil
}

func (x *WeeklyTowerRecord) GetRuleId() int32 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

type CutSceneInfos struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	CutSceneInfos     map[int32]*CutSceneInfo `protobuf:"bytes,1,rep,name=cut_scene_infos,json=cutSceneInfos,proto3" json:"cut_scene_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	FinishedCutScenes map[int32]bool          `protobuf:"bytes,2,rep,name=finished_cut_scenes,json=finishedCutScenes,proto3" json:"finished_cut_scenes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FinishedInfos     map[int64]bool          `protobuf:"bytes,3,rep,name=finished_infos,json=finishedInfos,proto3" json:"finished_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CutSceneInfos) Reset() {
	*x = CutSceneInfos{}
	mi := &file_pb_bp_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CutSceneInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutSceneInfos) ProtoMessage() {}

func (x *CutSceneInfos) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutSceneInfos.ProtoReflect.Descriptor instead.
func (*CutSceneInfos) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{233}
}

func (x *CutSceneInfos) GetCutSceneInfos() map[int32]*CutSceneInfo {
	if x != nil {
		return x.CutSceneInfos
	}
	return nil
}

func (x *CutSceneInfos) GetFinishedCutScenes() map[int32]bool {
	if x != nil {
		return x.FinishedCutScenes
	}
	return nil
}

func (x *CutSceneInfos) GetFinishedInfos() map[int64]bool {
	if x != nil {
		return x.FinishedInfos
	}
	return nil
}

type CutSceneInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CutSceneId    int32                  `protobuf:"varint,1,opt,name=cut_scene_id,json=cutSceneId,proto3" json:"cut_scene_id,omitempty"`
	Flag          uint32                 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
	SceneId       uint32                 `protobuf:"varint,3,opt,name=scene_id,json=sceneId,proto3" json:"scene_id,omitempty"`
	EventData     *EventData             `protobuf:"bytes,4,opt,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CutSceneInfo) Reset() {
	*x = CutSceneInfo{}
	mi := &file_pb_bp_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CutSceneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutSceneInfo) ProtoMessage() {}

func (x *CutSceneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutSceneInfo.ProtoReflect.Descriptor instead.
func (*CutSceneInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{234}
}

func (x *CutSceneInfo) GetCutSceneId() int32 {
	if x != nil {
		return x.CutSceneId
	}
	return 0
}

func (x *CutSceneInfo) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *CutSceneInfo) GetSceneId() uint32 {
	if x != nil {
		return x.SceneId
	}
	return 0
}

func (x *CutSceneInfo) GetEventData() *EventData {
	if x != nil {
		return x.EventData
	}
	return nil
}

type UserRecommendPlayData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayMail      map[int32]int64        `protobuf:"bytes,1,rep,name=play_mail,json=playMail,proto3" json:"play_mail,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserRecommendPlayData) Reset() {
	*x = UserRecommendPlayData{}
	mi := &file_pb_bp_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRecommendPlayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRecommendPlayData) ProtoMessage() {}

func (x *UserRecommendPlayData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRecommendPlayData.ProtoReflect.Descriptor instead.
func (*UserRecommendPlayData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{235}
}

func (x *UserRecommendPlayData) GetPlayMail() map[int32]int64 {
	if x != nil {
		return x.PlayMail
	}
	return nil
}

type RideList struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Rides         map[int32]*RideData          `protobuf:"bytes,1,rep,name=rides,proto3" json:"rides,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Type          ERidePropertyType            `protobuf:"varint,2,opt,name=type,proto3,enum=ERidePropertyType" json:"type,omitempty"`
	SkinData      map[int32]*RideSkinContainer `protobuf:"bytes,3,rep,name=skin_data,json=skinData,proto3" json:"skin_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RideList) Reset() {
	*x = RideList{}
	mi := &file_pb_bp_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RideList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideList) ProtoMessage() {}

func (x *RideList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideList.ProtoReflect.Descriptor instead.
func (*RideList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{236}
}

func (x *RideList) GetRides() map[int32]*RideData {
	if x != nil {
		return x.Rides
	}
	return nil
}

func (x *RideList) GetType() ERidePropertyType {
	if x != nil {
		return x.Type
	}
	return ERidePropertyType_RidePropertyTypeNone
}

func (x *RideList) GetSkinData() map[int32]*RideSkinContainer {
	if x != nil {
		return x.SkinData
	}
	return nil
}

type RideSkinContainer struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	RideSkinId    int32                    `protobuf:"varint,1,opt,name=ride_skin_id,json=rideSkinId,proto3" json:"ride_skin_id,omitempty"`
	Sinks         map[uint32]*RideSkinData `protobuf:"bytes,2,rep,name=sinks,proto3" json:"sinks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RideSkinContainer) Reset() {
	*x = RideSkinContainer{}
	mi := &file_pb_bp_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RideSkinContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideSkinContainer) ProtoMessage() {}

func (x *RideSkinContainer) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideSkinContainer.ProtoReflect.Descriptor instead.
func (*RideSkinContainer) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{237}
}

func (x *RideSkinContainer) GetRideSkinId() int32 {
	if x != nil {
		return x.RideSkinId
	}
	return 0
}

func (x *RideSkinContainer) GetSinks() map[uint32]*RideSkinData {
	if x != nil {
		return x.Sinks
	}
	return nil
}

type RideSkinData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ActivateTime  int64                  `protobuf:"varint,1,opt,name=activate_time,json=activateTime,proto3" json:"activate_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RideSkinData) Reset() {
	*x = RideSkinData{}
	mi := &file_pb_bp_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RideSkinData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideSkinData) ProtoMessage() {}

func (x *RideSkinData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideSkinData.ProtoReflect.Descriptor instead.
func (*RideSkinData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{238}
}

func (x *RideSkinData) GetActivateTime() int64 {
	if x != nil {
		return x.ActivateTime
	}
	return 0
}

type RideData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RideId        int32                  `protobuf:"varint,1,opt,name=ride_id,json=rideId,proto3" json:"ride_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RideData) Reset() {
	*x = RideData{}
	mi := &file_pb_bp_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RideData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RideData) ProtoMessage() {}

func (x *RideData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RideData.ProtoReflect.Descriptor instead.
func (*RideData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{239}
}

func (x *RideData) GetRideId() int32 {
	if x != nil {
		return x.RideId
	}
	return 0
}

type PayOrderList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PayOrderList   []string               `protobuf:"bytes,1,rep,name=pay_order_list,json=payOrderList,proto3" json:"pay_order_list,omitempty"`
	PayRefundList  []string               `protobuf:"bytes,2,rep,name=pay_refund_list,json=payRefundList,proto3" json:"pay_refund_list,omitempty"`
	FirstPay       *PayData               `protobuf:"bytes,3,opt,name=first_pay,json=firstPay,proto3" json:"first_pay,omitempty"`
	OrderList      map[string]int32       `protobuf:"bytes,4,rep,name=order_list,json=orderList,proto3" json:"order_list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	OrderIndexList map[int64]int32        `protobuf:"bytes,5,rep,name=order_index_list,json=orderIndexList,proto3" json:"order_index_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PayOrderList) Reset() {
	*x = PayOrderList{}
	mi := &file_pb_bp_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayOrderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayOrderList) ProtoMessage() {}

func (x *PayOrderList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayOrderList.ProtoReflect.Descriptor instead.
func (*PayOrderList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{240}
}

func (x *PayOrderList) GetPayOrderList() []string {
	if x != nil {
		return x.PayOrderList
	}
	return nil
}

func (x *PayOrderList) GetPayRefundList() []string {
	if x != nil {
		return x.PayRefundList
	}
	return nil
}

func (x *PayOrderList) GetFirstPay() *PayData {
	if x != nil {
		return x.FirstPay
	}
	return nil
}

func (x *PayOrderList) GetOrderList() map[string]int32 {
	if x != nil {
		return x.OrderList
	}
	return nil
}

func (x *PayOrderList) GetOrderIndexList() map[int64]int32 {
	if x != nil {
		return x.OrderIndexList
	}
	return nil
}

type PayData struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	PayData       map[int32]*FirstPayInfo `protobuf:"bytes,1,rep,name=pay_data,json=payData,proto3" json:"pay_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayData) Reset() {
	*x = PayData{}
	mi := &file_pb_bp_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayData) ProtoMessage() {}

func (x *PayData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayData.ProtoReflect.Descriptor instead.
func (*PayData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{241}
}

func (x *PayData) GetPayData() map[int32]*FirstPayInfo {
	if x != nil {
		return x.PayData
	}
	return nil
}

type FirstPayInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FirstPayType  int32                  `protobuf:"varint,1,opt,name=first_pay_type,json=firstPayType,proto3" json:"first_pay_type,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FirstPayInfo) Reset() {
	*x = FirstPayInfo{}
	mi := &file_pb_bp_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirstPayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstPayInfo) ProtoMessage() {}

func (x *FirstPayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstPayInfo.ProtoReflect.Descriptor instead.
func (*FirstPayInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{242}
}

func (x *FirstPayInfo) GetFirstPayType() int32 {
	if x != nil {
		return x.FirstPayType
	}
	return 0
}

func (x *FirstPayInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type LifeProfession struct {
	state                     protoimpl.MessageState              `protogen:"open.v1"`
	ProfessionInfo            map[int32]*LifeProfessionBasic      `protobuf:"bytes,1,rep,name=profession_info,json=professionInfo,proto3" json:"profession_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LifeTargetInfo            map[int32]*LifeProfessionTargetInfo `protobuf:"bytes,2,rep,name=life_target_info,json=lifeTargetInfo,proto3" json:"life_target_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LifeProfessionRecipe      map[int32]*LifeProfessionRecipe     `protobuf:"bytes,3,rep,name=life_profession_recipe,json=lifeProfessionRecipe,proto3" json:"life_profession_recipe,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LifeProfessionAlchemyInfo *LifeProfessionAlchemyInfo          `protobuf:"bytes,4,opt,name=life_profession_alchemy_info,json=lifeProfessionAlchemyInfo,proto3" json:"life_profession_alchemy_info,omitempty"`
	SpareEnergy               map[int32]int32                     `protobuf:"bytes,5,rep,name=spare_energy,json=spareEnergy,proto3" json:"spare_energy,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Point                     int32                               `protobuf:"varint,6,opt,name=point,proto3" json:"point,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LifeProfession) Reset() {
	*x = LifeProfession{}
	mi := &file_pb_bp_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfession) ProtoMessage() {}

func (x *LifeProfession) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfession.ProtoReflect.Descriptor instead.
func (*LifeProfession) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{243}
}

func (x *LifeProfession) GetProfessionInfo() map[int32]*LifeProfessionBasic {
	if x != nil {
		return x.ProfessionInfo
	}
	return nil
}

func (x *LifeProfession) GetLifeTargetInfo() map[int32]*LifeProfessionTargetInfo {
	if x != nil {
		return x.LifeTargetInfo
	}
	return nil
}

func (x *LifeProfession) GetLifeProfessionRecipe() map[int32]*LifeProfessionRecipe {
	if x != nil {
		return x.LifeProfessionRecipe
	}
	return nil
}

func (x *LifeProfession) GetLifeProfessionAlchemyInfo() *LifeProfessionAlchemyInfo {
	if x != nil {
		return x.LifeProfessionAlchemyInfo
	}
	return nil
}

func (x *LifeProfession) GetSpareEnergy() map[int32]int32 {
	if x != nil {
		return x.SpareEnergy
	}
	return nil
}

func (x *LifeProfession) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type LifeProfessionAlchemyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FailureCount  uint32                 `protobuf:"varint,1,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	RdCount       uint32                 `protobuf:"varint,2,opt,name=rd_count,json=rdCount,proto3" json:"rd_count,omitempty"`
	LastResetTime int64                  `protobuf:"varint,3,opt,name=last_reset_time,json=lastResetTime,proto3" json:"last_reset_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifeProfessionAlchemyInfo) Reset() {
	*x = LifeProfessionAlchemyInfo{}
	mi := &file_pb_bp_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfessionAlchemyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfessionAlchemyInfo) ProtoMessage() {}

func (x *LifeProfessionAlchemyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfessionAlchemyInfo.ProtoReflect.Descriptor instead.
func (*LifeProfessionAlchemyInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{244}
}

func (x *LifeProfessionAlchemyInfo) GetFailureCount() uint32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *LifeProfessionAlchemyInfo) GetRdCount() uint32 {
	if x != nil {
		return x.RdCount
	}
	return 0
}

func (x *LifeProfessionAlchemyInfo) GetLastResetTime() int64 {
	if x != nil {
		return x.LastResetTime
	}
	return 0
}

type LifeProfessionBasic struct {
	state                      protoimpl.MessageState                  `protogen:"open.v1"`
	Id                         int32                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                      int32                                   `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp                        int32                                   `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Specialization             map[int32]*LiftProfessionSpecialization `protobuf:"bytes,5,rep,name=specialization,proto3" json:"specialization,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CurrentSpecializationPoint int32                                   `protobuf:"varint,6,opt,name=current_specialization_point,json=currentSpecializationPoint,proto3" json:"current_specialization_point,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *LifeProfessionBasic) Reset() {
	*x = LifeProfessionBasic{}
	mi := &file_pb_bp_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfessionBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfessionBasic) ProtoMessage() {}

func (x *LifeProfessionBasic) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfessionBasic.ProtoReflect.Descriptor instead.
func (*LifeProfessionBasic) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{245}
}

func (x *LifeProfessionBasic) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LifeProfessionBasic) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LifeProfessionBasic) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *LifeProfessionBasic) GetSpecialization() map[int32]*LiftProfessionSpecialization {
	if x != nil {
		return x.Specialization
	}
	return nil
}

func (x *LifeProfessionBasic) GetCurrentSpecializationPoint() int32 {
	if x != nil {
		return x.CurrentSpecializationPoint
	}
	return 0
}

type LiftProfessionSpecialization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level         int32                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiftProfessionSpecialization) Reset() {
	*x = LiftProfessionSpecialization{}
	mi := &file_pb_bp_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiftProfessionSpecialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiftProfessionSpecialization) ProtoMessage() {}

func (x *LiftProfessionSpecialization) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiftProfessionSpecialization.ProtoReflect.Descriptor instead.
func (*LiftProfessionSpecialization) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{246}
}

func (x *LiftProfessionSpecialization) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LiftProfessionSpecialization) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type LifeProfessionRecipe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UnlockTime    int64                  `protobuf:"varint,2,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifeProfessionRecipe) Reset() {
	*x = LifeProfessionRecipe{}
	mi := &file_pb_bp_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfessionRecipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfessionRecipe) ProtoMessage() {}

func (x *LifeProfessionRecipe) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfessionRecipe.ProtoReflect.Descriptor instead.
func (*LifeProfessionRecipe) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{247}
}

func (x *LifeProfessionRecipe) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LifeProfessionRecipe) GetUnlockTime() int64 {
	if x != nil {
		return x.UnlockTime
	}
	return 0
}

type LifeProfessionTargetInfo struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Id                     int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                  int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Level                  int32                  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	LifeTargetRewardStates []uint32               `protobuf:"varint,4,rep,packed,name=life_target_reward_states,json=lifeTargetRewardStates,proto3" json:"life_target_reward_states,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LifeProfessionTargetInfo) Reset() {
	*x = LifeProfessionTargetInfo{}
	mi := &file_pb_bp_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfessionTargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfessionTargetInfo) ProtoMessage() {}

func (x *LifeProfessionTargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfessionTargetInfo.ProtoReflect.Descriptor instead.
func (*LifeProfessionTargetInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{248}
}

func (x *LifeProfessionTargetInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LifeProfessionTargetInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LifeProfessionTargetInfo) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LifeProfessionTargetInfo) GetLifeTargetRewardStates() []uint32 {
	if x != nil {
		return x.LifeTargetRewardStates
	}
	return nil
}

type LifeProfessionWork struct {
	state                         protoimpl.MessageState    `protogen:"open.v1"`
	LifeProfessionWorkInfo        *LifeProfessionWorkInfo   `protobuf:"bytes,1,opt,name=life_profession_work_info,json=lifeProfessionWorkInfo,proto3" json:"life_profession_work_info,omitempty"`
	LifeProfessionWorkHistoryInfo []*LifeProfessionWorkInfo `protobuf:"bytes,2,rep,name=life_profession_work_history_info,json=lifeProfessionWorkHistoryInfo,proto3" json:"life_profession_work_history_info,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *LifeProfessionWork) Reset() {
	*x = LifeProfessionWork{}
	mi := &file_pb_bp_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfessionWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfessionWork) ProtoMessage() {}

func (x *LifeProfessionWork) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfessionWork.ProtoReflect.Descriptor instead.
func (*LifeProfessionWork) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{249}
}

func (x *LifeProfessionWork) GetLifeProfessionWorkInfo() *LifeProfessionWorkInfo {
	if x != nil {
		return x.LifeProfessionWorkInfo
	}
	return nil
}

func (x *LifeProfessionWork) GetLifeProfessionWorkHistoryInfo() []*LifeProfessionWorkInfo {
	if x != nil {
		return x.LifeProfessionWorkHistoryInfo
	}
	return nil
}

type LifeProfessionWorkInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LifeProfessionId uint32                 `protobuf:"varint,1,opt,name=life_profession_id,json=lifeProfessionId,proto3" json:"life_profession_id,omitempty"`
	BeginTime        uint32                 `protobuf:"varint,2,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime          uint32                 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Count            uint32                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Cost             uint32                 `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Reward           []*Item                `protobuf:"bytes,6,rep,name=reward,proto3" json:"reward,omitempty"`
	CostId           uint32                 `protobuf:"varint,7,opt,name=cost_id,json=costId,proto3" json:"cost_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LifeProfessionWorkInfo) Reset() {
	*x = LifeProfessionWorkInfo{}
	mi := &file_pb_bp_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifeProfessionWorkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifeProfessionWorkInfo) ProtoMessage() {}

func (x *LifeProfessionWorkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifeProfessionWorkInfo.ProtoReflect.Descriptor instead.
func (*LifeProfessionWorkInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{250}
}

func (x *LifeProfessionWorkInfo) GetLifeProfessionId() uint32 {
	if x != nil {
		return x.LifeProfessionId
	}
	return 0
}

func (x *LifeProfessionWorkInfo) GetBeginTime() uint32 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *LifeProfessionWorkInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *LifeProfessionWorkInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LifeProfessionWorkInfo) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *LifeProfessionWorkInfo) GetReward() []*Item {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *LifeProfessionWorkInfo) GetCostId() uint32 {
	if x != nil {
		return x.CostId
	}
	return 0
}

type UserActivityList struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Activities    map[int64]*UserActivityInfo `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserActivityList) Reset() {
	*x = UserActivityList{}
	mi := &file_pb_bp_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserActivityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityList) ProtoMessage() {}

func (x *UserActivityList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityList.ProtoReflect.Descriptor instead.
func (*UserActivityList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{251}
}

func (x *UserActivityList) GetActivities() map[int64]*UserActivityInfo {
	if x != nil {
		return x.Activities
	}
	return nil
}

type UserActivityInfo struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	StartTime     uint64                             `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       uint64                             `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Rewards       map[uint32]*UserActivityRewardInfo `protobuf:"bytes,4,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserActivityInfo) Reset() {
	*x = UserActivityInfo{}
	mi := &file_pb_bp_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserActivityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityInfo) ProtoMessage() {}

func (x *UserActivityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityInfo.ProtoReflect.Descriptor instead.
func (*UserActivityInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{252}
}

func (x *UserActivityInfo) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *UserActivityInfo) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *UserActivityInfo) GetRewards() map[uint32]*UserActivityRewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type UserActivityRewardInfo struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Id            uint32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        uint32                       `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Functions     map[uint32]*GameFunctionData `protobuf:"bytes,3,rep,name=functions,proto3" json:"functions,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserActivityRewardInfo) Reset() {
	*x = UserActivityRewardInfo{}
	mi := &file_pb_bp_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserActivityRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActivityRewardInfo) ProtoMessage() {}

func (x *UserActivityRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActivityRewardInfo.ProtoReflect.Descriptor instead.
func (*UserActivityRewardInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{253}
}

func (x *UserActivityRewardInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserActivityRewardInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserActivityRewardInfo) GetFunctions() map[uint32]*GameFunctionData {
	if x != nil {
		return x.Functions
	}
	return nil
}

type GameFunctionData struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Id            uint32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	State         bool                         `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	ProductId     uint32                       `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	FunctionTimes map[uint32]*FunctionTimeData `protobuf:"bytes,4,rep,name=function_times,json=functionTimes,proto3" json:"function_times,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameFunctionData) Reset() {
	*x = GameFunctionData{}
	mi := &file_pb_bp_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameFunctionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameFunctionData) ProtoMessage() {}

func (x *GameFunctionData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameFunctionData.ProtoReflect.Descriptor instead.
func (*GameFunctionData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{254}
}

func (x *GameFunctionData) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameFunctionData) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *GameFunctionData) GetProductId() uint32 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *GameFunctionData) GetFunctionTimes() map[uint32]*FunctionTimeData {
	if x != nil {
		return x.FunctionTimes
	}
	return nil
}

type FunctionTimeData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Times         uint32                 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	Timestamp     uint32                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionTimeData) Reset() {
	*x = FunctionTimeData{}
	mi := &file_pb_bp_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionTimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionTimeData) ProtoMessage() {}

func (x *FunctionTimeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionTimeData.ProtoReflect.Descriptor instead.
func (*FunctionTimeData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{255}
}

func (x *FunctionTimeData) GetTimes() uint32 {
	if x != nil {
		return x.Times
	}
	return 0
}

func (x *FunctionTimeData) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PlayerRecord struct {
	state             protoimpl.MessageState      `protogen:"open.v1"`
	PlayerRecordInfos map[int32]*PlayerRecordInfo `protobuf:"bytes,1,rep,name=player_record_infos,json=playerRecordInfos,proto3" json:"player_record_infos,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PlayerRecord) Reset() {
	*x = PlayerRecord{}
	mi := &file_pb_bp_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRecord) ProtoMessage() {}

func (x *PlayerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRecord.ProtoReflect.Descriptor instead.
func (*PlayerRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{256}
}

func (x *PlayerRecord) GetPlayerRecordInfos() map[int32]*PlayerRecordInfo {
	if x != nil {
		return x.PlayerRecordInfos
	}
	return nil
}

type PlayerRecordInfo struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	PlayerRecords map[int32]*PlayerRecordSingle `protobuf:"bytes,1,rep,name=player_records,json=playerRecords,proto3" json:"player_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerRecordInfo) Reset() {
	*x = PlayerRecordInfo{}
	mi := &file_pb_bp_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRecordInfo) ProtoMessage() {}

func (x *PlayerRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRecordInfo.ProtoReflect.Descriptor instead.
func (*PlayerRecordInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{257}
}

func (x *PlayerRecordInfo) GetPlayerRecords() map[int32]*PlayerRecordSingle {
	if x != nil {
		return x.PlayerRecords
	}
	return nil
}

type PlayerRecordSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	CycleCount    int64                  `protobuf:"varint,3,opt,name=cycle_count,json=cycleCount,proto3" json:"cycle_count,omitempty"`
	CycleTime     int64                  `protobuf:"varint,4,opt,name=cycle_time,json=cycleTime,proto3" json:"cycle_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerRecordSingle) Reset() {
	*x = PlayerRecordSingle{}
	mi := &file_pb_bp_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerRecordSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRecordSingle) ProtoMessage() {}

func (x *PlayerRecordSingle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRecordSingle.ProtoReflect.Descriptor instead.
func (*PlayerRecordSingle) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{258}
}

func (x *PlayerRecordSingle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PlayerRecordSingle) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PlayerRecordSingle) GetCycleCount() int64 {
	if x != nil {
		return x.CycleCount
	}
	return 0
}

func (x *PlayerRecordSingle) GetCycleTime() int64 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

type DropContainerInfo struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	DropContainers     map[int32]*DropContainerSingle `protobuf:"bytes,1,rep,name=drop_containers,json=dropContainers,proto3" json:"drop_containers,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DropAwardHistories map[int32]*DropAwardHistory    `protobuf:"bytes,2,rep,name=drop_award_histories,json=dropAwardHistories,proto3" json:"drop_award_histories,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DropContainerInfo) Reset() {
	*x = DropContainerInfo{}
	mi := &file_pb_bp_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropContainerInfo) ProtoMessage() {}

func (x *DropContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropContainerInfo.ProtoReflect.Descriptor instead.
func (*DropContainerInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{259}
}

func (x *DropContainerInfo) GetDropContainers() map[int32]*DropContainerSingle {
	if x != nil {
		return x.DropContainers
	}
	return nil
}

func (x *DropContainerInfo) GetDropAwardHistories() map[int32]*DropAwardHistory {
	if x != nil {
		return x.DropAwardHistories
	}
	return nil
}

type DropContainerSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CycleTime     int64                  `protobuf:"varint,3,opt,name=cycle_time,json=cycleTime,proto3" json:"cycle_time,omitempty"`
	HistoryCount  int32                  `protobuf:"varint,4,opt,name=history_count,json=historyCount,proto3" json:"history_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropContainerSingle) Reset() {
	*x = DropContainerSingle{}
	mi := &file_pb_bp_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropContainerSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropContainerSingle) ProtoMessage() {}

func (x *DropContainerSingle) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropContainerSingle.ProtoReflect.Descriptor instead.
func (*DropContainerSingle) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{260}
}

func (x *DropContainerSingle) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DropContainerSingle) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DropContainerSingle) GetCycleTime() int64 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

func (x *DropContainerSingle) GetHistoryCount() int32 {
	if x != nil {
		return x.HistoryCount
	}
	return 0
}

type DropAwardHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CycleTime     int64                  `protobuf:"varint,3,opt,name=cycle_time,json=cycleTime,proto3" json:"cycle_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropAwardHistory) Reset() {
	*x = DropAwardHistory{}
	mi := &file_pb_bp_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropAwardHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropAwardHistory) ProtoMessage() {}

func (x *DropAwardHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropAwardHistory.ProtoReflect.Descriptor instead.
func (*DropAwardHistory) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{261}
}

func (x *DropAwardHistory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DropAwardHistory) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DropAwardHistory) GetCycleTime() int64 {
	if x != nil {
		return x.CycleTime
	}
	return 0
}

type MonthlyCard struct {
	state                    protoimpl.MessageState        `protogen:"open.v1"`
	ExpireTime               int64                         `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	MonthlyCardInfo          map[int32]*MonthlyCardInfo    `protobuf:"bytes,2,rep,name=monthly_card_info,json=monthlyCardInfo,proto3" json:"monthly_card_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastAwardMonthlyCardTime int32                         `protobuf:"varint,3,opt,name=last_award_monthly_card_time,json=lastAwardMonthlyCardTime,proto3" json:"last_award_monthly_card_time,omitempty"`
	TipsClicked              int32                         `protobuf:"varint,4,opt,name=tips_clicked,json=tipsClicked,proto3" json:"tips_clicked,omitempty"`
	TipsDay                  int32                         `protobuf:"varint,5,opt,name=tips_day,json=tipsDay,proto3" json:"tips_day,omitempty"`
	Items                    []*Item                       `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	MonthlyCardBuyList       map[int64]*MonthlyCardBuyList `protobuf:"bytes,7,rep,name=monthly_card_buy_list,json=monthlyCardBuyList,proto3" json:"monthly_card_buy_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *MonthlyCard) Reset() {
	*x = MonthlyCard{}
	mi := &file_pb_bp_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthlyCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyCard) ProtoMessage() {}

func (x *MonthlyCard) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyCard.ProtoReflect.Descriptor instead.
func (*MonthlyCard) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{262}
}

func (x *MonthlyCard) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *MonthlyCard) GetMonthlyCardInfo() map[int32]*MonthlyCardInfo {
	if x != nil {
		return x.MonthlyCardInfo
	}
	return nil
}

func (x *MonthlyCard) GetLastAwardMonthlyCardTime() int32 {
	if x != nil {
		return x.LastAwardMonthlyCardTime
	}
	return 0
}

func (x *MonthlyCard) GetTipsClicked() int32 {
	if x != nil {
		return x.TipsClicked
	}
	return 0
}

func (x *MonthlyCard) GetTipsDay() int32 {
	if x != nil {
		return x.TipsDay
	}
	return 0
}

func (x *MonthlyCard) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *MonthlyCard) GetMonthlyCardBuyList() map[int64]*MonthlyCardBuyList {
	if x != nil {
		return x.MonthlyCardBuyList
	}
	return nil
}

type MonthlyCardInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LimitAwardStatus EReceiveRewardStatus   `protobuf:"varint,1,opt,name=limit_award_status,json=limitAwardStatus,proto3,enum=EReceiveRewardStatus" json:"limit_award_status,omitempty"`
	AwardStatus      EReceiveRewardStatus   `protobuf:"varint,2,opt,name=award_status,json=awardStatus,proto3,enum=EReceiveRewardStatus" json:"award_status,omitempty"`
	MonthCardItem    *MonthCardItem         `protobuf:"bytes,3,opt,name=month_card_item,json=monthCardItem,proto3" json:"month_card_item,omitempty"`
	BeginTime        int64                  `protobuf:"varint,4,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime          int64                  `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MonthlyCardInfo) Reset() {
	*x = MonthlyCardInfo{}
	mi := &file_pb_bp_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthlyCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyCardInfo) ProtoMessage() {}

func (x *MonthlyCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyCardInfo.ProtoReflect.Descriptor instead.
func (*MonthlyCardInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{263}
}

func (x *MonthlyCardInfo) GetLimitAwardStatus() EReceiveRewardStatus {
	if x != nil {
		return x.LimitAwardStatus
	}
	return EReceiveRewardStatus_EReceiveRewardStatusNotReceive
}

func (x *MonthlyCardInfo) GetAwardStatus() EReceiveRewardStatus {
	if x != nil {
		return x.AwardStatus
	}
	return EReceiveRewardStatus_EReceiveRewardStatusNotReceive
}

func (x *MonthlyCardInfo) GetMonthCardItem() *MonthCardItem {
	if x != nil {
		return x.MonthCardItem
	}
	return nil
}

func (x *MonthlyCardInfo) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MonthlyCardInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type MonthCardItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        int32                  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	CreateTime    int64                  `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MonthCardItem) Reset() {
	*x = MonthCardItem{}
	mi := &file_pb_bp_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthCardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthCardItem) ProtoMessage() {}

func (x *MonthCardItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthCardItem.ProtoReflect.Descriptor instead.
func (*MonthCardItem) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{264}
}

func (x *MonthCardItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *MonthCardItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

type MonthlyCardBuyList struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BeginTime        int64                  `protobuf:"varint,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndTime          int64                  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LastAwardDayTime int64                  `protobuf:"varint,3,opt,name=last_award_day_time,json=lastAwardDayTime,proto3" json:"last_award_day_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MonthlyCardBuyList) Reset() {
	*x = MonthlyCardBuyList{}
	mi := &file_pb_bp_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MonthlyCardBuyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyCardBuyList) ProtoMessage() {}

func (x *MonthlyCardBuyList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyCardBuyList.ProtoReflect.Descriptor instead.
func (*MonthlyCardBuyList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{265}
}

func (x *MonthlyCardBuyList) GetBeginTime() int64 {
	if x != nil {
		return x.BeginTime
	}
	return 0
}

func (x *MonthlyCardBuyList) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MonthlyCardBuyList) GetLastAwardDayTime() int64 {
	if x != nil {
		return x.LastAwardDayTime
	}
	return 0
}

type FashionBenefit struct {
	state             protoimpl.MessageState             `protogen:"open.v1"`
	LastRewardId      int32                              `protobuf:"varint,1,opt,name=last_reward_id,json=lastRewardId,proto3" json:"last_reward_id,omitempty"`
	Level             int32                              `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	PointsTask        int32                              `protobuf:"varint,3,opt,name=points_task,json=pointsTask,proto3" json:"points_task,omitempty"`
	PointsCycle       int32                              `protobuf:"varint,4,opt,name=points_cycle,json=pointsCycle,proto3" json:"points_cycle,omitempty"`
	PointsCollection  int32                              `protobuf:"varint,5,opt,name=points_collection,json=pointsCollection,proto3" json:"points_collection,omitempty"`
	TaskList          map[int32]*FashionBenefitTaskInfo  `protobuf:"bytes,6,rep,name=task_list,json=taskList,proto3" json:"task_list,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CollectionHistory []*FashionBenefitCollectionHistory `protobuf:"bytes,7,rep,name=collection_history,json=collectionHistory,proto3" json:"collection_history,omitempty"`
	NextRefreshTime   int64                              `protobuf:"varint,8,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	MaxPoints         int32                              `protobuf:"varint,9,opt,name=max_points,json=maxPoints,proto3" json:"max_points,omitempty"`
	LastAddTime       int64                              `protobuf:"varint,10,opt,name=last_add_time,json=lastAddTime,proto3" json:"last_add_time,omitempty"`
	CurDayMaxPoints   int32                              `protobuf:"varint,11,opt,name=cur_day_max_points,json=curDayMaxPoints,proto3" json:"cur_day_max_points,omitempty"`
	ExpireCycle       int32                              `protobuf:"varint,12,opt,name=expire_cycle,json=expireCycle,proto3" json:"expire_cycle,omitempty"`
	LastLevel         int32                              `protobuf:"varint,13,opt,name=last_level,json=lastLevel,proto3" json:"last_level,omitempty"`
	FirtExpireTime    int64                              `protobuf:"varint,14,opt,name=firt_expire_time,json=firtExpireTime,proto3" json:"firt_expire_time,omitempty"`
	LastRewardIds     []int32                            `protobuf:"varint,15,rep,packed,name=last_reward_ids,json=lastRewardIds,proto3" json:"last_reward_ids,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FashionBenefit) Reset() {
	*x = FashionBenefit{}
	mi := &file_pb_bp_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionBenefit) ProtoMessage() {}

func (x *FashionBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionBenefit.ProtoReflect.Descriptor instead.
func (*FashionBenefit) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{266}
}

func (x *FashionBenefit) GetLastRewardId() int32 {
	if x != nil {
		return x.LastRewardId
	}
	return 0
}

func (x *FashionBenefit) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FashionBenefit) GetPointsTask() int32 {
	if x != nil {
		return x.PointsTask
	}
	return 0
}

func (x *FashionBenefit) GetPointsCycle() int32 {
	if x != nil {
		return x.PointsCycle
	}
	return 0
}

func (x *FashionBenefit) GetPointsCollection() int32 {
	if x != nil {
		return x.PointsCollection
	}
	return 0
}

func (x *FashionBenefit) GetTaskList() map[int32]*FashionBenefitTaskInfo {
	if x != nil {
		return x.TaskList
	}
	return nil
}

func (x *FashionBenefit) GetCollectionHistory() []*FashionBenefitCollectionHistory {
	if x != nil {
		return x.CollectionHistory
	}
	return nil
}

func (x *FashionBenefit) GetNextRefreshTime() int64 {
	if x != nil {
		return x.NextRefreshTime
	}
	return 0
}

func (x *FashionBenefit) GetMaxPoints() int32 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

func (x *FashionBenefit) GetLastAddTime() int64 {
	if x != nil {
		return x.LastAddTime
	}
	return 0
}

func (x *FashionBenefit) GetCurDayMaxPoints() int32 {
	if x != nil {
		return x.CurDayMaxPoints
	}
	return 0
}

func (x *FashionBenefit) GetExpireCycle() int32 {
	if x != nil {
		return x.ExpireCycle
	}
	return 0
}

func (x *FashionBenefit) GetLastLevel() int32 {
	if x != nil {
		return x.LastLevel
	}
	return 0
}

func (x *FashionBenefit) GetFirtExpireTime() int64 {
	if x != nil {
		return x.FirtExpireTime
	}
	return 0
}

func (x *FashionBenefit) GetLastRewardIds() []int32 {
	if x != nil {
		return x.LastRewardIds
	}
	return nil
}

type FashionBenefitCollectionHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FashionId     int32                  `protobuf:"varint,1,opt,name=fashion_id,json=fashionId,proto3" json:"fashion_id,omitempty"`
	Time          int64                  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Type          int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Parameter     int32                  `protobuf:"varint,4,opt,name=parameter,proto3" json:"parameter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FashionBenefitCollectionHistory) Reset() {
	*x = FashionBenefitCollectionHistory{}
	mi := &file_pb_bp_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionBenefitCollectionHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionBenefitCollectionHistory) ProtoMessage() {}

func (x *FashionBenefitCollectionHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionBenefitCollectionHistory.ProtoReflect.Descriptor instead.
func (*FashionBenefitCollectionHistory) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{267}
}

func (x *FashionBenefitCollectionHistory) GetFashionId() int32 {
	if x != nil {
		return x.FashionId
	}
	return 0
}

func (x *FashionBenefitCollectionHistory) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FashionBenefitCollectionHistory) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FashionBenefitCollectionHistory) GetParameter() int32 {
	if x != nil {
		return x.Parameter
	}
	return 0
}

type FashionBenefitTaskInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Progress      int32                  `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FashionBenefitTaskInfo) Reset() {
	*x = FashionBenefitTaskInfo{}
	mi := &file_pb_bp_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FashionBenefitTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FashionBenefitTaskInfo) ProtoMessage() {}

func (x *FashionBenefitTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FashionBenefitTaskInfo.ProtoReflect.Descriptor instead.
func (*FashionBenefitTaskInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{268}
}

func (x *FashionBenefitTaskInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FashionBenefitTaskInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FashionBenefitTaskInfo) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type ItemCurrency struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	IsInit        bool                    `protobuf:"varint,1,opt,name=is_init,json=isInit,proto3" json:"is_init,omitempty"`
	CurrencyDatas map[int32]*CurrencyData `protobuf:"bytes,2,rep,name=currency_datas,json=currencyDatas,proto3" json:"currency_datas,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemCurrency) Reset() {
	*x = ItemCurrency{}
	mi := &file_pb_bp_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemCurrency) ProtoMessage() {}

func (x *ItemCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemCurrency.ProtoReflect.Descriptor instead.
func (*ItemCurrency) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{269}
}

func (x *ItemCurrency) GetIsInit() bool {
	if x != nil {
		return x.IsInit
	}
	return false
}

func (x *ItemCurrency) GetCurrencyDatas() map[int32]*CurrencyData {
	if x != nil {
		return x.CurrencyDatas
	}
	return nil
}

type CurrencyData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigId      int32                  `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Count         int64                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyData) Reset() {
	*x = CurrencyData{}
	mi := &file_pb_bp_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyData) ProtoMessage() {}

func (x *CurrencyData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyData.ProtoReflect.Descriptor instead.
func (*CurrencyData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{270}
}

func (x *CurrencyData) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *CurrencyData) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PrivilegeEffectData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NormalPassId    int32                  `protobuf:"varint,1,opt,name=normal_pass_id,json=normalPassId,proto3" json:"normal_pass_id,omitempty"`
	PrimePassId     int32                  `protobuf:"varint,2,opt,name=prime_pass_id,json=primePassId,proto3" json:"prime_pass_id,omitempty"`
	NormalPassIdMap map[int32]bool         `protobuf:"bytes,3,rep,name=normal_pass_id_map,json=normalPassIdMap,proto3" json:"normal_pass_id_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	PrimePassIdMap  map[int32]bool         `protobuf:"bytes,4,rep,name=prime_pass_id_map,json=primePassIdMap,proto3" json:"prime_pass_id_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrivilegeEffectData) Reset() {
	*x = PrivilegeEffectData{}
	mi := &file_pb_bp_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivilegeEffectData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivilegeEffectData) ProtoMessage() {}

func (x *PrivilegeEffectData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivilegeEffectData.ProtoReflect.Descriptor instead.
func (*PrivilegeEffectData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{271}
}

func (x *PrivilegeEffectData) GetNormalPassId() int32 {
	if x != nil {
		return x.NormalPassId
	}
	return 0
}

func (x *PrivilegeEffectData) GetPrimePassId() int32 {
	if x != nil {
		return x.PrimePassId
	}
	return 0
}

func (x *PrivilegeEffectData) GetNormalPassIdMap() map[int32]bool {
	if x != nil {
		return x.NormalPassIdMap
	}
	return nil
}

func (x *PrivilegeEffectData) GetPrimePassIdMap() map[int32]bool {
	if x != nil {
		return x.PrimePassIdMap
	}
	return nil
}

type SyncContainerData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VData         *CharSerialize         `protobuf:"bytes,1,opt,name=VData,proto3" json:"VData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncContainerData) Reset() {
	*x = SyncContainerData{}
	mi := &file_pb_bp_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncContainerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncContainerData) ProtoMessage() {}

func (x *SyncContainerData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncContainerData.ProtoReflect.Descriptor instead.
func (*SyncContainerData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{272}
}

func (x *SyncContainerData) GetVData() *CharSerialize {
	if x != nil {
		return x.VData
	}
	return nil
}

type CharSerialize struct {
	state                    protoimpl.MessageState    `protogen:"open.v1"`
	CharId                   int64                     `protobuf:"varint,1,opt,name=char_id,json=charId,proto3" json:"char_id,omitempty"`
	CharBase                 *CharBaseInfo             `protobuf:"bytes,2,opt,name=char_base,json=charBase,proto3" json:"char_base,omitempty"`
	SceneData                *SceneData                `protobuf:"bytes,3,opt,name=scene_data,json=sceneData,proto3" json:"scene_data,omitempty"`
	SceneLuaData             *SceneLuaData             `protobuf:"bytes,4,opt,name=scene_lua_data,json=sceneLuaData,proto3" json:"scene_lua_data,omitempty"`
	PioneerData              *PioneerData              `protobuf:"bytes,5,opt,name=pioneer_data,json=pioneerData,proto3" json:"pioneer_data,omitempty"`
	BuffInfo                 *BuffDBInfo               `protobuf:"bytes,6,opt,name=buff_info,json=buffInfo,proto3" json:"buff_info,omitempty"`
	ItemPackage              *ItemPackage              `protobuf:"bytes,7,opt,name=item_package,json=itemPackage,proto3" json:"item_package,omitempty"`
	QuestList                *QuestDataList            `protobuf:"bytes,8,opt,name=quest_list,json=questList,proto3" json:"quest_list,omitempty"`
	SettingData              *SettingData              `protobuf:"bytes,9,opt,name=setting_data,json=settingData,proto3" json:"setting_data,omitempty"`
	MiscInfo                 *MiscInfo                 `protobuf:"bytes,10,opt,name=misc_info,json=miscInfo,proto3" json:"misc_info,omitempty"`
	ExchangeItems            *ExchangeItem             `protobuf:"bytes,11,opt,name=exchange_items,json=exchangeItems,proto3" json:"exchange_items,omitempty"`
	Equip                    *EquipList                `protobuf:"bytes,12,opt,name=equip,proto3" json:"equip,omitempty"`
	EnergyItem               *EnergyItem               `protobuf:"bytes,13,opt,name=energy_item,json=energyItem,proto3" json:"energy_item,omitempty"`
	MapData                  *MapData                  `protobuf:"bytes,14,opt,name=map_data,json=mapData,proto3" json:"map_data,omitempty"`
	DungeonList              *DungeonList              `protobuf:"bytes,15,opt,name=dungeon_list,json=dungeonList,proto3" json:"dungeon_list,omitempty"`
	Attr                     *UserFightAttr            `protobuf:"bytes,16,opt,name=attr,proto3" json:"attr,omitempty"`
	Fashion                  *FashionMgr               `protobuf:"bytes,17,opt,name=fashion,proto3" json:"fashion,omitempty"`
	ProfileList              *ProfileList              `protobuf:"bytes,18,opt,name=profile_list,json=profileList,proto3" json:"profile_list,omitempty"`
	Help                     *PlayHelper               `protobuf:"bytes,19,opt,name=help,proto3" json:"help,omitempty"`
	CounterList              *CounterList              `protobuf:"bytes,20,opt,name=counter_list,json=counterList,proto3" json:"counter_list,omitempty"`
	PersonalObj              *PersonalObject           `protobuf:"bytes,21,opt,name=personal_obj,json=personalObj,proto3" json:"personal_obj,omitempty"`
	RoleLevel                *RoleLevel                `protobuf:"bytes,22,opt,name=role_level,json=roleLevel,proto3" json:"role_level,omitempty"`
	Pivot                    *Pivot                    `protobuf:"bytes,23,opt,name=pivot,proto3" json:"pivot,omitempty"`
	TransferPoint            *TransferPoint            `protobuf:"bytes,24,opt,name=transfer_point,json=transferPoint,proto3" json:"transfer_point,omitempty"`
	PlanetMemory             *PlanetMemory             `protobuf:"bytes,25,opt,name=planet_memory,json=planetMemory,proto3" json:"planet_memory,omitempty"`
	PlanetMemoryTarget       *SeasonTarget             `protobuf:"bytes,26,opt,name=planet_memory_target,json=planetMemoryTarget,proto3" json:"planet_memory_target,omitempty"`
	RedDot                   *RedDotData               `protobuf:"bytes,27,opt,name=red_dot,json=redDot,proto3" json:"red_dot,omitempty"`
	Resonance                *Resonance                `protobuf:"bytes,28,opt,name=resonance,proto3" json:"resonance,omitempty"`
	CutsState                *CutsState                `protobuf:"bytes,29,opt,name=cuts_state,json=cutsState,proto3" json:"cuts_state,omitempty"`
	InvestigateList          *InvestigateList          `protobuf:"bytes,30,opt,name=investigate_list,json=investigateList,proto3" json:"investigate_list,omitempty"`
	Records                  *ParkourRecordList        `protobuf:"bytes,31,opt,name=records,proto3" json:"records,omitempty"`
	Interaction              *InteractionInfo          `protobuf:"bytes,32,opt,name=interaction,proto3" json:"interaction,omitempty"`
	SeasonQuestList          *SeasonQuestList          `protobuf:"bytes,33,opt,name=season_quest_list,json=seasonQuestList,proto3" json:"season_quest_list,omitempty"`
	RoleFace                 *RoleFace                 `protobuf:"bytes,34,opt,name=role_face,json=roleFace,proto3" json:"role_face,omitempty"`
	MapBookList              *MapBookInfoList          `protobuf:"bytes,35,opt,name=map_book_list,json=mapBookList,proto3" json:"map_book_list,omitempty"`
	FunctionData             *FunctionData             `protobuf:"bytes,36,opt,name=function_data,json=functionData,proto3" json:"function_data,omitempty"`
	AntiInfo                 *AntiAddictionInfo        `protobuf:"bytes,37,opt,name=anti_info,json=antiInfo,proto3" json:"anti_info,omitempty"`
	MonsterExploreList       *MonsterExploreList       `protobuf:"bytes,38,opt,name=monster_explore_list,json=monsterExploreList,proto3" json:"monster_explore_list,omitempty"`
	ShowPieceData            *ShowPieceData            `protobuf:"bytes,39,opt,name=show_piece_data,json=showPieceData,proto3" json:"show_piece_data,omitempty"`
	CollectionBook           *CollectionBook           `protobuf:"bytes,42,opt,name=collection_book,json=collectionBook,proto3" json:"collection_book,omitempty"`
	NotGetProceedAwardTimes  *NotGetProceedAwardInfo   `protobuf:"bytes,43,opt,name=not_get_proceed_award_times,json=notGetProceedAwardTimes,proto3" json:"not_get_proceed_award_times,omitempty"`
	CookList                 *CookList                 `protobuf:"bytes,44,opt,name=cook_list,json=cookList,proto3" json:"cook_list,omitempty"`
	RefreshDataList          *TimerRefreshDataList     `protobuf:"bytes,45,opt,name=refresh_data_list,json=refreshDataList,proto3" json:"refresh_data_list,omitempty"`
	ChallengeDungeonInfo     *ChallengeDungeonInfo     `protobuf:"bytes,46,opt,name=challenge_dungeon_info,json=challengeDungeonInfo,proto3" json:"challenge_dungeon_info,omitempty"`
	SyncAwardData            *SyncAwardData            `protobuf:"bytes,47,opt,name=sync_award_data,json=syncAwardData,proto3" json:"sync_award_data,omitempty"`
	SeasonAchievementList    *SeasonAchievementList    `protobuf:"bytes,48,opt,name=season_achievement_list,json=seasonAchievementList,proto3" json:"season_achievement_list,omitempty"`
	SeasonRankList           *SeasonRankList           `protobuf:"bytes,49,opt,name=season_rank_list,json=seasonRankList,proto3" json:"season_rank_list,omitempty"`
	SeasonCenter             *SeasonCenter             `protobuf:"bytes,50,opt,name=season_center,json=seasonCenter,proto3" json:"season_center,omitempty"`
	PersonalZone             *PersonalZone             `protobuf:"bytes,51,opt,name=personal_zone,json=personalZone,proto3" json:"personal_zone,omitempty"`
	SeasonMedalInfo          *SeasonMedalInfo          `protobuf:"bytes,52,opt,name=season_medal_info,json=seasonMedalInfo,proto3" json:"season_medal_info,omitempty"`
	CommunityHomeInfo        *CommunityHomeData        `protobuf:"bytes,53,opt,name=community_home_info,json=communityHomeInfo,proto3" json:"community_home_info,omitempty"`
	SeasonActivation         *SeasonActivation         `protobuf:"bytes,54,opt,name=season_activation,json=seasonActivation,proto3" json:"season_activation,omitempty"`
	Slots                    *Slot                     `protobuf:"bytes,55,opt,name=slots,proto3" json:"slots,omitempty"`
	MonsterHuntInfo          *MonsterHuntInfo          `protobuf:"bytes,56,opt,name=monster_hunt_info,json=monsterHuntInfo,proto3" json:"monster_hunt_info,omitempty"`
	Mod                      *Mod                      `protobuf:"bytes,57,opt,name=mod,proto3" json:"mod,omitempty"`
	WorldEventMap            *WorldEventMap            `protobuf:"bytes,58,opt,name=world_event_map,json=worldEventMap,proto3" json:"world_event_map,omitempty"`
	FishSetting              *FishSetting              `protobuf:"bytes,59,opt,name=fish_setting,json=fishSetting,proto3" json:"fish_setting,omitempty"`
	FreightData              *FreightData              `protobuf:"bytes,60,opt,name=freight_data,json=freightData,proto3" json:"freight_data,omitempty"`
	ProfessionList           *ProfessionList           `protobuf:"bytes,61,opt,name=profession_list,json=professionList,proto3" json:"profession_list,omitempty"`
	TrialRoad                *TrialRoad                `protobuf:"bytes,62,opt,name=trial_road,json=trialRoad,proto3" json:"trial_road,omitempty"`
	GashaData                *GashaData                `protobuf:"bytes,63,opt,name=gasha_data,json=gashaData,proto3" json:"gasha_data,omitempty"`
	ShopData                 *ShopData                 `protobuf:"bytes,64,opt,name=shop_data,json=shopData,proto3" json:"shop_data,omitempty"`
	PersonalWorldBossInfo    *PersonalWorldBossInfo    `protobuf:"bytes,65,opt,name=personal_world_boss_info,json=personalWorldBossInfo,proto3" json:"personal_world_boss_info,omitempty"`
	CraftEnergy              *CraftEnergyRecord        `protobuf:"bytes,66,opt,name=craft_energy,json=craftEnergy,proto3" json:"craft_energy,omitempty"`
	WeeklyTower              *WeeklyTowerRecord        `protobuf:"bytes,67,opt,name=weekly_tower,json=weeklyTower,proto3" json:"weekly_tower,omitempty"`
	CutSceneInfos            *CutSceneInfos            `protobuf:"bytes,68,opt,name=cut_scene_infos,json=cutSceneInfos,proto3" json:"cut_scene_infos,omitempty"`
	RecommendPlayData        *UserRecommendPlayData    `protobuf:"bytes,69,opt,name=recommend_play_data,json=recommendPlayData,proto3" json:"recommend_play_data,omitempty"`
	RideList                 *RideList                 `protobuf:"bytes,70,opt,name=ride_list,json=rideList,proto3" json:"ride_list,omitempty"`
	PayOrderList             *PayOrderList             `protobuf:"bytes,71,opt,name=pay_order_list,json=payOrderList,proto3" json:"pay_order_list,omitempty"`
	LifeProfession           *LifeProfession           `protobuf:"bytes,72,opt,name=life_profession,json=lifeProfession,proto3" json:"life_profession,omitempty"`
	LifeProfessionWork       *LifeProfessionWork       `protobuf:"bytes,73,opt,name=life_profession_work,json=lifeProfessionWork,proto3" json:"life_profession_work,omitempty"`
	UserActivityList         *UserActivityList         `protobuf:"bytes,74,opt,name=user_activity_list,json=userActivityList,proto3" json:"user_activity_list,omitempty"`
	PlayerRecord             *PlayerRecord             `protobuf:"bytes,75,opt,name=player_record,json=playerRecord,proto3" json:"player_record,omitempty"`
	DropContainer            *DropContainerInfo        `protobuf:"bytes,76,opt,name=drop_container,json=dropContainer,proto3" json:"drop_container,omitempty"`
	MonthlyCard              *MonthlyCard              `protobuf:"bytes,77,opt,name=monthly_card,json=monthlyCard,proto3" json:"monthly_card,omitempty"`
	FashionBenefit           *FashionBenefit           `protobuf:"bytes,78,opt,name=fashion_benefit,json=fashionBenefit,proto3" json:"fashion_benefit,omitempty"`
	ItemCurrency             *ItemCurrency             `protobuf:"bytes,79,opt,name=item_currency,json=itemCurrency,proto3" json:"item_currency,omitempty"`
	PrivilegeEffectData      *PrivilegeEffectData      `protobuf:"bytes,80,opt,name=privilege_effect_data,json=privilegeEffectData,proto3" json:"privilege_effect_data,omitempty"`
	Treasure                 *Treasure                 `protobuf:"bytes,81,opt,name=treasure,proto3" json:"treasure,omitempty"`
	UnlockEmojiData          *UnlockEmojiData          `protobuf:"bytes,82,opt,name=unlock_emoji_data,json=unlockEmojiData,proto3" json:"unlock_emoji_data,omitempty"`
	PlayerOrderComtainerInfo *PlayerOrderComtainerInfo `protobuf:"bytes,83,opt,name=player_order_comtainer_info,json=playerOrderComtainerInfo,proto3" json:"player_order_comtainer_info,omitempty"`
	PlayerBox                *PlayerBox                `protobuf:"bytes,84,opt,name=player_box,json=playerBox,proto3" json:"player_box,omitempty"`
	LaunchPrivilegeData      *LaunchPrivilegeData      `protobuf:"bytes,85,opt,name=launch_privilege_data,json=launchPrivilegeData,proto3" json:"launch_privilege_data,omitempty"`
	BattlePassData           *BattlePassData           `protobuf:"bytes,86,opt,name=battle_pass_data,json=battlePassData,proto3" json:"battle_pass_data,omitempty"`
	RechargeData             *RechargeData             `protobuf:"bytes,87,opt,name=recharge_data,json=rechargeData,proto3" json:"recharge_data,omitempty"`
	LuckyValueMgr            *LuckyValueMgr            `protobuf:"bytes,88,opt,name=lucky_value_mgr,json=luckyValueMgr,proto3" json:"lucky_value_mgr,omitempty"`
	HandbookData             *HandbookData             `protobuf:"bytes,89,opt,name=handbook_data,json=handbookData,proto3" json:"handbook_data,omitempty"`
	MasterModeDungeonInfo    *MasterModeDungeonInfo    `protobuf:"bytes,90,opt,name=master_mode_dungeon_info,json=masterModeDungeonInfo,proto3" json:"master_mode_dungeon_info,omitempty"`
	StatisticsData           *StatisticsData           `protobuf:"bytes,91,opt,name=statistics_data,json=statisticsData,proto3" json:"statistics_data,omitempty"`
	CompenstionStatistics    *CompensationStatistics   `protobuf:"bytes,92,opt,name=compenstion_statistics,json=compenstionStatistics,proto3" json:"compenstion_statistics,omitempty"`
	BubbleActData            *BubbleActData            `protobuf:"bytes,93,opt,name=bubble_act_data,json=bubbleActData,proto3" json:"bubble_act_data,omitempty"`
	MailClaimedInfo          *MailClaimedInfo          `protobuf:"bytes,94,opt,name=mail_claimed_info,json=mailClaimedInfo,proto3" json:"mail_claimed_info,omitempty"`
	NewbieData               *NewbieData               `protobuf:"bytes,95,opt,name=newbie_data,json=newbieData,proto3" json:"newbie_data,omitempty"`
	FightPoint               *FightPoint               `protobuf:"bytes,96,opt,name=fight_point,json=fightPoint,proto3" json:"fight_point,omitempty"`
	Sign                     *SignInfo                 `protobuf:"bytes,97,opt,name=sign,proto3" json:"sign,omitempty"`
	CharStatisticsData       *CharStatisticsData       `protobuf:"bytes,98,opt,name=char_statistics_data,json=charStatisticsData,proto3" json:"char_statistics_data,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CharSerialize) Reset() {
	*x = CharSerialize{}
	mi := &file_pb_bp_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharSerialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharSerialize) ProtoMessage() {}

func (x *CharSerialize) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharSerialize.ProtoReflect.Descriptor instead.
func (*CharSerialize) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{273}
}

func (x *CharSerialize) GetCharId() int64 {
	if x != nil {
		return x.CharId
	}
	return 0
}

func (x *CharSerialize) GetCharBase() *CharBaseInfo {
	if x != nil {
		return x.CharBase
	}
	return nil
}

func (x *CharSerialize) GetSceneData() *SceneData {
	if x != nil {
		return x.SceneData
	}
	return nil
}

func (x *CharSerialize) GetSceneLuaData() *SceneLuaData {
	if x != nil {
		return x.SceneLuaData
	}
	return nil
}

func (x *CharSerialize) GetPioneerData() *PioneerData {
	if x != nil {
		return x.PioneerData
	}
	return nil
}

func (x *CharSerialize) GetBuffInfo() *BuffDBInfo {
	if x != nil {
		return x.BuffInfo
	}
	return nil
}

func (x *CharSerialize) GetItemPackage() *ItemPackage {
	if x != nil {
		return x.ItemPackage
	}
	return nil
}

func (x *CharSerialize) GetQuestList() *QuestDataList {
	if x != nil {
		return x.QuestList
	}
	return nil
}

func (x *CharSerialize) GetSettingData() *SettingData {
	if x != nil {
		return x.SettingData
	}
	return nil
}

func (x *CharSerialize) GetMiscInfo() *MiscInfo {
	if x != nil {
		return x.MiscInfo
	}
	return nil
}

func (x *CharSerialize) GetExchangeItems() *ExchangeItem {
	if x != nil {
		return x.ExchangeItems
	}
	return nil
}

func (x *CharSerialize) GetEquip() *EquipList {
	if x != nil {
		return x.Equip
	}
	return nil
}

func (x *CharSerialize) GetEnergyItem() *EnergyItem {
	if x != nil {
		return x.EnergyItem
	}
	return nil
}

func (x *CharSerialize) GetMapData() *MapData {
	if x != nil {
		return x.MapData
	}
	return nil
}

func (x *CharSerialize) GetDungeonList() *DungeonList {
	if x != nil {
		return x.DungeonList
	}
	return nil
}

func (x *CharSerialize) GetAttr() *UserFightAttr {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *CharSerialize) GetFashion() *FashionMgr {
	if x != nil {
		return x.Fashion
	}
	return nil
}

func (x *CharSerialize) GetProfileList() *ProfileList {
	if x != nil {
		return x.ProfileList
	}
	return nil
}

func (x *CharSerialize) GetHelp() *PlayHelper {
	if x != nil {
		return x.Help
	}
	return nil
}

func (x *CharSerialize) GetCounterList() *CounterList {
	if x != nil {
		return x.CounterList
	}
	return nil
}

func (x *CharSerialize) GetPersonalObj() *PersonalObject {
	if x != nil {
		return x.PersonalObj
	}
	return nil
}

func (x *CharSerialize) GetRoleLevel() *RoleLevel {
	if x != nil {
		return x.RoleLevel
	}
	return nil
}

func (x *CharSerialize) GetPivot() *Pivot {
	if x != nil {
		return x.Pivot
	}
	return nil
}

func (x *CharSerialize) GetTransferPoint() *TransferPoint {
	if x != nil {
		return x.TransferPoint
	}
	return nil
}

func (x *CharSerialize) GetPlanetMemory() *PlanetMemory {
	if x != nil {
		return x.PlanetMemory
	}
	return nil
}

func (x *CharSerialize) GetPlanetMemoryTarget() *SeasonTarget {
	if x != nil {
		return x.PlanetMemoryTarget
	}
	return nil
}

func (x *CharSerialize) GetRedDot() *RedDotData {
	if x != nil {
		return x.RedDot
	}
	return nil
}

func (x *CharSerialize) GetResonance() *Resonance {
	if x != nil {
		return x.Resonance
	}
	return nil
}

func (x *CharSerialize) GetCutsState() *CutsState {
	if x != nil {
		return x.CutsState
	}
	return nil
}

func (x *CharSerialize) GetInvestigateList() *InvestigateList {
	if x != nil {
		return x.InvestigateList
	}
	return nil
}

func (x *CharSerialize) GetRecords() *ParkourRecordList {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *CharSerialize) GetInteraction() *InteractionInfo {
	if x != nil {
		return x.Interaction
	}
	return nil
}

func (x *CharSerialize) GetSeasonQuestList() *SeasonQuestList {
	if x != nil {
		return x.SeasonQuestList
	}
	return nil
}

func (x *CharSerialize) GetRoleFace() *RoleFace {
	if x != nil {
		return x.RoleFace
	}
	return nil
}

func (x *CharSerialize) GetMapBookList() *MapBookInfoList {
	if x != nil {
		return x.MapBookList
	}
	return nil
}

func (x *CharSerialize) GetFunctionData() *FunctionData {
	if x != nil {
		return x.FunctionData
	}
	return nil
}

func (x *CharSerialize) GetAntiInfo() *AntiAddictionInfo {
	if x != nil {
		return x.AntiInfo
	}
	return nil
}

func (x *CharSerialize) GetMonsterExploreList() *MonsterExploreList {
	if x != nil {
		return x.MonsterExploreList
	}
	return nil
}

func (x *CharSerialize) GetShowPieceData() *ShowPieceData {
	if x != nil {
		return x.ShowPieceData
	}
	return nil
}

func (x *CharSerialize) GetCollectionBook() *CollectionBook {
	if x != nil {
		return x.CollectionBook
	}
	return nil
}

func (x *CharSerialize) GetNotGetProceedAwardTimes() *NotGetProceedAwardInfo {
	if x != nil {
		return x.NotGetProceedAwardTimes
	}
	return nil
}

func (x *CharSerialize) GetCookList() *CookList {
	if x != nil {
		return x.CookList
	}
	return nil
}

func (x *CharSerialize) GetRefreshDataList() *TimerRefreshDataList {
	if x != nil {
		return x.RefreshDataList
	}
	return nil
}

func (x *CharSerialize) GetChallengeDungeonInfo() *ChallengeDungeonInfo {
	if x != nil {
		return x.ChallengeDungeonInfo
	}
	return nil
}

func (x *CharSerialize) GetSyncAwardData() *SyncAwardData {
	if x != nil {
		return x.SyncAwardData
	}
	return nil
}

func (x *CharSerialize) GetSeasonAchievementList() *SeasonAchievementList {
	if x != nil {
		return x.SeasonAchievementList
	}
	return nil
}

func (x *CharSerialize) GetSeasonRankList() *SeasonRankList {
	if x != nil {
		return x.SeasonRankList
	}
	return nil
}

func (x *CharSerialize) GetSeasonCenter() *SeasonCenter {
	if x != nil {
		return x.SeasonCenter
	}
	return nil
}

func (x *CharSerialize) GetPersonalZone() *PersonalZone {
	if x != nil {
		return x.PersonalZone
	}
	return nil
}

func (x *CharSerialize) GetSeasonMedalInfo() *SeasonMedalInfo {
	if x != nil {
		return x.SeasonMedalInfo
	}
	return nil
}

func (x *CharSerialize) GetCommunityHomeInfo() *CommunityHomeData {
	if x != nil {
		return x.CommunityHomeInfo
	}
	return nil
}

func (x *CharSerialize) GetSeasonActivation() *SeasonActivation {
	if x != nil {
		return x.SeasonActivation
	}
	return nil
}

func (x *CharSerialize) GetSlots() *Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *CharSerialize) GetMonsterHuntInfo() *MonsterHuntInfo {
	if x != nil {
		return x.MonsterHuntInfo
	}
	return nil
}

func (x *CharSerialize) GetMod() *Mod {
	if x != nil {
		return x.Mod
	}
	return nil
}

func (x *CharSerialize) GetWorldEventMap() *WorldEventMap {
	if x != nil {
		return x.WorldEventMap
	}
	return nil
}

func (x *CharSerialize) GetFishSetting() *FishSetting {
	if x != nil {
		return x.FishSetting
	}
	return nil
}

func (x *CharSerialize) GetFreightData() *FreightData {
	if x != nil {
		return x.FreightData
	}
	return nil
}

func (x *CharSerialize) GetProfessionList() *ProfessionList {
	if x != nil {
		return x.ProfessionList
	}
	return nil
}

func (x *CharSerialize) GetTrialRoad() *TrialRoad {
	if x != nil {
		return x.TrialRoad
	}
	return nil
}

func (x *CharSerialize) GetGashaData() *GashaData {
	if x != nil {
		return x.GashaData
	}
	return nil
}

func (x *CharSerialize) GetShopData() *ShopData {
	if x != nil {
		return x.ShopData
	}
	return nil
}

func (x *CharSerialize) GetPersonalWorldBossInfo() *PersonalWorldBossInfo {
	if x != nil {
		return x.PersonalWorldBossInfo
	}
	return nil
}

func (x *CharSerialize) GetCraftEnergy() *CraftEnergyRecord {
	if x != nil {
		return x.CraftEnergy
	}
	return nil
}

func (x *CharSerialize) GetWeeklyTower() *WeeklyTowerRecord {
	if x != nil {
		return x.WeeklyTower
	}
	return nil
}

func (x *CharSerialize) GetCutSceneInfos() *CutSceneInfos {
	if x != nil {
		return x.CutSceneInfos
	}
	return nil
}

func (x *CharSerialize) GetRecommendPlayData() *UserRecommendPlayData {
	if x != nil {
		return x.RecommendPlayData
	}
	return nil
}

func (x *CharSerialize) GetRideList() *RideList {
	if x != nil {
		return x.RideList
	}
	return nil
}

func (x *CharSerialize) GetPayOrderList() *PayOrderList {
	if x != nil {
		return x.PayOrderList
	}
	return nil
}

func (x *CharSerialize) GetLifeProfession() *LifeProfession {
	if x != nil {
		return x.LifeProfession
	}
	return nil
}

func (x *CharSerialize) GetLifeProfessionWork() *LifeProfessionWork {
	if x != nil {
		return x.LifeProfessionWork
	}
	return nil
}

func (x *CharSerialize) GetUserActivityList() *UserActivityList {
	if x != nil {
		return x.UserActivityList
	}
	return nil
}

func (x *CharSerialize) GetPlayerRecord() *PlayerRecord {
	if x != nil {
		return x.PlayerRecord
	}
	return nil
}

func (x *CharSerialize) GetDropContainer() *DropContainerInfo {
	if x != nil {
		return x.DropContainer
	}
	return nil
}

func (x *CharSerialize) GetMonthlyCard() *MonthlyCard {
	if x != nil {
		return x.MonthlyCard
	}
	return nil
}

func (x *CharSerialize) GetFashionBenefit() *FashionBenefit {
	if x != nil {
		return x.FashionBenefit
	}
	return nil
}

func (x *CharSerialize) GetItemCurrency() *ItemCurrency {
	if x != nil {
		return x.ItemCurrency
	}
	return nil
}

func (x *CharSerialize) GetPrivilegeEffectData() *PrivilegeEffectData {
	if x != nil {
		return x.PrivilegeEffectData
	}
	return nil
}

func (x *CharSerialize) GetTreasure() *Treasure {
	if x != nil {
		return x.Treasure
	}
	return nil
}

func (x *CharSerialize) GetUnlockEmojiData() *UnlockEmojiData {
	if x != nil {
		return x.UnlockEmojiData
	}
	return nil
}

func (x *CharSerialize) GetPlayerOrderComtainerInfo() *PlayerOrderComtainerInfo {
	if x != nil {
		return x.PlayerOrderComtainerInfo
	}
	return nil
}

func (x *CharSerialize) GetPlayerBox() *PlayerBox {
	if x != nil {
		return x.PlayerBox
	}
	return nil
}

func (x *CharSerialize) GetLaunchPrivilegeData() *LaunchPrivilegeData {
	if x != nil {
		return x.LaunchPrivilegeData
	}
	return nil
}

func (x *CharSerialize) GetBattlePassData() *BattlePassData {
	if x != nil {
		return x.BattlePassData
	}
	return nil
}

func (x *CharSerialize) GetRechargeData() *RechargeData {
	if x != nil {
		return x.RechargeData
	}
	return nil
}

func (x *CharSerialize) GetLuckyValueMgr() *LuckyValueMgr {
	if x != nil {
		return x.LuckyValueMgr
	}
	return nil
}

func (x *CharSerialize) GetHandbookData() *HandbookData {
	if x != nil {
		return x.HandbookData
	}
	return nil
}

func (x *CharSerialize) GetMasterModeDungeonInfo() *MasterModeDungeonInfo {
	if x != nil {
		return x.MasterModeDungeonInfo
	}
	return nil
}

func (x *CharSerialize) GetStatisticsData() *StatisticsData {
	if x != nil {
		return x.StatisticsData
	}
	return nil
}

func (x *CharSerialize) GetCompenstionStatistics() *CompensationStatistics {
	if x != nil {
		return x.CompenstionStatistics
	}
	return nil
}

func (x *CharSerialize) GetBubbleActData() *BubbleActData {
	if x != nil {
		return x.BubbleActData
	}
	return nil
}

func (x *CharSerialize) GetMailClaimedInfo() *MailClaimedInfo {
	if x != nil {
		return x.MailClaimedInfo
	}
	return nil
}

func (x *CharSerialize) GetNewbieData() *NewbieData {
	if x != nil {
		return x.NewbieData
	}
	return nil
}

func (x *CharSerialize) GetFightPoint() *FightPoint {
	if x != nil {
		return x.FightPoint
	}
	return nil
}

func (x *CharSerialize) GetSign() *SignInfo {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *CharSerialize) GetCharStatisticsData() *CharStatisticsData {
	if x != nil {
		return x.CharStatisticsData
	}
	return nil
}

type Treasure struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Rows            map[int32]*TreasureItemRow `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HistoryRows     map[int32]*TreasureItemRow `protobuf:"bytes,2,rep,name=history_rows,json=historyRows,proto3" json:"history_rows,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Flag            bool                       `protobuf:"varint,3,opt,name=flag,proto3" json:"flag,omitempty"`
	RefreshTime     int64                      `protobuf:"varint,4,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	SelectedReward  []int32                    `protobuf:"varint,5,rep,packed,name=selected_reward,json=selectedReward,proto3" json:"selected_reward,omitempty"`
	SeasonId        int32                      `protobuf:"varint,6,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	LastSeasonId    int32                      `protobuf:"varint,7,opt,name=last_season_id,json=lastSeasonId,proto3" json:"last_season_id,omitempty"`
	LastRefreshTime int64                      `protobuf:"varint,8,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Treasure) Reset() {
	*x = Treasure{}
	mi := &file_pb_bp_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Treasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasure) ProtoMessage() {}

func (x *Treasure) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasure.ProtoReflect.Descriptor instead.
func (*Treasure) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{274}
}

func (x *Treasure) GetRows() map[int32]*TreasureItemRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *Treasure) GetHistoryRows() map[int32]*TreasureItemRow {
	if x != nil {
		return x.HistoryRows
	}
	return nil
}

func (x *Treasure) GetFlag() bool {
	if x != nil {
		return x.Flag
	}
	return false
}

func (x *Treasure) GetRefreshTime() int64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *Treasure) GetSelectedReward() []int32 {
	if x != nil {
		return x.SelectedReward
	}
	return nil
}

func (x *Treasure) GetSeasonId() int32 {
	if x != nil {
		return x.SeasonId
	}
	return 0
}

func (x *Treasure) GetLastSeasonId() int32 {
	if x != nil {
		return x.LastSeasonId
	}
	return 0
}

func (x *Treasure) GetLastRefreshTime() int64 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type TreasureItemRow struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	ConfigId      int32                         `protobuf:"varint,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	MainTargets   map[int32]*TreasureItemTarget `protobuf:"bytes,2,rep,name=main_targets,json=mainTargets,proto3" json:"main_targets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SubTargets    map[int32]*TreasureItemTarget `protobuf:"bytes,3,rep,name=sub_targets,json=subTargets,proto3" json:"sub_targets,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreasureItemRow) Reset() {
	*x = TreasureItemRow{}
	mi := &file_pb_bp_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreasureItemRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureItemRow) ProtoMessage() {}

func (x *TreasureItemRow) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureItemRow.ProtoReflect.Descriptor instead.
func (*TreasureItemRow) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{275}
}

func (x *TreasureItemRow) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *TreasureItemRow) GetMainTargets() map[int32]*TreasureItemTarget {
	if x != nil {
		return x.MainTargets
	}
	return nil
}

func (x *TreasureItemRow) GetSubTargets() map[int32]*TreasureItemTarget {
	if x != nil {
		return x.SubTargets
	}
	return nil
}

type TreasureItemTarget struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TargetId      int32                  `protobuf:"varint,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetNum     int32                  `protobuf:"varint,2,opt,name=target_num,json=targetNum,proto3" json:"target_num,omitempty"`
	Reward        *TreasureItem          `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreasureItemTarget) Reset() {
	*x = TreasureItemTarget{}
	mi := &file_pb_bp_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreasureItemTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureItemTarget) ProtoMessage() {}

func (x *TreasureItemTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureItemTarget.ProtoReflect.Descriptor instead.
func (*TreasureItemTarget) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{276}
}

func (x *TreasureItemTarget) GetTargetId() int32 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *TreasureItemTarget) GetTargetNum() int32 {
	if x != nil {
		return x.TargetNum
	}
	return 0
}

func (x *TreasureItemTarget) GetReward() *TreasureItem {
	if x != nil {
		return x.Reward
	}
	return nil
}

type TreasureItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Item                `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreasureItem) Reset() {
	*x = TreasureItem{}
	mi := &file_pb_bp_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreasureItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreasureItem) ProtoMessage() {}

func (x *TreasureItem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreasureItem.ProtoReflect.Descriptor instead.
func (*TreasureItem) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{277}
}

func (x *TreasureItem) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *TreasureItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Item struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Uuid               int64                     `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ConfigId           int32                     `protobuf:"varint,2,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Count              int64                     `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Invalid            int32                     `protobuf:"varint,4,opt,name=invalid,proto3" json:"invalid,omitempty"`
	BindFlag           EItemBindFlag             `protobuf:"varint,5,opt,name=bind_flag,json=bindFlag,proto3,enum=EItemBindFlag" json:"bind_flag,omitempty"`
	CreateTime         int64                     `protobuf:"varint,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime         int64                     `protobuf:"varint,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	OptSrc             int32                     `protobuf:"varint,8,opt,name=opt_src,json=optSrc,proto3" json:"opt_src,omitempty"`
	Quality            int32                     `protobuf:"varint,9,opt,name=quality,proto3" json:"quality,omitempty"`
	EquipAttr          *EquipAttr                `protobuf:"bytes,10,opt,name=equip_attr,json=equipAttr,proto3" json:"equip_attr,omitempty"`
	ModAttr            *ModAttr                  `protobuf:"bytes,11,opt,name=mod_attr,json=modAttr,proto3" json:"mod_attr,omitempty"`
	CoolDownExpireTime int64                     `protobuf:"varint,12,opt,name=cool_down_expire_time,json=coolDownExpireTime,proto3" json:"cool_down_expire_time,omitempty"`
	ModNewAttr         *ModNewAttr               `protobuf:"bytes,13,opt,name=mod_new_attr,json=modNewAttr,proto3" json:"mod_new_attr,omitempty"`
	AffixData          *AffixData                `protobuf:"bytes,14,opt,name=affix_data,json=affixData,proto3" json:"affix_data,omitempty"`
	ExtendAttr         map[int32]*ItemExtendData `protobuf:"bytes,15,rep,name=extend_attr,json=extendAttr,proto3" json:"extend_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RewardId           int32                     `protobuf:"varint,16,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	GeneSequence       map[int32]int32           `protobuf:"bytes,17,rep,name=gene_sequence,json=geneSequence,proto3" json:"gene_sequence,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_pb_bp_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{278}
}

func (x *Item) GetUuid() int64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *Item) GetConfigId() int32 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

func (x *Item) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Item) GetInvalid() int32 {
	if x != nil {
		return x.Invalid
	}
	return 0
}

func (x *Item) GetBindFlag() EItemBindFlag {
	if x != nil {
		return x.BindFlag
	}
	return EItemBindFlag_ItemBindNone
}

func (x *Item) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Item) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *Item) GetOptSrc() int32 {
	if x != nil {
		return x.OptSrc
	}
	return 0
}

func (x *Item) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *Item) GetEquipAttr() *EquipAttr {
	if x != nil {
		return x.EquipAttr
	}
	return nil
}

func (x *Item) GetModAttr() *ModAttr {
	if x != nil {
		return x.ModAttr
	}
	return nil
}

func (x *Item) GetCoolDownExpireTime() int64 {
	if x != nil {
		return x.CoolDownExpireTime
	}
	return 0
}

func (x *Item) GetModNewAttr() *ModNewAttr {
	if x != nil {
		return x.ModNewAttr
	}
	return nil
}

func (x *Item) GetAffixData() *AffixData {
	if x != nil {
		return x.AffixData
	}
	return nil
}

func (x *Item) GetExtendAttr() map[int32]*ItemExtendData {
	if x != nil {
		return x.ExtendAttr
	}
	return nil
}

func (x *Item) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *Item) GetGeneSequence() map[int32]int32 {
	if x != nil {
		return x.GeneSequence
	}
	return nil
}

type AffixData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AffixIds      []int32                `protobuf:"varint,1,rep,packed,name=affix_ids,json=affixIds,proto3" json:"affix_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AffixData) Reset() {
	*x = AffixData{}
	mi := &file_pb_bp_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AffixData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AffixData) ProtoMessage() {}

func (x *AffixData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AffixData.ProtoReflect.Descriptor instead.
func (*AffixData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{279}
}

func (x *AffixData) GetAffixIds() []int32 {
	if x != nil {
		return x.AffixIds
	}
	return nil
}

type ItemExtendData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value         int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemExtendData) Reset() {
	*x = ItemExtendData{}
	mi := &file_pb_bp_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemExtendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemExtendData) ProtoMessage() {}

func (x *ItemExtendData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemExtendData.ProtoReflect.Descriptor instead.
func (*ItemExtendData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{280}
}

func (x *ItemExtendData) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemExtendData) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ModNewAttr struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	ModParts       []int32                 `protobuf:"varint,1,rep,packed,name=mod_parts,json=modParts,proto3" json:"mod_parts,omitempty"`
	UpgradeRecords []*ModPartUpgradeRecord `protobuf:"bytes,2,rep,name=upgrade_records,json=upgradeRecords,proto3" json:"upgrade_records,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ModNewAttr) Reset() {
	*x = ModNewAttr{}
	mi := &file_pb_bp_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModNewAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModNewAttr) ProtoMessage() {}

func (x *ModNewAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModNewAttr.ProtoReflect.Descriptor instead.
func (*ModNewAttr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{281}
}

func (x *ModNewAttr) GetModParts() []int32 {
	if x != nil {
		return x.ModParts
	}
	return nil
}

func (x *ModNewAttr) GetUpgradeRecords() []*ModPartUpgradeRecord {
	if x != nil {
		return x.UpgradeRecords
	}
	return nil
}

type ModPartUpgradeRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartId        int32                  `protobuf:"varint,1,opt,name=part_id,json=partId,proto3" json:"part_id,omitempty"`
	IsSuccess     bool                   `protobuf:"varint,2,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModPartUpgradeRecord) Reset() {
	*x = ModPartUpgradeRecord{}
	mi := &file_pb_bp_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModPartUpgradeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModPartUpgradeRecord) ProtoMessage() {}

func (x *ModPartUpgradeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModPartUpgradeRecord.ProtoReflect.Descriptor instead.
func (*ModPartUpgradeRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{282}
}

func (x *ModPartUpgradeRecord) GetPartId() int32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *ModPartUpgradeRecord) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

type ModAttr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoadFlag      int32                  `protobuf:"varint,1,opt,name=load_flag,json=loadFlag,proto3" json:"load_flag,omitempty"`
	Type          int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Level         int32                  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	ModAttrInfo   []*ModAttrInfo         `protobuf:"bytes,4,rep,name=mod_attr_info,json=modAttrInfo,proto3" json:"mod_attr_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModAttr) Reset() {
	*x = ModAttr{}
	mi := &file_pb_bp_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModAttr) ProtoMessage() {}

func (x *ModAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModAttr.ProtoReflect.Descriptor instead.
func (*ModAttr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{283}
}

func (x *ModAttr) GetLoadFlag() int32 {
	if x != nil {
		return x.LoadFlag
	}
	return 0
}

func (x *ModAttr) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModAttr) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ModAttr) GetModAttrInfo() []*ModAttrInfo {
	if x != nil {
		return x.ModAttrInfo
	}
	return nil
}

type ModAttrInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Type            int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id              int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Value           int32                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	EffectParameter map[uint32]string      `protobuf:"bytes,4,rep,name=effect_parameter,json=effectParameter,proto3" json:"effect_parameter,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ModAttrInfo) Reset() {
	*x = ModAttrInfo{}
	mi := &file_pb_bp_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModAttrInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModAttrInfo) ProtoMessage() {}

func (x *ModAttrInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModAttrInfo.ProtoReflect.Descriptor instead.
func (*ModAttrInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{284}
}

func (x *ModAttrInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ModAttrInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ModAttrInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ModAttrInfo) GetEffectParameter() map[uint32]string {
	if x != nil {
		return x.EffectParameter
	}
	return nil
}

type EquipAttr struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BaseAttrs          map[uint32]uint32      `protobuf:"bytes,4,rep,name=base_attrs,json=baseAttrs,proto3" json:"base_attrs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	PerfectionValue    int32                  `protobuf:"varint,7,opt,name=perfection_value,json=perfectionValue,proto3" json:"perfection_value,omitempty"`
	RecastCount        int32                  `protobuf:"varint,8,opt,name=recast_count,json=recastCount,proto3" json:"recast_count,omitempty"`
	TotalRecastCount   int32                  `protobuf:"varint,9,opt,name=total_recast_count,json=totalRecastCount,proto3" json:"total_recast_count,omitempty"`
	BasicAttr          map[int32]int32        `protobuf:"bytes,10,rep,name=basic_attr,json=basicAttr,proto3" json:"basic_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AdvanceAttr        map[int32]int32        `protobuf:"bytes,11,rep,name=advance_attr,json=advanceAttr,proto3" json:"advance_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RecastAttr         map[int32]int32        `protobuf:"bytes,12,rep,name=recast_attr,json=recastAttr,proto3" json:"recast_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	PerfectionLevel    int32                  `protobuf:"varint,13,opt,name=perfection_level,json=perfectionLevel,proto3" json:"perfection_level,omitempty"`
	RareQualityAttr    map[int32]int32        `protobuf:"bytes,14,rep,name=rare_quality_attr,json=rareQualityAttr,proto3" json:"rare_quality_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MaxPerfectionValue int32                  `protobuf:"varint,15,opt,name=max_perfection_value,json=maxPerfectionValue,proto3" json:"max_perfection_value,omitempty"`
	EquipAttrSet       *EquipAttrSet          `protobuf:"bytes,17,opt,name=equip_attr_set,json=equipAttrSet,proto3" json:"equip_attr_set,omitempty"`
	BreakThroughTime   int32                  `protobuf:"varint,18,opt,name=break_through_time,json=breakThroughTime,proto3" json:"break_through_time,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EquipAttr) Reset() {
	*x = EquipAttr{}
	mi := &file_pb_bp_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipAttr) ProtoMessage() {}

func (x *EquipAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipAttr.ProtoReflect.Descriptor instead.
func (*EquipAttr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{285}
}

func (x *EquipAttr) GetBaseAttrs() map[uint32]uint32 {
	if x != nil {
		return x.BaseAttrs
	}
	return nil
}

func (x *EquipAttr) GetPerfectionValue() int32 {
	if x != nil {
		return x.PerfectionValue
	}
	return 0
}

func (x *EquipAttr) GetRecastCount() int32 {
	if x != nil {
		return x.RecastCount
	}
	return 0
}

func (x *EquipAttr) GetTotalRecastCount() int32 {
	if x != nil {
		return x.TotalRecastCount
	}
	return 0
}

func (x *EquipAttr) GetBasicAttr() map[int32]int32 {
	if x != nil {
		return x.BasicAttr
	}
	return nil
}

func (x *EquipAttr) GetAdvanceAttr() map[int32]int32 {
	if x != nil {
		return x.AdvanceAttr
	}
	return nil
}

func (x *EquipAttr) GetRecastAttr() map[int32]int32 {
	if x != nil {
		return x.RecastAttr
	}
	return nil
}

func (x *EquipAttr) GetPerfectionLevel() int32 {
	if x != nil {
		return x.PerfectionLevel
	}
	return 0
}

func (x *EquipAttr) GetRareQualityAttr() map[int32]int32 {
	if x != nil {
		return x.RareQualityAttr
	}
	return nil
}

func (x *EquipAttr) GetMaxPerfectionValue() int32 {
	if x != nil {
		return x.MaxPerfectionValue
	}
	return 0
}

func (x *EquipAttr) GetEquipAttrSet() *EquipAttrSet {
	if x != nil {
		return x.EquipAttrSet
	}
	return nil
}

func (x *EquipAttr) GetBreakThroughTime() int32 {
	if x != nil {
		return x.BreakThroughTime
	}
	return 0
}

type EquipAttrSet struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BasicAttr       map[int32]int32        `protobuf:"bytes,1,rep,name=basic_attr,json=basicAttr,proto3" json:"basic_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	AdvanceAttr     map[int32]int32        `protobuf:"bytes,2,rep,name=advance_attr,json=advanceAttr,proto3" json:"advance_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RecastAttr      map[int32]int32        `protobuf:"bytes,3,rep,name=recast_attr,json=recastAttr,proto3" json:"recast_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	RareQualityAttr map[int32]int32        `protobuf:"bytes,4,rep,name=rare_quality_attr,json=rareQualityAttr,proto3" json:"rare_quality_attr,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EquipAttrSet) Reset() {
	*x = EquipAttrSet{}
	mi := &file_pb_bp_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EquipAttrSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipAttrSet) ProtoMessage() {}

func (x *EquipAttrSet) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipAttrSet.ProtoReflect.Descriptor instead.
func (*EquipAttrSet) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{286}
}

func (x *EquipAttrSet) GetBasicAttr() map[int32]int32 {
	if x != nil {
		return x.BasicAttr
	}
	return nil
}

func (x *EquipAttrSet) GetAdvanceAttr() map[int32]int32 {
	if x != nil {
		return x.AdvanceAttr
	}
	return nil
}

func (x *EquipAttrSet) GetRecastAttr() map[int32]int32 {
	if x != nil {
		return x.RecastAttr
	}
	return nil
}

func (x *EquipAttrSet) GetRareQualityAttr() map[int32]int32 {
	if x != nil {
		return x.RareQualityAttr
	}
	return nil
}

type UnlockEmojiData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnlockMap     map[int32]bool         `protobuf:"bytes,1,rep,name=unlock_map,json=unlockMap,proto3" json:"unlock_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnlockEmojiData) Reset() {
	*x = UnlockEmojiData{}
	mi := &file_pb_bp_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnlockEmojiData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockEmojiData) ProtoMessage() {}

func (x *UnlockEmojiData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockEmojiData.ProtoReflect.Descriptor instead.
func (*UnlockEmojiData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{287}
}

func (x *UnlockEmojiData) GetUnlockMap() map[int32]bool {
	if x != nil {
		return x.UnlockMap
	}
	return nil
}

type PlayerOrderComtainerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerOrderComtainerInfo) Reset() {
	*x = PlayerOrderComtainerInfo{}
	mi := &file_pb_bp_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerOrderComtainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOrderComtainerInfo) ProtoMessage() {}

func (x *PlayerOrderComtainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOrderComtainerInfo.ProtoReflect.Descriptor instead.
func (*PlayerOrderComtainerInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{288}
}

func (x *PlayerOrderComtainerInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type PlayerBox struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Scenes        map[uint64]*PlayerBoxData `protobuf:"bytes,1,rep,name=scenes,proto3" json:"scenes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBox) Reset() {
	*x = PlayerBox{}
	mi := &file_pb_bp_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBox) ProtoMessage() {}

func (x *PlayerBox) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBox.ProtoReflect.Descriptor instead.
func (*PlayerBox) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{289}
}

func (x *PlayerBox) GetScenes() map[uint64]*PlayerBoxData {
	if x != nil {
		return x.Scenes
	}
	return nil
}

type PlayerBoxData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SceneUuid     uint64                 `protobuf:"varint,1,opt,name=scene_uuid,json=sceneUuid,proto3" json:"scene_uuid,omitempty"`
	Boxs          map[int64]int64        `protobuf:"bytes,2,rep,name=boxs,proto3" json:"boxs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerBoxData) Reset() {
	*x = PlayerBoxData{}
	mi := &file_pb_bp_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerBoxData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBoxData) ProtoMessage() {}

func (x *PlayerBoxData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBoxData.ProtoReflect.Descriptor instead.
func (*PlayerBoxData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{290}
}

func (x *PlayerBoxData) GetSceneUuid() uint64 {
	if x != nil {
		return x.SceneUuid
	}
	return 0
}

func (x *PlayerBoxData) GetBoxs() map[int64]int64 {
	if x != nil {
		return x.Boxs
	}
	return nil
}

type LaunchPrivilegeData struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	LaunchPlatform    LaunchPlatform         `protobuf:"varint,1,opt,name=launch_platform,json=launchPlatform,proto3,enum=LaunchPlatform" json:"launch_platform,omitempty"`
	IsPrivilege       bool                   `protobuf:"varint,2,opt,name=is_privilege,json=isPrivilege,proto3" json:"is_privilege,omitempty"`
	BakLaunchPlatform LaunchPlatform         `protobuf:"varint,3,opt,name=bak_launch_platform,json=bakLaunchPlatform,proto3,enum=LaunchPlatform" json:"bak_launch_platform,omitempty"`
	BakPrivilege      bool                   `protobuf:"varint,4,opt,name=bak_privilege,json=bakPrivilege,proto3" json:"bak_privilege,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *LaunchPrivilegeData) Reset() {
	*x = LaunchPrivilegeData{}
	mi := &file_pb_bp_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaunchPrivilegeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchPrivilegeData) ProtoMessage() {}

func (x *LaunchPrivilegeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchPrivilegeData.ProtoReflect.Descriptor instead.
func (*LaunchPrivilegeData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{291}
}

func (x *LaunchPrivilegeData) GetLaunchPlatform() LaunchPlatform {
	if x != nil {
		return x.LaunchPlatform
	}
	return LaunchPlatform_LaunchPlatformNull
}

func (x *LaunchPrivilegeData) GetIsPrivilege() bool {
	if x != nil {
		return x.IsPrivilege
	}
	return false
}

func (x *LaunchPrivilegeData) GetBakLaunchPlatform() LaunchPlatform {
	if x != nil {
		return x.BakLaunchPlatform
	}
	return LaunchPlatform_LaunchPlatformNull
}

func (x *LaunchPrivilegeData) GetBakPrivilege() bool {
	if x != nil {
		return x.BakPrivilege
	}
	return false
}

type BattlePassData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BattleMap     map[int32]*BattlePass  `protobuf:"bytes,1,rep,name=battle_map,json=battleMap,proto3" json:"battle_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BattlePassData) Reset() {
	*x = BattlePassData{}
	mi := &file_pb_bp_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BattlePassData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassData) ProtoMessage() {}

func (x *BattlePassData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassData.ProtoReflect.Descriptor instead.
func (*BattlePassData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{292}
}

func (x *BattlePassData) GetBattleMap() map[int32]*BattlePass {
	if x != nil {
		return x.BattleMap
	}
	return nil
}

type BattlePass struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Id            int32                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level         int32                          `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Curexp        int32                          `protobuf:"varint,3,opt,name=curexp,proto3" json:"curexp,omitempty"`
	WeekExp       int32                          `protobuf:"varint,4,opt,name=week_exp,json=weekExp,proto3" json:"week_exp,omitempty"`
	ExpLastTime   int32                          `protobuf:"varint,5,opt,name=exp_last_time,json=expLastTime,proto3" json:"exp_last_time,omitempty"`
	IsUnlock      bool                           `protobuf:"varint,6,opt,name=is_unlock,json=isUnlock,proto3" json:"is_unlock,omitempty"`
	BuyNormalPas  bool                           `protobuf:"varint,7,opt,name=buy_normal_pas,json=buyNormalPas,proto3" json:"buy_normal_pas,omitempty"`
	BuyPrimePass  bool                           `protobuf:"varint,8,opt,name=buy_prime_pass,json=buyPrimePass,proto3" json:"buy_prime_pass,omitempty"`
	Award         map[int32]*BattlePassAwardInfo `protobuf:"bytes,9,rep,name=award,proto3" json:"award,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsValid       bool                           `protobuf:"varint,10,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	IsSendedMail  bool                           `protobuf:"varint,11,opt,name=is_sended_mail,json=isSendedMail,proto3" json:"is_sended_mail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BattlePass) Reset() {
	*x = BattlePass{}
	mi := &file_pb_bp_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BattlePass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePass) ProtoMessage() {}

func (x *BattlePass) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePass.ProtoReflect.Descriptor instead.
func (*BattlePass) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{293}
}

func (x *BattlePass) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BattlePass) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *BattlePass) GetCurexp() int32 {
	if x != nil {
		return x.Curexp
	}
	return 0
}

func (x *BattlePass) GetWeekExp() int32 {
	if x != nil {
		return x.WeekExp
	}
	return 0
}

func (x *BattlePass) GetExpLastTime() int32 {
	if x != nil {
		return x.ExpLastTime
	}
	return 0
}

func (x *BattlePass) GetIsUnlock() bool {
	if x != nil {
		return x.IsUnlock
	}
	return false
}

func (x *BattlePass) GetBuyNormalPas() bool {
	if x != nil {
		return x.BuyNormalPas
	}
	return false
}

func (x *BattlePass) GetBuyPrimePass() bool {
	if x != nil {
		return x.BuyPrimePass
	}
	return false
}

func (x *BattlePass) GetAward() map[int32]*BattlePassAwardInfo {
	if x != nil {
		return x.Award
	}
	return nil
}

func (x *BattlePass) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *BattlePass) GetIsSendedMail() bool {
	if x != nil {
		return x.IsSendedMail
	}
	return false
}

type BattlePassAwardInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FreeAward     bool                   `protobuf:"varint,1,opt,name=free_award,json=freeAward,proto3" json:"free_award,omitempty"`
	PaidAward     bool                   `protobuf:"varint,2,opt,name=paid_award,json=paidAward,proto3" json:"paid_award,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BattlePassAwardInfo) Reset() {
	*x = BattlePassAwardInfo{}
	mi := &file_pb_bp_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BattlePassAwardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BattlePassAwardInfo) ProtoMessage() {}

func (x *BattlePassAwardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BattlePassAwardInfo.ProtoReflect.Descriptor instead.
func (*BattlePassAwardInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{294}
}

func (x *BattlePassAwardInfo) GetFreeAward() bool {
	if x != nil {
		return x.FreeAward
	}
	return false
}

func (x *BattlePassAwardInfo) GetPaidAward() bool {
	if x != nil {
		return x.PaidAward
	}
	return false
}

type RechargeData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AccumulateAmount   int64                  `protobuf:"varint,1,opt,name=accumulate_amount,json=accumulateAmount,proto3" json:"accumulate_amount,omitempty"`
	LastRechargeTime   int64                  `protobuf:"varint,2,opt,name=last_recharge_time,json=lastRechargeTime,proto3" json:"last_recharge_time,omitempty"`
	LastRechargeAmount int64                  `protobuf:"varint,3,opt,name=last_recharge_amount,json=lastRechargeAmount,proto3" json:"last_recharge_amount,omitempty"`
	LastDiamondAmount  int64                  `protobuf:"varint,4,opt,name=last_diamond_amount,json=lastDiamondAmount,proto3" json:"last_diamond_amount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RechargeData) Reset() {
	*x = RechargeData{}
	mi := &file_pb_bp_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RechargeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeData) ProtoMessage() {}

func (x *RechargeData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeData.ProtoReflect.Descriptor instead.
func (*RechargeData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{295}
}

func (x *RechargeData) GetAccumulateAmount() int64 {
	if x != nil {
		return x.AccumulateAmount
	}
	return 0
}

func (x *RechargeData) GetLastRechargeTime() int64 {
	if x != nil {
		return x.LastRechargeTime
	}
	return 0
}

func (x *RechargeData) GetLastRechargeAmount() int64 {
	if x != nil {
		return x.LastRechargeAmount
	}
	return 0
}

func (x *RechargeData) GetLastDiamondAmount() int64 {
	if x != nil {
		return x.LastDiamondAmount
	}
	return 0
}

type LuckyValueMgr struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	LuckValueInfo map[int32]*LuckyValueInfo `protobuf:"bytes,1,rep,name=luck_value_info,json=luckValueInfo,proto3" json:"luck_value_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	InitValue     bool                      `protobuf:"varint,2,opt,name=init_value,json=initValue,proto3" json:"init_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyValueMgr) Reset() {
	*x = LuckyValueMgr{}
	mi := &file_pb_bp_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyValueMgr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyValueMgr) ProtoMessage() {}

func (x *LuckyValueMgr) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyValueMgr.ProtoReflect.Descriptor instead.
func (*LuckyValueMgr) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{296}
}

func (x *LuckyValueMgr) GetLuckValueInfo() map[int32]*LuckyValueInfo {
	if x != nil {
		return x.LuckValueInfo
	}
	return nil
}

func (x *LuckyValueMgr) GetInitValue() bool {
	if x != nil {
		return x.InitValue
	}
	return false
}

type LuckyValueInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LuckId        int32                  `protobuf:"varint,1,opt,name=luck_id,json=luckId,proto3" json:"luck_id,omitempty"`
	LuckValue     int32                  `protobuf:"varint,2,opt,name=luck_value,json=luckValue,proto3" json:"luck_value,omitempty"`
	NextTime      int64                  `protobuf:"varint,3,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LuckyValueInfo) Reset() {
	*x = LuckyValueInfo{}
	mi := &file_pb_bp_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LuckyValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuckyValueInfo) ProtoMessage() {}

func (x *LuckyValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuckyValueInfo.ProtoReflect.Descriptor instead.
func (*LuckyValueInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{297}
}

func (x *LuckyValueInfo) GetLuckId() int32 {
	if x != nil {
		return x.LuckId
	}
	return 0
}

func (x *LuckyValueInfo) GetLuckValue() int32 {
	if x != nil {
		return x.LuckValue
	}
	return 0
}

func (x *LuckyValueInfo) GetNextTime() int64 {
	if x != nil {
		return x.NextTime
	}
	return 0
}

type HandbookData struct {
	state                      protoimpl.MessageState    `protogen:"open.v1"`
	UnlockNoteImportantRoleMap map[int32]*HandBookStruct `protobuf:"bytes,1,rep,name=unlock_note_important_role_map,json=unlockNoteImportantRoleMap,proto3" json:"unlock_note_important_role_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockNoteReadingBookMap   map[int32]*HandBookStruct `protobuf:"bytes,2,rep,name=unlock_note_reading_book_map,json=unlockNoteReadingBookMap,proto3" json:"unlock_note_reading_book_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockNoteDictionaryMap    map[int32]*HandBookStruct `protobuf:"bytes,3,rep,name=unlock_note_dictionary_map,json=unlockNoteDictionaryMap,proto3" json:"unlock_note_dictionary_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockNotePostCardMap      map[int32]*HandBookStruct `protobuf:"bytes,4,rep,name=unlock_note_post_card_map,json=unlockNotePostCardMap,proto3" json:"unlock_note_post_card_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UnlockNoteMonthCardMap     map[int32]*HandBookStruct `protobuf:"bytes,5,rep,name=unlock_note_month_card_map,json=unlockNoteMonthCardMap,proto3" json:"unlock_note_month_card_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *HandbookData) Reset() {
	*x = HandbookData{}
	mi := &file_pb_bp_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandbookData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandbookData) ProtoMessage() {}

func (x *HandbookData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandbookData.ProtoReflect.Descriptor instead.
func (*HandbookData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{298}
}

func (x *HandbookData) GetUnlockNoteImportantRoleMap() map[int32]*HandBookStruct {
	if x != nil {
		return x.UnlockNoteImportantRoleMap
	}
	return nil
}

func (x *HandbookData) GetUnlockNoteReadingBookMap() map[int32]*HandBookStruct {
	if x != nil {
		return x.UnlockNoteReadingBookMap
	}
	return nil
}

func (x *HandbookData) GetUnlockNoteDictionaryMap() map[int32]*HandBookStruct {
	if x != nil {
		return x.UnlockNoteDictionaryMap
	}
	return nil
}

func (x *HandbookData) GetUnlockNotePostCardMap() map[int32]*HandBookStruct {
	if x != nil {
		return x.UnlockNotePostCardMap
	}
	return nil
}

func (x *HandbookData) GetUnlockNoteMonthCardMap() map[int32]*HandBookStruct {
	if x != nil {
		return x.UnlockNoteMonthCardMap
	}
	return nil
}

type HandBookStruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Unlock        bool                   `protobuf:"varint,2,opt,name=unlock,proto3" json:"unlock,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandBookStruct) Reset() {
	*x = HandBookStruct{}
	mi := &file_pb_bp_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandBookStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandBookStruct) ProtoMessage() {}

func (x *HandBookStruct) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandBookStruct.ProtoReflect.Descriptor instead.
func (*HandBookStruct) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{299}
}

func (x *HandBookStruct) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HandBookStruct) GetUnlock() bool {
	if x != nil {
		return x.Unlock
	}
	return false
}

type MasterModeDungeonInfo struct {
	state                 protoimpl.MessageState                 `protogen:"open.v1"`
	MasterModeDungeonInfo map[int32]*SeasonMasterModeDungeonInfo `protobuf:"bytes,1,rep,name=master_mode_dungeon_info,json=masterModeDungeonInfo,proto3" json:"master_mode_dungeon_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsShow                bool                                   `protobuf:"varint,2,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MasterModeDungeonInfo) Reset() {
	*x = MasterModeDungeonInfo{}
	mi := &file_pb_bp_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterModeDungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterModeDungeonInfo) ProtoMessage() {}

func (x *MasterModeDungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterModeDungeonInfo.ProtoReflect.Descriptor instead.
func (*MasterModeDungeonInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{300}
}

func (x *MasterModeDungeonInfo) GetMasterModeDungeonInfo() map[int32]*SeasonMasterModeDungeonInfo {
	if x != nil {
		return x.MasterModeDungeonInfo
	}
	return nil
}

func (x *MasterModeDungeonInfo) GetIsShow() bool {
	if x != nil {
		return x.IsShow
	}
	return false
}

type SeasonMasterModeDungeonInfo struct {
	state                 protoimpl.MessageState               `protogen:"open.v1"`
	MasterModeDiffInfo    map[int32]*MasterModeDiffDungeonInfo `protobuf:"bytes,1,rep,name=master_mode_diff_info,json=masterModeDiffInfo,proto3" json:"master_mode_diff_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DungeonInfoUpdateTime int64                                `protobuf:"varint,2,opt,name=dungeon_info_update_time,json=dungeonInfoUpdateTime,proto3" json:"dungeon_info_update_time,omitempty"`
	SeasonAwards          map[int32]int32                      `protobuf:"bytes,3,rep,name=season_awards,json=seasonAwards,proto3" json:"season_awards,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SeasonMasterModeDungeonInfo) Reset() {
	*x = SeasonMasterModeDungeonInfo{}
	mi := &file_pb_bp_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeasonMasterModeDungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeasonMasterModeDungeonInfo) ProtoMessage() {}

func (x *SeasonMasterModeDungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeasonMasterModeDungeonInfo.ProtoReflect.Descriptor instead.
func (*SeasonMasterModeDungeonInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{301}
}

func (x *SeasonMasterModeDungeonInfo) GetMasterModeDiffInfo() map[int32]*MasterModeDiffDungeonInfo {
	if x != nil {
		return x.MasterModeDiffInfo
	}
	return nil
}

func (x *SeasonMasterModeDungeonInfo) GetDungeonInfoUpdateTime() int64 {
	if x != nil {
		return x.DungeonInfoUpdateTime
	}
	return 0
}

func (x *SeasonMasterModeDungeonInfo) GetSeasonAwards() map[int32]int32 {
	if x != nil {
		return x.SeasonAwards
	}
	return nil
}

type MasterModeDiffDungeonInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DungeonInfo   map[int32]*DungeonInfo `protobuf:"bytes,1,rep,name=dungeon_info,json=dungeonInfo,proto3" json:"dungeon_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MasterModeDiffDungeonInfo) Reset() {
	*x = MasterModeDiffDungeonInfo{}
	mi := &file_pb_bp_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MasterModeDiffDungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterModeDiffDungeonInfo) ProtoMessage() {}

func (x *MasterModeDiffDungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterModeDiffDungeonInfo.ProtoReflect.Descriptor instead.
func (*MasterModeDiffDungeonInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{302}
}

func (x *MasterModeDiffDungeonInfo) GetDungeonInfo() map[int32]*DungeonInfo {
	if x != nil {
		return x.DungeonInfo
	}
	return nil
}

type DungeonInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DungeonId     int32                  `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	CompleteCount int32                  `protobuf:"varint,2,opt,name=complete_count,json=completeCount,proto3" json:"complete_count,omitempty"`
	AwardFlg      int32                  `protobuf:"varint,3,opt,name=award_flg,json=awardFlg,proto3" json:"award_flg,omitempty"`
	Score         int32                  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	PassTime      int32                  `protobuf:"varint,5,opt,name=pass_time,json=passTime,proto3" json:"pass_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DungeonInfo) Reset() {
	*x = DungeonInfo{}
	mi := &file_pb_bp_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DungeonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DungeonInfo) ProtoMessage() {}

func (x *DungeonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DungeonInfo.ProtoReflect.Descriptor instead.
func (*DungeonInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{303}
}

func (x *DungeonInfo) GetDungeonId() int32 {
	if x != nil {
		return x.DungeonId
	}
	return 0
}

func (x *DungeonInfo) GetCompleteCount() int32 {
	if x != nil {
		return x.CompleteCount
	}
	return 0
}

func (x *DungeonInfo) GetAwardFlg() int32 {
	if x != nil {
		return x.AwardFlg
	}
	return 0
}

func (x *DungeonInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *DungeonInfo) GetPassTime() int32 {
	if x != nil {
		return x.PassTime
	}
	return 0
}

type StatisticsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatRecordMap map[int32]*StatRecord  `protobuf:"bytes,1,rep,name=stat_record_map,json=statRecordMap,proto3" json:"stat_record_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatisticsData) Reset() {
	*x = StatisticsData{}
	mi := &file_pb_bp_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsData) ProtoMessage() {}

func (x *StatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsData.ProtoReflect.Descriptor instead.
func (*StatisticsData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{304}
}

func (x *StatisticsData) GetStatRecordMap() map[int32]*StatRecord {
	if x != nil {
		return x.StatRecordMap
	}
	return nil
}

type StatRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cnt           uint64                 `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	GroupCnts     map[int32]uint64       `protobuf:"bytes,2,rep,name=group_cnts,json=groupCnts,proto3" json:"group_cnts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	SceneRecords  map[int32]*SceneRecord `protobuf:"bytes,3,rep,name=scene_records,json=sceneRecords,proto3" json:"scene_records,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatRecord) Reset() {
	*x = StatRecord{}
	mi := &file_pb_bp_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatRecord) ProtoMessage() {}

func (x *StatRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatRecord.ProtoReflect.Descriptor instead.
func (*StatRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{305}
}

func (x *StatRecord) GetCnt() uint64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *StatRecord) GetGroupCnts() map[int32]uint64 {
	if x != nil {
		return x.GroupCnts
	}
	return nil
}

func (x *StatRecord) GetSceneRecords() map[int32]*SceneRecord {
	if x != nil {
		return x.SceneRecords
	}
	return nil
}

type SceneRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cnt           uint64                 `protobuf:"varint,1,opt,name=cnt,proto3" json:"cnt,omitempty"`
	GroupCnts     map[int32]uint64       `protobuf:"bytes,2,rep,name=group_cnts,json=groupCnts,proto3" json:"group_cnts,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneRecord) Reset() {
	*x = SceneRecord{}
	mi := &file_pb_bp_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneRecord) ProtoMessage() {}

func (x *SceneRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneRecord.ProtoReflect.Descriptor instead.
func (*SceneRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{306}
}

func (x *SceneRecord) GetCnt() uint64 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *SceneRecord) GetGroupCnts() map[int32]uint64 {
	if x != nil {
		return x.GroupCnts
	}
	return nil
}

type CompensationStatistics struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	SeasonData    map[uint32]*CompensationSeasonStatistics `protobuf:"bytes,1,rep,name=season_data,json=seasonData,proto3" json:"season_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastSeasonId  uint32                                   `protobuf:"varint,2,opt,name=last_season_id,json=lastSeasonId,proto3" json:"last_season_id,omitempty"`
	CurPoint      int64                                    `protobuf:"varint,3,opt,name=cur_point,json=curPoint,proto3" json:"cur_point,omitempty"`
	MaxPoint      int64                                    `protobuf:"varint,4,opt,name=max_point,json=maxPoint,proto3" json:"max_point,omitempty"`
	LastWeek      map[uint32]int32                         `protobuf:"bytes,5,rep,name=last_week,json=lastWeek,proto3" json:"last_week,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompensationStatistics) Reset() {
	*x = CompensationStatistics{}
	mi := &file_pb_bp_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompensationStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationStatistics) ProtoMessage() {}

func (x *CompensationStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationStatistics.ProtoReflect.Descriptor instead.
func (*CompensationStatistics) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{307}
}

func (x *CompensationStatistics) GetSeasonData() map[uint32]*CompensationSeasonStatistics {
	if x != nil {
		return x.SeasonData
	}
	return nil
}

func (x *CompensationStatistics) GetLastSeasonId() uint32 {
	if x != nil {
		return x.LastSeasonId
	}
	return 0
}

func (x *CompensationStatistics) GetCurPoint() int64 {
	if x != nil {
		return x.CurPoint
	}
	return 0
}

func (x *CompensationStatistics) GetMaxPoint() int64 {
	if x != nil {
		return x.MaxPoint
	}
	return 0
}

func (x *CompensationStatistics) GetLastWeek() map[uint32]int32 {
	if x != nil {
		return x.LastWeek
	}
	return nil
}

type CompensationSeasonStatistics struct {
	state             protoimpl.MessageState         `protogen:"open.v1"`
	WeekData          map[uint32]*CompensationRecord `protobuf:"bytes,1,rep,name=week_data,json=weekData,proto3" json:"week_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Compensation      map[uint32]int32               `protobuf:"bytes,2,rep,name=compensation,proto3" json:"compensation,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MaxClimbUpLayerId int32                          `protobuf:"varint,3,opt,name=max_climb_up_layer_id,json=maxClimbUpLayerId,proto3" json:"max_climb_up_layer_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CompensationSeasonStatistics) Reset() {
	*x = CompensationSeasonStatistics{}
	mi := &file_pb_bp_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompensationSeasonStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationSeasonStatistics) ProtoMessage() {}

func (x *CompensationSeasonStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationSeasonStatistics.ProtoReflect.Descriptor instead.
func (*CompensationSeasonStatistics) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{308}
}

func (x *CompensationSeasonStatistics) GetWeekData() map[uint32]*CompensationRecord {
	if x != nil {
		return x.WeekData
	}
	return nil
}

func (x *CompensationSeasonStatistics) GetCompensation() map[uint32]int32 {
	if x != nil {
		return x.Compensation
	}
	return nil
}

func (x *CompensationSeasonStatistics) GetMaxClimbUpLayerId() int32 {
	if x != nil {
		return x.MaxClimbUpLayerId
	}
	return 0
}

type CompensationRecord struct {
	state            protoimpl.MessageState       `protogen:"open.v1"`
	CompensationData map[uint32]*CompensationData `protobuf:"bytes,1,rep,name=compensation_data,json=compensationData,proto3" json:"compensation_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CompensationRecord) Reset() {
	*x = CompensationRecord{}
	mi := &file_pb_bp_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompensationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationRecord) ProtoMessage() {}

func (x *CompensationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationRecord.ProtoReflect.Descriptor instead.
func (*CompensationRecord) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{309}
}

func (x *CompensationRecord) GetCompensationData() map[uint32]*CompensationData {
	if x != nil {
		return x.CompensationData
	}
	return nil
}

type CompensationData struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OverflowEnergy int64                  `protobuf:"varint,1,opt,name=overflow_energy,json=overflowEnergy,proto3" json:"overflow_energy,omitempty"`
	FinishTimes    int32                  `protobuf:"varint,2,opt,name=finish_times,json=finishTimes,proto3" json:"finish_times,omitempty"`
	ClimbUpLayerId int32                  `protobuf:"varint,3,opt,name=climb_up_layer_id,json=climbUpLayerId,proto3" json:"climb_up_layer_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CompensationData) Reset() {
	*x = CompensationData{}
	mi := &file_pb_bp_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompensationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompensationData) ProtoMessage() {}

func (x *CompensationData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompensationData.ProtoReflect.Descriptor instead.
func (*CompensationData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{310}
}

func (x *CompensationData) GetOverflowEnergy() int64 {
	if x != nil {
		return x.OverflowEnergy
	}
	return 0
}

func (x *CompensationData) GetFinishTimes() int32 {
	if x != nil {
		return x.FinishTimes
	}
	return 0
}

func (x *CompensationData) GetClimbUpLayerId() int32 {
	if x != nil {
		return x.ClimbUpLayerId
	}
	return 0
}

type BubbleInfo struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	BubbleScore              uint32                 `protobuf:"varint,1,opt,name=bubble_score,json=bubbleScore,proto3" json:"bubble_score,omitempty"`
	BubbleAwardCount         uint32                 `protobuf:"varint,2,opt,name=bubble_award_count,json=bubbleAwardCount,proto3" json:"bubble_award_count,omitempty"`
	AdditionalTargetUuidList []uint64               `protobuf:"varint,3,rep,packed,name=additional_target_uuid_list,json=additionalTargetUuidList,proto3" json:"additional_target_uuid_list,omitempty"`
	LastRefreshTime          int64                  `protobuf:"varint,4,opt,name=last_refresh_time,json=lastRefreshTime,proto3" json:"last_refresh_time,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *BubbleInfo) Reset() {
	*x = BubbleInfo{}
	mi := &file_pb_bp_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BubbleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BubbleInfo) ProtoMessage() {}

func (x *BubbleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BubbleInfo.ProtoReflect.Descriptor instead.
func (*BubbleInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{311}
}

func (x *BubbleInfo) GetBubbleScore() uint32 {
	if x != nil {
		return x.BubbleScore
	}
	return 0
}

func (x *BubbleInfo) GetBubbleAwardCount() uint32 {
	if x != nil {
		return x.BubbleAwardCount
	}
	return 0
}

func (x *BubbleInfo) GetAdditionalTargetUuidList() []uint64 {
	if x != nil {
		return x.AdditionalTargetUuidList
	}
	return nil
}

func (x *BubbleInfo) GetLastRefreshTime() int64 {
	if x != nil {
		return x.LastRefreshTime
	}
	return 0
}

type BubbleActData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BubbleInfo    map[int32]*BubbleInfo  `protobuf:"bytes,5,rep,name=bubble_info,json=bubbleInfo,proto3" json:"bubble_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BubbleActData) Reset() {
	*x = BubbleActData{}
	mi := &file_pb_bp_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BubbleActData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BubbleActData) ProtoMessage() {}

func (x *BubbleActData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BubbleActData.ProtoReflect.Descriptor instead.
func (*BubbleActData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{312}
}

func (x *BubbleActData) GetBubbleInfo() map[int32]*BubbleInfo {
	if x != nil {
		return x.BubbleInfo
	}
	return nil
}

type MailClaimedInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AttachmentMailList []int64                `protobuf:"varint,1,rep,packed,name=attachment_mail_list,json=attachmentMailList,proto3" json:"attachment_mail_list,omitempty"`
	ClaimedMails       map[int64]int64        `protobuf:"bytes,2,rep,name=claimed_mails,json=claimedMails,proto3" json:"claimed_mails,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MailClaimedInfo) Reset() {
	*x = MailClaimedInfo{}
	mi := &file_pb_bp_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailClaimedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailClaimedInfo) ProtoMessage() {}

func (x *MailClaimedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailClaimedInfo.ProtoReflect.Descriptor instead.
func (*MailClaimedInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{313}
}

func (x *MailClaimedInfo) GetAttachmentMailList() []int64 {
	if x != nil {
		return x.AttachmentMailList
	}
	return nil
}

func (x *MailClaimedInfo) GetClaimedMails() map[int64]int64 {
	if x != nil {
		return x.ClaimedMails
	}
	return nil
}

type NewbieData struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalOnlineTime int64                  `protobuf:"varint,1,opt,name=total_online_time,json=totalOnlineTime,proto3" json:"total_online_time,omitempty"`
	IsNewbie        bool                   `protobuf:"varint,2,opt,name=is_newbie,json=isNewbie,proto3" json:"is_newbie,omitempty"`
	IsCancelNewbie  bool                   `protobuf:"varint,3,opt,name=is_cancel_newbie,json=isCancelNewbie,proto3" json:"is_cancel_newbie,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NewbieData) Reset() {
	*x = NewbieData{}
	mi := &file_pb_bp_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewbieData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewbieData) ProtoMessage() {}

func (x *NewbieData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewbieData.ProtoReflect.Descriptor instead.
func (*NewbieData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{314}
}

func (x *NewbieData) GetTotalOnlineTime() int64 {
	if x != nil {
		return x.TotalOnlineTime
	}
	return 0
}

func (x *NewbieData) GetIsNewbie() bool {
	if x != nil {
		return x.IsNewbie
	}
	return false
}

func (x *NewbieData) GetIsCancelNewbie() bool {
	if x != nil {
		return x.IsCancelNewbie
	}
	return false
}

type FightPoint struct {
	state           protoimpl.MessageState    `protogen:"open.v1"`
	TotalFightPoint int32                     `protobuf:"varint,1,opt,name=total_fight_point,json=totalFightPoint,proto3" json:"total_fight_point,omitempty"`
	FightPointData  map[int32]*FightPointData `protobuf:"bytes,2,rep,name=fight_point_data,json=fightPointData,proto3" json:"fight_point_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FightPoint) Reset() {
	*x = FightPoint{}
	mi := &file_pb_bp_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FightPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPoint) ProtoMessage() {}

func (x *FightPoint) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPoint.ProtoReflect.Descriptor instead.
func (*FightPoint) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{315}
}

func (x *FightPoint) GetTotalFightPoint() int32 {
	if x != nil {
		return x.TotalFightPoint
	}
	return 0
}

func (x *FightPoint) GetFightPointData() map[int32]*FightPointData {
	if x != nil {
		return x.FightPointData
	}
	return nil
}

type FightPointData struct {
	state           protoimpl.MessageState       `protogen:"open.v1"`
	FunctionType    int32                        `protobuf:"varint,1,opt,name=function_type,json=functionType,proto3" json:"function_type,omitempty"`
	TotalPoint      int32                        `protobuf:"varint,2,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	Point           int32                        `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	SubFunctionData map[int32]*FightPointSubData `protobuf:"bytes,4,rep,name=sub_function_data,json=subFunctionData,proto3" json:"sub_function_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FightPointData) Reset() {
	*x = FightPointData{}
	mi := &file_pb_bp_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FightPointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPointData) ProtoMessage() {}

func (x *FightPointData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPointData.ProtoReflect.Descriptor instead.
func (*FightPointData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{316}
}

func (x *FightPointData) GetFunctionType() int32 {
	if x != nil {
		return x.FunctionType
	}
	return 0
}

func (x *FightPointData) GetTotalPoint() int32 {
	if x != nil {
		return x.TotalPoint
	}
	return 0
}

func (x *FightPointData) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *FightPointData) GetSubFunctionData() map[int32]*FightPointSubData {
	if x != nil {
		return x.SubFunctionData
	}
	return nil
}

type FightPointSubData struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	FunctionType     int32                  `protobuf:"varint,1,opt,name=function_type,json=functionType,proto3" json:"function_type,omitempty"`
	RootFunctionType int32                  `protobuf:"varint,2,opt,name=root_function_type,json=rootFunctionType,proto3" json:"root_function_type,omitempty"`
	Point            int32                  `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FightPointSubData) Reset() {
	*x = FightPointSubData{}
	mi := &file_pb_bp_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FightPointSubData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FightPointSubData) ProtoMessage() {}

func (x *FightPointSubData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FightPointSubData.ProtoReflect.Descriptor instead.
func (*FightPointSubData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{317}
}

func (x *FightPointSubData) GetFunctionType() int32 {
	if x != nil {
		return x.FunctionType
	}
	return 0
}

func (x *FightPointSubData) GetRootFunctionType() int32 {
	if x != nil {
		return x.RootFunctionType
	}
	return 0
}

func (x *FightPointSubData) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

type SignInfo struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	SignInfo      map[int32]*SignStatusList `protobuf:"bytes,1,rep,name=sign_info,json=signInfo,proto3" json:"sign_info,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignInfo) Reset() {
	*x = SignInfo{}
	mi := &file_pb_bp_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInfo) ProtoMessage() {}

func (x *SignInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInfo.ProtoReflect.Descriptor instead.
func (*SignInfo) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{318}
}

func (x *SignInfo) GetSignInfo() map[int32]*SignStatusList {
	if x != nil {
		return x.SignInfo
	}
	return nil
}

type SignStatusList struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SignStatusData map[int32]*SignStatus  `protobuf:"bytes,1,rep,name=sign_status_data,json=signStatusData,proto3" json:"sign_status_data,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SignStatusList) Reset() {
	*x = SignStatusList{}
	mi := &file_pb_bp_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignStatusList) ProtoMessage() {}

func (x *SignStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignStatusList.ProtoReflect.Descriptor instead.
func (*SignStatusList) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{319}
}

func (x *SignStatusList) GetSignStatusData() map[int32]*SignStatus {
	if x != nil {
		return x.SignStatusData
	}
	return nil
}

type SignStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsSigned      bool                   `protobuf:"varint,1,opt,name=is_signed,json=isSigned,proto3" json:"is_signed,omitempty"`
	IsRewarded    bool                   `protobuf:"varint,2,opt,name=is_rewarded,json=isRewarded,proto3" json:"is_rewarded,omitempty"`
	IsSupplement  bool                   `protobuf:"varint,3,opt,name=is_supplement,json=isSupplement,proto3" json:"is_supplement,omitempty"`
	SignTime      int64                  `protobuf:"varint,4,opt,name=sign_time,json=signTime,proto3" json:"sign_time,omitempty"`
	RewardTime    int64                  `protobuf:"varint,5,opt,name=reward_time,json=rewardTime,proto3" json:"reward_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignStatus) Reset() {
	*x = SignStatus{}
	mi := &file_pb_bp_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignStatus) ProtoMessage() {}

func (x *SignStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignStatus.ProtoReflect.Descriptor instead.
func (*SignStatus) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{320}
}

func (x *SignStatus) GetIsSigned() bool {
	if x != nil {
		return x.IsSigned
	}
	return false
}

func (x *SignStatus) GetIsRewarded() bool {
	if x != nil {
		return x.IsRewarded
	}
	return false
}

func (x *SignStatus) GetIsSupplement() bool {
	if x != nil {
		return x.IsSupplement
	}
	return false
}

func (x *SignStatus) GetSignTime() int64 {
	if x != nil {
		return x.SignTime
	}
	return 0
}

func (x *SignStatus) GetRewardTime() int64 {
	if x != nil {
		return x.RewardTime
	}
	return 0
}

type CharStatisticsData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoginDays     int32                  `protobuf:"varint,1,opt,name=login_days,json=loginDays,proto3" json:"login_days,omitempty"`
	LastLoginTime uint64                 `protobuf:"varint,2,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharStatisticsData) Reset() {
	*x = CharStatisticsData{}
	mi := &file_pb_bp_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharStatisticsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharStatisticsData) ProtoMessage() {}

func (x *CharStatisticsData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_bp_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharStatisticsData.ProtoReflect.Descriptor instead.
func (*CharStatisticsData) Descriptor() ([]byte, []int) {
	return file_pb_bp_proto_rawDescGZIP(), []int{321}
}

func (x *CharStatisticsData) GetLoginDays() int32 {
	if x != nil {
		return x.LoginDays
	}
	return 0
}

func (x *CharStatisticsData) GetLastLoginTime() uint64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

var File_pb_bp_proto protoreflect.FileDescriptor

const file_pb_bp_proto_rawDesc = "" +
	"\n" +
	"\vpb/bp.proto\"\xf5\x06\n" +
	"\tBasicData\x12\x1b\n" +
	"\x06CharID\x18\x01 \x01(\x03H\x00R\x06CharID\x88\x01\x01\x12\x1b\n" +
	"\x06ShowId\x18\x02 \x01(\x03H\x01R\x06ShowId\x88\x01\x01\x12\x17\n" +
	"\x04Name\x18\x03 \x01(\tH\x02R\x04Name\x88\x01\x01\x12\x1b\n" +
	"\x06Gender\x18\x04 \x01(\x05H\x03R\x06Gender\x88\x01\x01\x12+\n" +
	"\bBodySize\x18\x05 \x01(\x0e2\n" +
	".EBodySizeH\x04R\bBodySize\x88\x01\x01\x12\x19\n" +
	"\x05Level\x18\x06 \x01(\x05H\x05R\x05Level\x88\x01\x01\x12\x1d\n" +
	"\aSceneId\x18\a \x01(\x05H\x06R\aSceneId\x88\x01\x01\x12$\n" +
	"\rPersonalState\x18\b \x03(\x05R\rPersonalState\x12%\n" +
	"\vOfflineTime\x18\t \x01(\x03H\aR\vOfflineTime\x88\x01\x01\x12!\n" +
	"\tSceneGuid\x18\n" +
	" \x01(\tH\bR\tSceneGuid\x88\x01\x01\x12#\n" +
	"\n" +
	"CreateTime\x18\v \x01(\x03H\tR\n" +
	"CreateTime\x88\x01\x01\x12-\n" +
	"\x0fCurTalentPoolId\x18\f \x01(\rH\n" +
	"R\x0fCurTalentPoolId\x88\x01\x01\x12\x1d\n" +
	"\aBotAiId\x18\r \x01(\rH\vR\aBotAiId\x88\x01\x01\x12-\n" +
	"\x0fRegisterChannel\x18\x0e \x01(\x05H\fR\x0fRegisterChannel\x88\x01\x01\x12!\n" +
	"\tCharState\x18\x0f \x01(\x04H\rR\tCharState\x88\x01\x01\x12#\n" +
	"\n" +
	"OnlineTime\x18\x10 \x01(\x03H\x0eR\n" +
	"OnlineTime\x88\x01\x01\x12+\n" +
	"\x0eSumSaveDiamond\x18\x11 \x01(\x03H\x0fR\x0eSumSaveDiamond\x88\x01\x01\x12\x1f\n" +
	"\bIsNewbie\x18\x12 \x01(\bH\x10R\bIsNewbie\x88\x01\x01B\t\n" +
	"\a_CharIDB\t\n" +
	"\a_ShowIdB\a\n" +
	"\x05_NameB\t\n" +
	"\a_GenderB\v\n" +
	"\t_BodySizeB\b\n" +
	"\x06_LevelB\n" +
	"\n" +
	"\b_SceneIdB\x0e\n" +
	"\f_OfflineTimeB\f\n" +
	"\n" +
	"_SceneGuidB\r\n" +
	"\v_CreateTimeB\x12\n" +
	"\x10_CurTalentPoolIdB\n" +
	"\n" +
	"\b_BotAiIdB\x12\n" +
	"\x10_RegisterChannelB\f\n" +
	"\n" +
	"_CharStateB\r\n" +
	"\v_OnlineTimeB\x11\n" +
	"\x0f_SumSaveDiamondB\v\n" +
	"\t_IsNewbie\"\x9f\x01\n" +
	"\rPictureVerify\x12\x17\n" +
	"\x04Size\x18\x01 \x01(\rH\x00R\x04Size\x88\x01\x01\x12-\n" +
	"\x0fReviewStartTime\x18\x02 \x01(\rH\x01R\x0fReviewStartTime\x88\x01\x01\x12\x1d\n" +
	"\aVersion\x18\x03 \x01(\x03H\x02R\aVersion\x88\x01\x01B\a\n" +
	"\x05_SizeB\x12\n" +
	"\x10_ReviewStartTimeB\n" +
	"\n" +
	"\b_Version\"d\n" +
	"\vPictureInfo\x12\x15\n" +
	"\x03Url\x18\x01 \x01(\tH\x00R\x03Url\x88\x01\x01\x12+\n" +
	"\x06Verify\x18\x02 \x01(\v2\x0e.PictureVerifyH\x01R\x06Verify\x88\x01\x01B\x06\n" +
	"\x04_UrlB\t\n" +
	"\a_Verify\"\xbb\x02\n" +
	"\n" +
	"AvatarInfo\x12\x1f\n" +
	"\bAvatarId\x18\x01 \x01(\x05H\x00R\bAvatarId\x88\x01\x01\x12+\n" +
	"\aProfile\x18\x02 \x01(\v2\f.PictureInfoH\x01R\aProfile\x88\x01\x01\x12-\n" +
	"\bHalfBody\x18\x03 \x01(\v2\f.PictureInfoH\x02R\bHalfBody\x88\x01\x01\x125\n" +
	"\x13BusinessCardStyleId\x18\x04 \x01(\x05H\x03R\x13BusinessCardStyleId\x88\x01\x01\x12)\n" +
	"\rAvatarFrameId\x18\x05 \x01(\x05H\x04R\rAvatarFrameId\x88\x01\x01B\v\n" +
	"\t_AvatarIdB\n" +
	"\n" +
	"\b_ProfileB\v\n" +
	"\t_HalfBodyB\x16\n" +
	"\x14_BusinessCardStyleIdB\x10\n" +
	"\x0e_AvatarFrameId\"T\n" +
	"\aIntVec3\x12\x11\n" +
	"\x01X\x18\x01 \x01(\x05H\x00R\x01X\x88\x01\x01\x12\x11\n" +
	"\x01Y\x18\x02 \x01(\x05H\x01R\x01Y\x88\x01\x01\x12\x11\n" +
	"\x01Z\x18\x03 \x01(\x05H\x02R\x01Z\x88\x01\x01B\x04\n" +
	"\x02_XB\x04\n" +
	"\x02_YB\x04\n" +
	"\x02_Z\"T\n" +
	"\aVector3\x12\x11\n" +
	"\x01X\x18\x01 \x01(\x02H\x00R\x01X\x88\x01\x01\x12\x11\n" +
	"\x01Y\x18\x02 \x01(\x02H\x01R\x01Y\x88\x01\x01\x12\x11\n" +
	"\x01Z\x18\x03 \x01(\x02H\x02R\x01Z\x88\x01\x01B\x04\n" +
	"\x02_XB\x04\n" +
	"\x02_YB\x04\n" +
	"\x02_Z\";\n" +
	"\aVector2\x12\x11\n" +
	"\x01X\x18\x01 \x01(\x02H\x00R\x01X\x88\x01\x01\x12\x11\n" +
	"\x01Y\x18\x02 \x01(\x02H\x01R\x01Y\x88\x01\x01B\x04\n" +
	"\x02_XB\x04\n" +
	"\x02_Y\"\xa4\x02\n" +
	"\bFaceData\x123\n" +
	"\bFaceInfo\x18\x01 \x03(\v2\x17.FaceData.FaceInfoEntryR\bFaceInfo\x126\n" +
	"\tColorInfo\x18\x02 \x03(\v2\x18.FaceData.ColorInfoEntryR\tColorInfo\x12\x1b\n" +
	"\x06Height\x18\x03 \x01(\x02H\x00R\x06Height\x88\x01\x01\x1a;\n" +
	"\rFaceInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aF\n" +
	"\x0eColorInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\v2\b.IntVec3R\x05value:\x028\x01B\t\n" +
	"\a_Height\"~\n" +
	"\x0eProfessionData\x12'\n" +
	"\fProfessionId\x18\x01 \x01(\x05H\x00R\fProfessionId\x88\x01\x01\x12#\n" +
	"\n" +
	"WeaponSkin\x18\x02 \x01(\x05H\x01R\n" +
	"WeaponSkin\x88\x01\x01B\x0f\n" +
	"\r_ProfessionIdB\r\n" +
	"\v_WeaponSkin\"X\n" +
	"\tEquipNine\x12\x17\n" +
	"\x04Slot\x18\x01 \x01(\x05H\x00R\x04Slot\x88\x01\x01\x12\x1d\n" +
	"\aEquipID\x18\x02 \x01(\x05H\x01R\aEquipID\x88\x01\x01B\a\n" +
	"\x05_SlotB\n" +
	"\n" +
	"\b_EquipID\"7\n" +
	"\tEquipData\x12*\n" +
	"\n" +
	"EquipInfos\x18\x01 \x03(\v2\n" +
	".EquipNineR\n" +
	"EquipInfos\"\xca\x02\n" +
	"\x10FashionColorInfo\x12\x13\n" +
	"\x02Id\x18\x01 \x01(\x05H\x00R\x02Id\x88\x01\x01\x125\n" +
	"\x06Colors\x18\x02 \x03(\v2\x1d.FashionColorInfo.ColorsEntryR\x06Colors\x12P\n" +
	"\x0fAttachmentColor\x18\x03 \x03(\v2&.FashionColorInfo.AttachmentColorEntryR\x0fAttachmentColor\x1aC\n" +
	"\vColorsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\v2\b.IntVec3R\x05value:\x028\x01\x1aL\n" +
	"\x14AttachmentColorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\v2\b.IntVec3R\x05value:\x028\x01B\x05\n" +
	"\x03_Id\"\x9b\x01\n" +
	"\vFashionInfo\x12\x17\n" +
	"\x04Slot\x18\x01 \x01(\x05H\x00R\x04Slot\x88\x01\x01\x12!\n" +
	"\tFashionId\x18\x02 \x01(\x05H\x01R\tFashionId\x88\x01\x01\x12.\n" +
	"\x06Colors\x18\x03 \x01(\v2\x11.FashionColorInfoH\x02R\x06Colors\x88\x01\x01B\a\n" +
	"\x05_SlotB\f\n" +
	"\n" +
	"_FashionIdB\t\n" +
	"\a_Colors\"?\n" +
	"\vFashionData\x120\n" +
	"\fFashionInfos\x18\x01 \x03(\v2\f.FashionInfoR\fFashionInfos\"\x8a\x01\n" +
	"\vSettingData\x12<\n" +
	"\n" +
	"SettingMap\x18\x01 \x03(\v2\x1c.SettingData.SettingMapEntryR\n" +
	"SettingMap\x1a=\n" +
	"\x0fSettingMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"t\n" +
	"\bPosition\x12\x11\n" +
	"\x01X\x18\x01 \x01(\x02H\x00R\x01X\x88\x01\x01\x12\x11\n" +
	"\x01Y\x18\x02 \x01(\x02H\x01R\x01Y\x88\x01\x01\x12\x11\n" +
	"\x01Z\x18\x03 \x01(\x02H\x02R\x01Z\x88\x01\x01\x12\x15\n" +
	"\x03Dir\x18\x04 \x01(\x02H\x03R\x03Dir\x88\x01\x01B\x04\n" +
	"\x02_XB\x04\n" +
	"\x02_YB\x04\n" +
	"\x02_ZB\x06\n" +
	"\x04_Dir\"\x9b\x01\n" +
	"\rLastSceneData\x12\x1d\n" +
	"\aSceneId\x18\x01 \x01(\rH\x00R\aSceneId\x88\x01\x01\x12 \n" +
	"\x03Pos\x18\x02 \x01(\v2\t.PositionH\x01R\x03Pos\x88\x01\x01\x12%\n" +
	"\vSceneAreaId\x18\x03 \x01(\x05H\x02R\vSceneAreaId\x88\x01\x01B\n" +
	"\n" +
	"\b_SceneIdB\x06\n" +
	"\x04_PosB\x0e\n" +
	"\f_SceneAreaId\"4\n" +
	"\rSyncSceneData\x12\x19\n" +
	"\x05MapId\x18\x01 \x01(\rH\x00R\x05MapId\x88\x01\x01B\b\n" +
	"\x06_MapId\"\xaf\t\n" +
	"\tSceneData\x12\x19\n" +
	"\x05MapId\x18\x01 \x01(\rH\x00R\x05MapId\x88\x01\x01\x12!\n" +
	"\tChannelId\x18\x02 \x01(\rH\x01R\tChannelId\x88\x01\x01\x12 \n" +
	"\x03Pos\x18\x03 \x01(\v2\t.PositionH\x02R\x03Pos\x88\x01\x01\x12!\n" +
	"\tLevelUuid\x18\x04 \x01(\x03H\x03R\tLevelUuid\x88\x01\x01\x12*\n" +
	"\bLevelPos\x18\x05 \x01(\v2\t.PositionH\x04R\bLevelPos\x88\x01\x01\x12#\n" +
	"\n" +
	"LevelMapId\x18\x06 \x01(\rH\x05R\n" +
	"LevelMapId\x88\x01\x01\x12)\n" +
	"\rLevelReviveId\x18\a \x01(\rH\x06R\rLevelReviveId\x88\x01\x01\x124\n" +
	"\bRecordId\x18\b \x03(\v2\x18.SceneData.RecordIdEntryR\bRecordId\x12\x1d\n" +
	"\aPlaneId\x18\t \x01(\rH\aR\aPlaneId\x88\x01\x01\x12#\n" +
	"\n" +
	"SceneLayer\x18\n" +
	" \x01(\rH\bR\n" +
	"SceneLayer\x88\x01\x01\x12+\n" +
	"\x0eCanSwitchLayer\x18\v \x01(\bH\tR\x0eCanSwitchLayer\x88\x01\x01\x124\n" +
	"\rBeforeFallPos\x18\f \x01(\v2\t.PositionH\n" +
	"R\rBeforeFallPos\x88\x01\x01\x12!\n" +
	"\tSceneGuid\x18\r \x01(\tH\vR\tSceneGuid\x88\x01\x01\x12%\n" +
	"\vDungeonGuid\x18\x0e \x01(\tH\fR\vDungeonGuid\x88\x01\x01\x12\x1b\n" +
	"\x06LineId\x18\x0f \x01(\rH\rR\x06LineId\x88\x01\x01\x125\n" +
	"\x13VisualLayerConfigId\x18\x10 \x01(\rH\x0eR\x13VisualLayerConfigId\x88\x01\x01\x129\n" +
	"\rLastSceneData\x18\x11 \x01(\v2\x0e.LastSceneDataH\x0fR\rLastSceneData\x88\x01\x01\x12%\n" +
	"\vSceneAreaId\x18\x12 \x01(\x05H\x10R\vSceneAreaId\x88\x01\x01\x12%\n" +
	"\vLevelAreaId\x18\x13 \x01(\x05H\x11R\vLevelAreaId\x88\x01\x01\x129\n" +
	"\x15BeforeFallSceneAreaId\x18\x14 \x01(\x05H\x12R\x15BeforeFallSceneAreaId\x88\x01\x01\x1a;\n" +
	"\rRecordIdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01B\b\n" +
	"\x06_MapIdB\f\n" +
	"\n" +
	"_ChannelIdB\x06\n" +
	"\x04_PosB\f\n" +
	"\n" +
	"_LevelUuidB\v\n" +
	"\t_LevelPosB\r\n" +
	"\v_LevelMapIdB\x10\n" +
	"\x0e_LevelReviveIdB\n" +
	"\n" +
	"\b_PlaneIdB\r\n" +
	"\v_SceneLayerB\x11\n" +
	"\x0f_CanSwitchLayerB\x10\n" +
	"\x0e_BeforeFallPosB\f\n" +
	"\n" +
	"_SceneGuidB\x0e\n" +
	"\f_DungeonGuidB\t\n" +
	"\a_LineIdB\x16\n" +
	"\x14_VisualLayerConfigIdB\x10\n" +
	"\x0e_LastSceneDataB\x0e\n" +
	"\f_SceneAreaIdB\x0e\n" +
	"\f_LevelAreaIdB\x18\n" +
	"\x16_BeforeFallSceneAreaId\"g\n" +
	"\fUserAttrData\x12\x19\n" +
	"\x05State\x18\x01 \x01(\x05H\x00R\x05State\x88\x01\x01\x12#\n" +
	"\n" +
	"FightPoint\x18\x02 \x01(\x03H\x01R\n" +
	"FightPoint\x88\x01\x01B\b\n" +
	"\x06_StateB\r\n" +
	"\v_FightPoint\"\x93\x01\n" +
	"\rUserSceneInfo\x12\x1d\n" +
	"\aSceneId\x18\x01 \x01(\x05H\x00R\aSceneId\x88\x01\x01\x12!\n" +
	"\tSceneGuid\x18\x02 \x01(\tH\x01R\tSceneGuid\x88\x01\x01\x12\x1b\n" +
	"\x06LineId\x18\x03 \x01(\x05H\x02R\x06LineId\x88\x01\x01B\n" +
	"\n" +
	"\b_SceneIdB\f\n" +
	"\n" +
	"_SceneGuidB\t\n" +
	"\a_LineId\"\x84\x01\n" +
	"\x10PersonalZoneShow\x125\n" +
	"\x06Medals\x18\x01 \x03(\v2\x1d.PersonalZoneShow.MedalsEntryR\x06Medals\x1a9\n" +
	"\vMedalsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x83\x05\n" +
	"\x14TeamMemberSocialData\x12-\n" +
	"\tBasicData\x18\x01 \x01(\v2\n" +
	".BasicDataH\x00R\tBasicData\x88\x01\x01\x120\n" +
	"\n" +
	"AvatarInfo\x18\x02 \x01(\v2\v.AvatarInfoH\x01R\n" +
	"AvatarInfo\x88\x01\x01\x12*\n" +
	"\bFaceData\x18\x03 \x01(\v2\t.FaceDataH\x02R\bFaceData\x88\x01\x01\x12<\n" +
	"\x0eProfessionData\x18\x04 \x01(\v2\x0f.ProfessionDataH\x03R\x0eProfessionData\x88\x01\x01\x12-\n" +
	"\tEquipData\x18\x05 \x01(\v2\n" +
	".EquipDataH\x04R\tEquipData\x88\x01\x01\x123\n" +
	"\vFashionData\x18\x06 \x01(\v2\f.FashionDataH\x05R\vFashionData\x88\x01\x01\x129\n" +
	"\rUserSceneInfo\x18\a \x01(\v2\x0e.UserSceneInfoH\x06R\rUserSceneInfo\x88\x01\x01\x126\n" +
	"\fUserAttrData\x18\b \x01(\v2\r.UserAttrDataH\aR\fUserAttrData\x88\x01\x01\x12:\n" +
	"\fPersonalZone\x18\t \x01(\v2\x11.PersonalZoneShowH\bR\fPersonalZone\x88\x01\x01B\f\n" +
	"\n" +
	"_BasicDataB\r\n" +
	"\v_AvatarInfoB\v\n" +
	"\t_FaceDataB\x11\n" +
	"\x0f_ProfessionDataB\f\n" +
	"\n" +
	"_EquipDataB\x0e\n" +
	"\f_FashionDataB\x10\n" +
	"\x0e_UserSceneInfoB\x0f\n" +
	"\r_UserAttrDataB\x0f\n" +
	"\r_PersonalZone\"\xda\x03\n" +
	"\vTeamMemData\x12\x1b\n" +
	"\x06CharId\x18\x01 \x01(\x03H\x00R\x06CharId\x88\x01\x01\x12!\n" +
	"\tEnterTime\x18\x02 \x01(\rH\x01R\tEnterTime\x88\x01\x01\x12#\n" +
	"\n" +
	"CallStatus\x18\x03 \x01(\x05H\x02R\n" +
	"CallStatus\x88\x01\x01\x12\x1f\n" +
	"\bTalentId\x18\x04 \x01(\x05H\x03R\bTalentId\x88\x01\x01\x12'\n" +
	"\fOnlineStatus\x18\x05 \x01(\x05H\x04R\fOnlineStatus\x88\x01\x01\x12\x1d\n" +
	"\aSceneId\x18\x06 \x01(\x05H\x05R\aSceneId\x88\x01\x01\x12%\n" +
	"\vVoiceIsOpen\x18\a \x01(\bH\x06R\vVoiceIsOpen\x88\x01\x01\x12\x1d\n" +
	"\aGroupId\x18\b \x01(\x05H\aR\aGroupId\x88\x01\x01\x12:\n" +
	"\n" +
	"SocialData\x18\t \x01(\v2\x15.TeamMemberSocialDataH\bR\n" +
	"SocialData\x88\x01\x01B\t\n" +
	"\a_CharIdB\f\n" +
	"\n" +
	"_EnterTimeB\r\n" +
	"\v_CallStatusB\v\n" +
	"\t_TalentIdB\x0f\n" +
	"\r_OnlineStatusB\n" +
	"\n" +
	"\b_SceneIdB\x0e\n" +
	"\f_VoiceIsOpenB\n" +
	"\n" +
	"\b_GroupIdB\r\n" +
	"\v_SocialData\"\xee\x03\n" +
	"\bCharTeam\x12\x1b\n" +
	"\x06TeamId\x18\x01 \x01(\x03H\x00R\x06TeamId\x88\x01\x01\x12\x1f\n" +
	"\bLeaderId\x18\x02 \x01(\x03H\x01R\bLeaderId\x88\x01\x01\x12'\n" +
	"\fTeamTargetId\x18\x03 \x01(\rH\x02R\fTeamTargetId\x88\x01\x01\x12\x1d\n" +
	"\aTeamNum\x18\x04 \x01(\rH\x03R\aTeamNum\x88\x01\x01\x12\x18\n" +
	"\aCharIds\x18\x05 \x03(\x03R\aCharIds\x12#\n" +
	"\n" +
	"IsMatching\x18\x06 \x01(\bH\x04R\n" +
	"IsMatching\x88\x01\x01\x12-\n" +
	"\x0fCharTeamVersion\x18\a \x01(\x05H\x05R\x0fCharTeamVersion\x88\x01\x01\x12E\n" +
	"\x0eTeamMemberData\x18\b \x03(\v2\x1d.CharTeam.TeamMemberDataEntryR\x0eTeamMemberData\x1aO\n" +
	"\x13TeamMemberDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.TeamMemDataR\x05value:\x028\x01B\t\n" +
	"\a_TeamIdB\v\n" +
	"\t_LeaderIdB\x0f\n" +
	"\r_TeamTargetIdB\n" +
	"\n" +
	"\b_TeamNumB\r\n" +
	"\v_IsMatchingB\x12\n" +
	"\x10_CharTeamVersion\"\x95\x01\n" +
	"\tUnionData\x12\x1d\n" +
	"\aUnionId\x18\x01 \x01(\x03H\x00R\aUnionId\x88\x01\x01\x12\x17\n" +
	"\x04Name\x18\x02 \x01(\tH\x01R\x04Name\x88\x01\x01\x12)\n" +
	"\rUnionHuntRank\x18\x03 \x01(\x05H\x02R\rUnionHuntRank\x88\x01\x01B\n" +
	"\n" +
	"\b_UnionIdB\a\n" +
	"\x05_NameB\x10\n" +
	"\x0e_UnionHuntRank\"\xf1\x01\n" +
	"\vAccountData\x12\x1b\n" +
	"\x06OpenId\x18\x01 \x01(\tH\x00R\x06OpenId\x88\x01\x01\x12\x1d\n" +
	"\aSdkType\x18\x02 \x01(\x05H\x01R\aSdkType\x88\x01\x01\x12!\n" +
	"\tAccountId\x18\x03 \x01(\tH\x02R\tAccountId\x88\x01\x01\x12%\n" +
	"\vAccountUuid\x18\x04 \x01(\tH\x03R\vAccountUuid\x88\x01\x01\x12 \n" +
	"\x02Os\x18\x05 \x01(\x0e2\v.SystemTypeH\x04R\x02Os\x88\x01\x01B\t\n" +
	"\a_OpenIdB\n" +
	"\n" +
	"\b_SdkTypeB\f\n" +
	"\n" +
	"_AccountIdB\x0e\n" +
	"\f_AccountUuidB\x05\n" +
	"\x03_Os\"\xbc\x01\n" +
	"\fFunctionData\x12@\n" +
	"\vUnlockedMap\x18\x01 \x03(\v2\x1e.FunctionData.UnlockedMapEntryR\vUnlockedMap\x12*\n" +
	"\x10DrawnFunctionIds\x18\x02 \x03(\x05R\x10DrawnFunctionIds\x1a>\n" +
	"\x10UnlockedMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\x8d\x01\n" +
	"\n" +
	"ActionInfo\x12\x1f\n" +
	"\bActionId\x18\x01 \x01(\x05H\x00R\bActionId\x88\x01\x01\x12\x1b\n" +
	"\x06Period\x18\x02 \x01(\x05H\x01R\x06Period\x88\x01\x01\x12\x1d\n" +
	"\aPercent\x18\x03 \x01(\x02H\x02R\aPercent\x88\x01\x01B\v\n" +
	"\t_ActionIdB\t\n" +
	"\a_PeriodB\n" +
	"\n" +
	"\b_Percent\"`\n" +
	"\x10EditorUIPosition\x12\x13\n" +
	"\x02Id\x18\x01 \x01(\x05H\x00R\x02Id\x88\x01\x01\x12\x11\n" +
	"\x01X\x18\x02 \x01(\x02H\x01R\x01X\x88\x01\x01\x12\x11\n" +
	"\x01Y\x18\x03 \x01(\x02H\x02R\x01Y\x88\x01\x01B\x05\n" +
	"\x03_IdB\x04\n" +
	"\x02_XB\x04\n" +
	"\x02_Y\"\xae\x01\n" +
	"\x19FashionQualityCollectInfo\x12P\n" +
	"\fQualityCount\x18\x01 \x03(\v2,.FashionQualityCollectInfo.QualityCountEntryR\fQualityCount\x1a?\n" +
	"\x11QualityCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa8\x01\n" +
	"\x16RideQualityCollectInfo\x12M\n" +
	"\fQualityCount\x18\x01 \x03(\v2).RideQualityCollectInfo.QualityCountEntryR\fQualityCount\x1a?\n" +
	"\x11QualityCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8a\f\n" +
	"\fPersonalZone\x12%\n" +
	"\x0eonline_periods\x18\x02 \x03(\x05R\ronlinePeriods\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\x05R\x04tags\x121\n" +
	"\x06medals\x18\x05 \x03(\v2\x19.PersonalZone.MedalsEntryR\x06medals\x12\x19\n" +
	"\btheme_id\x18\x06 \x01(\x05R\athemeId\x123\n" +
	"\x16business_card_style_id\x18\a \x01(\x05R\x13businessCardStyleId\x12&\n" +
	"\x0favatar_frame_id\x18\b \x01(\x05R\ravatarFrameId\x12,\n" +
	"\vaction_info\x18\t \x01(\v2\v.ActionInfoR\n" +
	"actionInfo\x122\n" +
	"\vui_position\x18\n" +
	" \x03(\v2\x11.EditorUIPositionR\n" +
	"uiPosition\x12\x19\n" +
	"\btitle_id\x18\v \x01(\x05R\atitleId\x120\n" +
	"\x14fashion_refresh_flag\x18\f \x01(\bR\x12fashionRefreshFlag\x122\n" +
	"\x15fashion_collect_point\x18\r \x01(\x05R\x13fashionCollectPoint\x12p\n" +
	"\x1dfashion_collect_quality_count\x18\x0e \x03(\v2-.PersonalZone.FashionCollectQualityCountEntryR\x1afashionCollectQualityCount\x12\x16\n" +
	"\x06photos\x18\x0f \x03(\x05R\x06photos\x12W\n" +
	"\x14unlock_target_record\x18\x10 \x03(\v2%.PersonalZone.UnlockTargetRecordEntryR\x12unlockTargetRecord\x12a\n" +
	"\x18unlock_get_reward_record\x18\x11 \x03(\v2(.PersonalZone.UnlockGetRewardRecordEntryR\x15unlockGetRewardRecord\x12,\n" +
	"\x12ride_collect_point\x18\x12 \x01(\x05R\x10rideCollectPoint\x12g\n" +
	"\x1aride_collect_quality_count\x18\x13 \x03(\v2*.PersonalZone.RideCollectQualityCountEntryR\x17rideCollectQualityCount\x129\n" +
	"\x19weapon_skin_collect_point\x18\x14 \x01(\x05R\x16weaponSkinCollectPoint\x12>\n" +
	"\vphotos_wall\x18\x15 \x03(\v2\x1d.PersonalZone.PhotosWallEntryR\n" +
	"photosWall\x1a9\n" +
	"\vMedalsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1ai\n" +
	"\x1fFashionCollectQualityCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.FashionQualityCollectInfoR\x05value:\x028\x01\x1aE\n" +
	"\x17UnlockTargetRecordEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aH\n" +
	"\x1aUnlockGetRewardRecordEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1ac\n" +
	"\x1cRideCollectQualityCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.RideQualityCollectInfoR\x05value:\x028\x01\x1a=\n" +
	"\x0fPhotosWallEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"F\n" +
	"\rWarehouseData\x12%\n" +
	"\vWarehouseId\x18\x01 \x01(\x03H\x00R\vWarehouseId\x88\x01\x01B\x0e\n" +
	"\f_WarehouseId\"\x94\x01\n" +
	"\x0eSeasonRankData\x12B\n" +
	"\vSeasonRanks\x18\x01 \x03(\v2 .SeasonRankData.SeasonRanksEntryR\vSeasonRanks\x1a>\n" +
	"\x10SeasonRanksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\"\xfc\x03\n" +
	"\n" +
	"FishRecord\x12\x1b\n" +
	"\x06FishId\x18\x01 \x01(\x05H\x00R\x06FishId\x88\x01\x01\x12!\n" +
	"\tFirstFlag\x18\x02 \x01(\bH\x01R\tFirstFlag\x88\x01\x01\x12\x17\n" +
	"\x04Size\x18\x03 \x01(\x05H\x02R\x04Size\x88\x01\x01\x12%\n" +
	"\vMillisecond\x18\x04 \x01(\x03H\x03R\vMillisecond\x88\x01\x01\x12\x1f\n" +
	"\bResearch\x18\x05 \x01(\x05H\x04R\bResearch\x88\x01\x01\x12\x19\n" +
	"\x05Count\x18\x06 \x01(\rH\x05R\x05Count\x88\x01\x01\x12\x1d\n" +
	"\aMinSize\x18\a \x01(\x05H\x06R\aMinSize\x88\x01\x01\x123\n" +
	"\x12MinSizemillisecond\x18\b \x01(\x03H\aR\x12MinSizemillisecond\x88\x01\x01\x125\n" +
	"\bStarCnts\x18\t \x03(\v2\x19.FishRecord.StarCntsEntryR\bStarCnts\x1a;\n" +
	"\rStarCntsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01B\t\n" +
	"\a_FishIdB\f\n" +
	"\n" +
	"_FirstFlagB\a\n" +
	"\x05_SizeB\x0e\n" +
	"\f_MillisecondB\v\n" +
	"\t_ResearchB\b\n" +
	"\x06_CountB\n" +
	"\n" +
	"\b_MinSizeB\x15\n" +
	"\x13_MinSizemillisecond\"\xa1\x01\n" +
	"\x0eFishSocialData\x12B\n" +
	"\vFishRecords\x18\x01 \x03(\v2 .FishSocialData.FishRecordsEntryR\vFishRecords\x1aK\n" +
	"\x10FishRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.FishRecordR\x05value:\x028\x01\"\xd1\x02\n" +
	"\rCommunityData\x12%\n" +
	"\vCommunityId\x18\x01 \x01(\x03H\x00R\vCommunityId\x88\x01\x01\x12#\n" +
	"\n" +
	"HomelandId\x18\x02 \x01(\x03H\x01R\n" +
	"HomelandId\x88\x01\x01\x12$\n" +
	"\rCohabitantIds\x18\x03 \x03(\x03R\rCohabitantIds\x12?\n" +
	"\x18LastExitCohabitationTime\x18\x04 \x01(\x03H\x02R\x18LastExitCohabitationTime\x88\x01\x01\x12\x1f\n" +
	"\bBuyCount\x18\x05 \x01(\x05H\x03R\bBuyCount\x88\x01\x01\x12\x19\n" +
	"\x05Level\x18\x06 \x01(\x05H\x04R\x05Level\x88\x01\x01B\x0e\n" +
	"\f_CommunityIdB\r\n" +
	"\v_HomelandIdB\x1b\n" +
	"\x19_LastExitCohabitationTimeB\v\n" +
	"\t_BuyCountB\b\n" +
	"\x06_Level\"\xd7\x01\n" +
	"\rPrivilegeData\x12<\n" +
	"\x0elaunchPlatform\x18\x01 \x01(\x0e2\x0f.LaunchPlatformH\x00R\x0elaunchPlatform\x88\x01\x01\x12%\n" +
	"\visPrivilege\x18\x02 \x01(\bH\x01R\visPrivilege\x88\x01\x01\x12+\n" +
	"\x0elastUpdateTime\x18\x03 \x01(\x03H\x02R\x0elastUpdateTime\x88\x01\x01B\x11\n" +
	"\x0f_launchPlatformB\x0e\n" +
	"\f_isPrivilegeB\x11\n" +
	"\x0f_lastUpdateTime\"v\n" +
	"\x15MasterModeDungeonData\x12%\n" +
	"\vseasonScore\x18\x01 \x01(\x05H\x00R\vseasonScore\x88\x01\x01\x12\x1b\n" +
	"\x06isShow\x18\x02 \x01(\bH\x01R\x06isShow\x88\x01\x01B\x0e\n" +
	"\f_seasonScoreB\t\n" +
	"\a_isShow\"\xd3\v\n" +
	"\n" +
	"SocialData\x12\x1b\n" +
	"\x06CharId\x18\x01 \x01(\x03H\x00R\x06CharId\x88\x01\x01\x12!\n" +
	"\tAccountId\x18\x02 \x01(\tH\x01R\tAccountId\x88\x01\x01\x12-\n" +
	"\tBasicData\x18\x03 \x01(\v2\n" +
	".BasicDataH\x02R\tBasicData\x88\x01\x01\x120\n" +
	"\n" +
	"AvatarInfo\x18\x04 \x01(\v2\v.AvatarInfoH\x03R\n" +
	"AvatarInfo\x88\x01\x01\x12*\n" +
	"\bFaceData\x18\x05 \x01(\v2\t.FaceDataH\x04R\bFaceData\x88\x01\x01\x12<\n" +
	"\x0eProfessionData\x18\x06 \x01(\v2\x0f.ProfessionDataH\x05R\x0eProfessionData\x88\x01\x01\x12-\n" +
	"\tEquipData\x18\a \x01(\v2\n" +
	".EquipDataH\x06R\tEquipData\x88\x01\x01\x123\n" +
	"\vFashionData\x18\b \x01(\v2\f.FashionDataH\aR\vFashionData\x88\x01\x01\x123\n" +
	"\vSettingData\x18\t \x01(\v2\f.SettingDataH\bR\vSettingData\x88\x01\x01\x12-\n" +
	"\tSceneData\x18\n" +
	" \x01(\v2\n" +
	".SceneDataH\tR\tSceneData\x88\x01\x01\x126\n" +
	"\fUserAttrData\x18\v \x01(\v2\r.UserAttrDataH\n" +
	"R\fUserAttrData\x88\x01\x01\x12*\n" +
	"\bTeamData\x18\f \x01(\v2\t.CharTeamH\vR\bTeamData\x88\x01\x01\x12-\n" +
	"\tUnionData\x18\r \x01(\v2\n" +
	".UnionDataH\fR\tUnionData\x88\x01\x01\x123\n" +
	"\vAccountData\x18\x0e \x01(\v2\f.AccountDataH\rR\vAccountData\x88\x01\x01\x126\n" +
	"\fFunctionData\x18\x0f \x01(\v2\r.FunctionDataH\x0eR\fFunctionData\x88\x01\x01\x126\n" +
	"\fPersonalZone\x18\x10 \x01(\v2\r.PersonalZoneH\x0fR\fPersonalZone\x88\x01\x01\x121\n" +
	"\tWarehouse\x18\x11 \x01(\v2\x0e.WarehouseDataH\x10R\tWarehouse\x88\x01\x01\x124\n" +
	"\n" +
	"SeasonRank\x18\x12 \x01(\v2\x0f.SeasonRankDataH\x11R\n" +
	"SeasonRank\x88\x01\x01\x120\n" +
	"\bFishData\x18\x13 \x01(\v2\x0f.FishSocialDataH\x12R\bFishData\x88\x01\x01\x129\n" +
	"\rCommunityData\x18\x14 \x01(\v2\x0e.CommunityDataH\x13R\rCommunityData\x88\x01\x01\x129\n" +
	"\rPrivilegeData\x18\x15 \x01(\v2\x0e.PrivilegeDataH\x14R\rPrivilegeData\x88\x01\x01\x12Q\n" +
	"\x15MasterModeDungeonData\x18\x16 \x01(\v2\x16.MasterModeDungeonDataH\x15R\x15MasterModeDungeonData\x88\x01\x01B\t\n" +
	"\a_CharIdB\f\n" +
	"\n" +
	"_AccountIdB\f\n" +
	"\n" +
	"_BasicDataB\r\n" +
	"\v_AvatarInfoB\v\n" +
	"\t_FaceDataB\x11\n" +
	"\x0f_ProfessionDataB\f\n" +
	"\n" +
	"_EquipDataB\x0e\n" +
	"\f_FashionDataB\x0e\n" +
	"\f_SettingDataB\f\n" +
	"\n" +
	"_SceneDataB\x0f\n" +
	"\r_UserAttrDataB\v\n" +
	"\t_TeamDataB\f\n" +
	"\n" +
	"_UnionDataB\x0e\n" +
	"\f_AccountDataB\x0f\n" +
	"\r_FunctionDataB\x0f\n" +
	"\r_PersonalZoneB\f\n" +
	"\n" +
	"_WarehouseB\r\n" +
	"\v_SeasonRankB\v\n" +
	"\t_FishDataB\x10\n" +
	"\x0e_CommunityDataB\x10\n" +
	"\x0e_PrivilegeDataB\x18\n" +
	"\x16_MasterModeDungeonData\"\x90\x01\n" +
	"\x12GetSocialDataReply\x12\x17\n" +
	"\x04Mask\x18\x01 \x01(\x03H\x00R\x04Mask\x88\x01\x01\x12$\n" +
	"\x04Data\x18\x02 \x01(\v2\v.SocialDataH\x01R\x04Data\x88\x01\x01\x12\x1d\n" +
	"\aErrCode\x18\x03 \x01(\rH\x02R\aErrCode\x88\x01\x01B\a\n" +
	"\x05_MaskB\a\n" +
	"\x05_DataB\n" +
	"\n" +
	"\b_ErrCode\"E\n" +
	"\x14ReturnMessageWrapper\x12-\n" +
	"\aMessage\x18\x01 \x01(\v2\x13.GetSocialDataReplyR\aMessage\"\xae\x01\n" +
	"\x0eScenePointInfo\x12*\n" +
	"\bPosition\x18\x01 \x01(\v2\t.PositionH\x00R\bPosition\x88\x01\x01\x12\x1f\n" +
	"\bCameraId\x18\x02 \x01(\x05H\x01R\bCameraId\x88\x01\x01\x12%\n" +
	"\vSceneAreaId\x18\x03 \x01(\x05H\x02R\vSceneAreaId\x88\x01\x01B\v\n" +
	"\t_PositionB\v\n" +
	"\t_CameraIdB\x0e\n" +
	"\f_SceneAreaId\"D\n" +
	"\x0eScenePosIdInfo\x12#\n" +
	"\n" +
	"ScenePosId\x18\x01 \x01(\x05H\x00R\n" +
	"ScenePosId\x88\x01\x01B\r\n" +
	"\v_ScenePosId\"G\n" +
	"\x11CutScenePointInfo\x12#\n" +
	"\n" +
	"CutSceneId\x18\x01 \x01(\x05H\x00R\n" +
	"CutSceneId\x88\x01\x01B\r\n" +
	"\v_CutSceneId\"\xa3\x01\n" +
	"\rSceneLineData\x12\x1b\n" +
	"\x06LineId\x18\x01 \x01(\rH\x00R\x06LineId\x88\x01\x01\x12.\n" +
	"\x06Status\x18\x02 \x01(\x0e2\x11.ESceneLineStatusH\x01R\x06Status\x88\x01\x01\x12!\n" +
	"\tSceneGuid\x18\x03 \x01(\tH\x02R\tSceneGuid\x88\x01\x01B\t\n" +
	"\a_LineIdB\t\n" +
	"\a_StatusB\f\n" +
	"\n" +
	"_SceneGuid\"\x88\x02\n" +
	"\rPositionParam\x12<\n" +
	"\x0eScenePointInfo\x18\x01 \x01(\v2\x0f.ScenePointInfoH\x00R\x0eScenePointInfo\x88\x01\x01\x128\n" +
	"\fScenePosInfo\x18\x02 \x01(\v2\x0f.ScenePosIdInfoH\x01R\fScenePosInfo\x88\x01\x01\x12E\n" +
	"\x11CutScenePointInfo\x18\x03 \x01(\v2\x12.CutScenePointInfoH\x02R\x11CutScenePointInfo\x88\x01\x01B\x11\n" +
	"\x0f_ScenePointInfoB\x0f\n" +
	"\r_ScenePosInfoB\x14\n" +
	"\x12_CutScenePointInfo\"\xba\x04\n" +
	"\rTransferParam\x12\x1d\n" +
	"\aSceneId\x18\x01 \x01(\x05H\x00R\aSceneId\x88\x01\x01\x12;\n" +
	"\fTransferType\x18\x02 \x01(\x0e2\x12.EUserTransferTypeH\x01R\fTransferType\x88\x01\x01\x129\n" +
	"\rPositionParam\x18\x03 \x01(\v2\x0e.PositionParamH\x02R\rPositionParam\x88\x01\x01\x12#\n" +
	"\n" +
	"ChangeFlag\x18\x04 \x01(\x03H\x03R\n" +
	"ChangeFlag\x88\x01\x01\x12+\n" +
	"\x0eIsServerSwitch\x18\x05 \x01(\bH\x04R\x0eIsServerSwitch\x88\x01\x01\x125\n" +
	"\x13VisualLayerConfigId\x18\x06 \x01(\x05H\x05R\x13VisualLayerConfigId\x88\x01\x01\x12!\n" +
	"\tSceneGuid\x18\a \x01(\tH\x06R\tSceneGuid\x88\x01\x01\x12%\n" +
	"\vConnectGuid\x18\b \x01(\tH\aR\vConnectGuid\x88\x01\x01\x12'\n" +
	"\fSubSceneUuid\x18\t \x01(\x03H\bR\fSubSceneUuid\x88\x01\x01B\n" +
	"\n" +
	"\b_SceneIdB\x0f\n" +
	"\r_TransferTypeB\x10\n" +
	"\x0e_PositionParamB\r\n" +
	"\v_ChangeFlagB\x11\n" +
	"\x0f_IsServerSwitchB\x16\n" +
	"\x14_VisualLayerConfigIdB\f\n" +
	"\n" +
	"_SceneGuidB\x0e\n" +
	"\f_ConnectGuidB\x0f\n" +
	"\r_SubSceneUuid\"\xd9\x02\n" +
	"\x17NotifyEnterWorldRequest\x12!\n" +
	"\tAccountId\x18\x01 \x01(\tH\x00R\tAccountId\x88\x01\x01\x12\x19\n" +
	"\x05Token\x18\x02 \x01(\tH\x01R\x05Token\x88\x01\x01\x12\x1d\n" +
	"\aSceneIp\x18\x03 \x01(\tH\x02R\aSceneIp\x88\x01\x01\x12!\n" +
	"\tScenePort\x18\x04 \x01(\x05H\x03R\tScenePort\x88\x01\x01\x121\n" +
	"\tTransform\x18\x05 \x01(\v2\x0e.TransferParamH\x04R\tTransform\x88\x01\x01\x129\n" +
	"\rSceneLineData\x18\x06 \x01(\v2\x0e.SceneLineDataH\x05R\rSceneLineData\x88\x01\x01B\f\n" +
	"\n" +
	"_AccountIdB\b\n" +
	"\x06_TokenB\n" +
	"\n" +
	"\b_SceneIpB\f\n" +
	"\n" +
	"_ScenePortB\f\n" +
	"\n" +
	"_TransformB\x10\n" +
	"\x0e_SceneLineData\"H\n" +
	"\x10NotifyEnterWorld\x124\n" +
	"\bVRequest\x18\x01 \x01(\v2\x18.NotifyEnterWorldRequestR\bVRequest\"M\n" +
	"\x04Attr\x12\x13\n" +
	"\x02Id\x18\x01 \x01(\x05H\x00R\x02Id\x88\x01\x01\x12\x1d\n" +
	"\aRawData\x18\x02 \x01(\fH\x01R\aRawData\x88\x01\x01B\x05\n" +
	"\x03_IdB\n" +
	"\n" +
	"\b_RawData\"\x80\x01\n" +
	"\fMapAttrValue\x12\x1f\n" +
	"\bIsRemove\x18\x01 \x01(\bH\x00R\bIsRemove\x88\x01\x01\x12\x15\n" +
	"\x03Key\x18\x02 \x01(\fH\x01R\x03Key\x88\x01\x01\x12\x19\n" +
	"\x05Value\x18\x03 \x01(\fH\x02R\x05Value\x88\x01\x01B\v\n" +
	"\t_IsRemoveB\x06\n" +
	"\x04_KeyB\b\n" +
	"\x06_Value\"u\n" +
	"\aMapAttr\x12\x1d\n" +
	"\aIsClear\x18\x01 \x01(\bH\x00R\aIsClear\x88\x01\x01\x12\x13\n" +
	"\x02Id\x18\x02 \x01(\x05H\x01R\x02Id\x88\x01\x01\x12#\n" +
	"\x05Attrs\x18\x03 \x03(\v2\r.MapAttrValueR\x05AttrsB\n" +
	"\n" +
	"\b_IsClearB\x05\n" +
	"\x03_Id\"u\n" +
	"\x0eAttrCollection\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12\x1b\n" +
	"\x05Attrs\x18\x02 \x03(\v2\x05.AttrR\x05Attrs\x12$\n" +
	"\bMapAttrs\x18\x03 \x03(\v2\b.MapAttrR\bMapAttrsB\a\n" +
	"\x05_Uuid\"K\n" +
	"\bTempAttr\x12\x13\n" +
	"\x02Id\x18\x01 \x01(\x05H\x00R\x02Id\x88\x01\x01\x12\x19\n" +
	"\x05Value\x18\x02 \x01(\x05H\x01R\x05Value\x88\x01\x01B\x05\n" +
	"\x03_IdB\b\n" +
	"\x06_Value\"5\n" +
	"\x12TempAttrCollection\x12\x1f\n" +
	"\x05Attrs\x18\x01 \x03(\v2\t.TempAttrR\x05Attrs\"\xba\x01\n" +
	"\tEventData\x12!\n" +
	"\tEventType\x18\x01 \x01(\x05H\x00R\tEventType\x88\x01\x01\x12\x1c\n" +
	"\tIntParams\x18\x02 \x03(\x05R\tIntParams\x12\x1e\n" +
	"\n" +
	"LongParams\x18\x03 \x03(\x03R\n" +
	"LongParams\x12 \n" +
	"\vFloatParams\x18\x04 \x03(\x02R\vFloatParams\x12\x1c\n" +
	"\tStrParams\x18\x05 \x03(\tR\tStrParamsB\f\n" +
	"\n" +
	"_EventType\"U\n" +
	"\rEventDataList\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12\"\n" +
	"\x06Events\x18\x02 \x03(\v2\n" +
	".EventDataR\x06EventsB\a\n" +
	"\x05_Uuid\"i\n" +
	"\vBulletEvent\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12'\n" +
	"\fEnterStageId\x18\x02 \x01(\x05H\x01R\fEnterStageId\x88\x01\x01B\a\n" +
	"\x05_UuidB\x0f\n" +
	"\r_EnterStageId\"`\n" +
	"\x12ActorBodyPartInfos\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12(\n" +
	"\x05Infos\x18\x02 \x03(\v2\x12.ActorBodyPartInfoR\x05InfosB\a\n" +
	"\x05_Uuid\"\xdf\x01\n" +
	"\x11ActorBodyPartInfo\x12\x1b\n" +
	"\x06PartId\x18\x01 \x01(\x05H\x00R\x06PartId\x88\x01\x01\x12\x13\n" +
	"\x02Hp\x18\x02 \x01(\x04H\x01R\x02Hp\x88\x01\x01\x12\x19\n" +
	"\x05MaxHp\x18\x03 \x01(\x04H\x02R\x05MaxHp\x88\x01\x01\x12)\n" +
	"\x05State\x18\x04 \x01(\x0e2\x0e.BodyPartStateH\x03R\x05State\x88\x01\x01\x12\x1f\n" +
	"\bFleshyId\x18\x05 \x01(\x05H\x04R\bFleshyId\x88\x01\x01B\t\n" +
	"\a_PartIdB\x05\n" +
	"\x03_HpB\b\n" +
	"\x06_MaxHpB\b\n" +
	"\x06_StateB\v\n" +
	"\t_FleshyId\"\xa6\x03\n" +
	"\x10PassiveSkillInfo\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x05H\x00R\x04Uuid\x88\x01\x01\x12#\n" +
	"\n" +
	"TargetUuid\x18\x02 \x01(\x03H\x01R\n" +
	"TargetUuid\x88\x01\x01\x12+\n" +
	"\x0eStageBeginTime\x18\x03 \x01(\x03H\x02R\x0eStageBeginTime\x88\x01\x01\x12!\n" +
	"\tBeginTime\x18\x04 \x01(\x03H\x03R\tBeginTime\x88\x01\x01\x12'\n" +
	"\fStagePlayNum\x18\x05 \x01(\x05H\x04R\fStagePlayNum\x88\x01\x01\x12\x1d\n" +
	"\aSkillId\x18\x06 \x01(\x05H\x05R\aSkillId\x88\x01\x01\x12#\n" +
	"\n" +
	"SkillLevel\x18\a \x01(\x05H\x06R\n" +
	"SkillLevel\x88\x01\x01\x12#\n" +
	"\n" +
	"SkillStage\x18\b \x01(\x05H\aR\n" +
	"SkillStage\x88\x01\x01B\a\n" +
	"\x05_UuidB\r\n" +
	"\v_TargetUuidB\x11\n" +
	"\x0f_StageBeginTimeB\f\n" +
	"\n" +
	"_BeginTimeB\x0f\n" +
	"\r_StagePlayNumB\n" +
	"\n" +
	"\b_SkillIdB\r\n" +
	"\v_SkillLevelB\r\n" +
	"\v_SkillStage\"}\n" +
	"\x13SeqPassiveSkillInfo\x12!\n" +
	"\tActorUuid\x18\x01 \x01(\x03H\x00R\tActorUuid\x88\x01\x01\x125\n" +
	"\fPassiveInfos\x18\x02 \x03(\v2\x11.PassiveSkillInfoR\fPassiveInfosB\f\n" +
	"\n" +
	"_ActorUuid\"_\n" +
	"\x16SeqPassiveSkillEndInfo\x12!\n" +
	"\tActorUuid\x18\x01 \x01(\x03H\x00R\tActorUuid\x88\x01\x01\x12\x14\n" +
	"\x05Uuids\x18\x02 \x03(\x03R\x05UuidsB\f\n" +
	"\n" +
	"_ActorUuid\"Y\n" +
	"\fBuffInfoSync\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12'\n" +
	"\tBuffInfos\x18\x02 \x03(\v2\t.BuffInfoR\tBuffInfosB\a\n" +
	"\x05_Uuid\"\x88\x05\n" +
	"\bBuffInfo\x12\x1f\n" +
	"\bBuffUuid\x18\x01 \x01(\x05H\x00R\bBuffUuid\x88\x01\x01\x12\x1b\n" +
	"\x06BaseId\x18\x02 \x01(\x05H\x01R\x06BaseId\x88\x01\x01\x12\x19\n" +
	"\x05Level\x18\x03 \x01(\x05H\x02R\x05Level\x88\x01\x01\x12\x1f\n" +
	"\bHostUuid\x18\x04 \x01(\x03H\x03R\bHostUuid\x88\x01\x01\x12!\n" +
	"\tTableUuid\x18\x05 \x01(\x05H\x04R\tTableUuid\x88\x01\x01\x12#\n" +
	"\n" +
	"CreateTime\x18\x06 \x01(\x03H\x05R\n" +
	"CreateTime\x88\x01\x01\x12\x1f\n" +
	"\bFireUuid\x18\a \x01(\x03H\x06R\bFireUuid\x88\x01\x01\x12\x19\n" +
	"\x05Layer\x18\b \x01(\x05H\aR\x05Layer\x88\x01\x01\x12\x1b\n" +
	"\x06PartId\x18\t \x01(\x05H\bR\x06PartId\x88\x01\x01\x12\x19\n" +
	"\x05Count\x18\n" +
	" \x01(\x05H\tR\x05Count\x88\x01\x01\x12\x1f\n" +
	"\bDuration\x18\v \x01(\x05H\n" +
	"R\bDuration\x88\x01\x01\x12?\n" +
	"\x0fFightSourceInfo\x18\f \x01(\v2\x10.FightSourceInfoH\vR\x0fFightSourceInfo\x88\x01\x01\x12;\n" +
	"\vLogicEffect\x18\r \x01(\v2\x14.BuffEffectLogicInfoH\fR\vLogicEffect\x88\x01\x01B\v\n" +
	"\t_BuffUuidB\t\n" +
	"\a_BaseIdB\b\n" +
	"\x06_LevelB\v\n" +
	"\t_HostUuidB\f\n" +
	"\n" +
	"_TableUuidB\r\n" +
	"\v_CreateTimeB\v\n" +
	"\t_FireUuidB\b\n" +
	"\x06_LayerB\t\n" +
	"\a_PartIdB\b\n" +
	"\x06_CountB\v\n" +
	"\t_DurationB\x12\n" +
	"\x10_FightSourceInfoB\x0e\n" +
	"\f_LogicEffect\"\x94\x01\n" +
	"\x0fFightSourceInfo\x12-\n" +
	"\x0fFightSourceType\x18\x01 \x01(\x05H\x00R\x0fFightSourceType\x88\x01\x01\x12+\n" +
	"\x0eSourceConfigId\x18\x02 \x01(\x05H\x01R\x0eSourceConfigId\x88\x01\x01B\x12\n" +
	"\x10_FightSourceTypeB\x11\n" +
	"\x0f_SourceConfigId\"\xb5\x01\n" +
	"\x13BuffEffectLogicInfo\x12<\n" +
	"\n" +
	"EffectType\x18\x01 \x01(\x0e2\x17.EBuffEffectLogicPbTypeH\x00R\n" +
	"EffectType\x88\x01\x01\x12\x1d\n" +
	"\aRawData\x18\x02 \x01(\fH\x01R\aRawData\x88\x01\x01\x12\x1b\n" +
	"\x06IsLoop\x18\x03 \x01(\bH\x02R\x06IsLoop\x88\x01\x01B\r\n" +
	"\v_EffectTypeB\n" +
	"\n" +
	"\b_RawDataB\t\n" +
	"\a_IsLoop\"\xa7\x01\n" +
	"\x11ClientHitPartInfo\x12\x1b\n" +
	"\x06PartId\x18\x01 \x01(\x05H\x00R\x06PartId\x88\x01\x01\x12+\n" +
	"\tDamagePos\x18\x02 \x01(\v2\b.Vector3H\x01R\tDamagePos\x88\x01\x01\x12!\n" +
	"\tDamageVal\x18\x03 \x01(\x03H\x02R\tDamageVal\x88\x01\x01B\t\n" +
	"\a_PartIdB\f\n" +
	"\n" +
	"_DamagePosB\f\n" +
	"\n" +
	"_DamageVal\"\xcd\n" +
	"\n" +
	"\x0eSyncDamageInfo\x127\n" +
	"\fDamageSource\x18\x01 \x01(\x0e2\x0e.EDamageSourceH\x00R\fDamageSource\x88\x01\x01\x12\x1b\n" +
	"\x06IsMiss\x18\x02 \x01(\bH\x01R\x06IsMiss\x88\x01\x01\x12\x1b\n" +
	"\x06IsCrit\x18\x03 \x01(\bH\x02R\x06IsCrit\x88\x01\x01\x12%\n" +
	"\x04Type\x18\x04 \x01(\x0e2\f.EDamageTypeH\x03R\x04Type\x88\x01\x01\x12\x1f\n" +
	"\bTypeFlag\x18\x05 \x01(\x05H\x04R\bTypeFlag\x88\x01\x01\x12\x19\n" +
	"\x05Value\x18\x06 \x01(\x03H\x05R\x05Value\x88\x01\x01\x12%\n" +
	"\vActualValue\x18\a \x01(\x03H\x06R\vActualValue\x88\x01\x01\x12#\n" +
	"\n" +
	"LuckyValue\x18\b \x01(\x03H\aR\n" +
	"LuckyValue\x88\x01\x01\x12)\n" +
	"\rHpLessenValue\x18\t \x01(\x03H\bR\rHpLessenValue\x88\x01\x01\x121\n" +
	"\x11ShieldLessenValue\x18\n" +
	" \x01(\x03H\tR\x11ShieldLessenValue\x88\x01\x01\x12'\n" +
	"\fAttackerUuid\x18\v \x01(\x03H\n" +
	"R\fAttackerUuid\x88\x01\x01\x12\x1d\n" +
	"\aOwnerId\x18\f \x01(\x05H\vR\aOwnerId\x88\x01\x01\x12#\n" +
	"\n" +
	"OwnerLevel\x18\r \x01(\x05H\fR\n" +
	"OwnerLevel\x88\x01\x01\x12#\n" +
	"\n" +
	"OwnerStage\x18\x0e \x01(\x05H\rR\n" +
	"OwnerStage\x88\x01\x01\x12#\n" +
	"\n" +
	"HitEventId\x18\x0f \x01(\x05H\x0eR\n" +
	"HitEventId\x88\x01\x01\x12\x1f\n" +
	"\bIsNormal\x18\x10 \x01(\bH\x0fR\bIsNormal\x88\x01\x01\x12\x1b\n" +
	"\x06IsDead\x18\x11 \x01(\bH\x10R\x06IsDead\x88\x01\x01\x121\n" +
	"\bProperty\x18\x12 \x01(\x0e2\x10.EDamagePropertyH\x11R\bProperty\x88\x01\x01\x12+\n" +
	"\tDamagePos\x18\x13 \x01(\v2\b.Vector3H\x12R\tDamagePos\x88\x01\x01\x120\n" +
	"\tPartInfos\x18\x14 \x03(\v2\x12.ClientHitPartInfoR\tPartInfos\x12)\n" +
	"\rTopSummonerId\x18\x15 \x01(\x03H\x13R\rTopSummonerId\x88\x01\x01\x121\n" +
	"\fDamageWeight\x18\x16 \x01(\v2\b.Vector2H\x14R\fDamageWeight\x88\x01\x01\x12%\n" +
	"\vPassiveUuid\x18\x17 \x01(\rH\x15R\vPassiveUuid\x88\x01\x01\x12!\n" +
	"\tIsRainbow\x18\x18 \x01(\bH\x16R\tIsRainbow\x88\x01\x01\x121\n" +
	"\n" +
	"DamageMode\x18\x19 \x01(\x0e2\f.EDamageModeH\x17R\n" +
	"DamageMode\x88\x01\x01B\x0f\n" +
	"\r_DamageSourceB\t\n" +
	"\a_IsMissB\t\n" +
	"\a_IsCritB\a\n" +
	"\x05_TypeB\v\n" +
	"\t_TypeFlagB\b\n" +
	"\x06_ValueB\x0e\n" +
	"\f_ActualValueB\r\n" +
	"\v_LuckyValueB\x10\n" +
	"\x0e_HpLessenValueB\x14\n" +
	"\x12_ShieldLessenValueB\x0f\n" +
	"\r_AttackerUuidB\n" +
	"\n" +
	"\b_OwnerIdB\r\n" +
	"\v_OwnerLevelB\r\n" +
	"\v_OwnerStageB\r\n" +
	"\v_HitEventIdB\v\n" +
	"\t_IsNormalB\t\n" +
	"\a_IsDeadB\v\n" +
	"\t_PropertyB\f\n" +
	"\n" +
	"_DamagePosB\x10\n" +
	"\x0e_TopSummonerIdB\x0f\n" +
	"\r_DamageWeightB\x0e\n" +
	"\f_PassiveUuidB\f\n" +
	"\n" +
	"_IsRainbowB\r\n" +
	"\v_DamageMode\"\x91\x01\n" +
	"\vSkillEffect\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12)\n" +
	"\aDamages\x18\x02 \x03(\v2\x0f.SyncDamageInfoR\aDamages\x12%\n" +
	"\vTotalDamage\x18\x03 \x01(\x03H\x01R\vTotalDamage\x88\x01\x01B\a\n" +
	"\x05_UuidB\x0e\n" +
	"\f_TotalDamage\"\x8a\x02\n" +
	"\n" +
	"BuffEffect\x12(\n" +
	"\x04Type\x18\x01 \x01(\x0e2\x0f.EBuffEventTypeH\x00R\x04Type\x88\x01\x01\x12\x1f\n" +
	"\bBuffUuid\x18\x02 \x01(\x05H\x01R\bBuffUuid\x88\x01\x01\x12\x1f\n" +
	"\bHostUuid\x18\x03 \x01(\x03H\x02R\bHostUuid\x88\x01\x01\x12%\n" +
	"\vTriggerTime\x18\x04 \x01(\x03H\x03R\vTriggerTime\x88\x01\x01\x126\n" +
	"\vLogicEffect\x18\x05 \x03(\v2\x14.BuffEffectLogicInfoR\vLogicEffectB\a\n" +
	"\x05_TypeB\v\n" +
	"\t_BuffUuidB\v\n" +
	"\t_HostUuidB\x0e\n" +
	"\f_TriggerTime\"a\n" +
	"\x0eBuffEffectSync\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12-\n" +
	"\vBuffEffects\x18\x02 \x03(\v2\v.BuffEffectR\vBuffEffectsB\a\n" +
	"\x05_Uuid\"\xc2\x02\n" +
	"\x0eFakeBulletInfo\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x05H\x00R\x04Uuid\x88\x01\x01\x12\x1f\n" +
	"\bBulletId\x18\x02 \x01(\x05H\x01R\bBulletId\x88\x01\x01\x12\x1f\n" +
	"\bTargetId\x18\x03 \x01(\x03H\x02R\bTargetId\x88\x01\x01\x12\x1b\n" +
	"\x06PartId\x18\x04 \x01(\x05H\x03R\x06PartId\x88\x01\x01\x12%\n" +
	"\x06Offset\x18\x05 \x01(\v2\b.Vector3H\x04R\x06Offset\x88\x01\x01\x12%\n" +
	"\x06Rotate\x18\x06 \x01(\v2\b.Vector3H\x05R\x06Rotate\x88\x01\x01\x12\x1b\n" +
	"\x06SkinId\x18\a \x01(\x05H\x06R\x06SkinId\x88\x01\x01B\a\n" +
	"\x05_UuidB\v\n" +
	"\t_BulletIdB\v\n" +
	"\t_TargetIdB\t\n" +
	"\a_PartIdB\t\n" +
	"\a_OffsetB\t\n" +
	"\a_RotateB\t\n" +
	"\a_SkinId\"\x99\x01\n" +
	"\x14PassengerChangeParam\x12+\n" +
	"\x0eIsAddPassenger\x18\x01 \x01(\bH\x00R\x0eIsAddPassenger\x88\x01\x01\x12-\n" +
	"\x0fAddOrRemoveUuid\x18\x02 \x01(\x03H\x01R\x0fAddOrRemoveUuid\x88\x01\x01B\x11\n" +
	"\x0f_IsAddPassengerB\x12\n" +
	"\x10_AddOrRemoveUuid\"j\n" +
	"\x1fMagneticRidePassengerChangeInfo\x12G\n" +
	"\x13PassengerChangeList\x18\x01 \x03(\v2\x15.PassengerChangeParamR\x13PassengerChangeList\"\xc6\x01\n" +
	"\x14PathPointChangeParam\x12!\n" +
	"\tOperation\x18\x01 \x01(\x05H\x00R\tOperation\x88\x01\x01\x12*\n" +
	"\bAddPoint\x18\x02 \x01(\v2\t.PositionH\x01R\bAddPoint\x88\x01\x01\x12/\n" +
	"\x10RemovePointCount\x18\x03 \x01(\x05H\x02R\x10RemovePointCount\x88\x01\x01B\f\n" +
	"\n" +
	"_OperationB\v\n" +
	"\t_AddPointB\x13\n" +
	"\x11_RemovePointCount\"j\n" +
	"\x1fMagneticRidePathPointChangeInfo\x12G\n" +
	"\x13PathPointChangeList\x18\x01 \x03(\v2\x15.PathPointChangeParamR\x13PathPointChangeList\"\xc0\x03\n" +
	"\x1bMagneticRideQueueChangeInfo\x12!\n" +
	"\tQueueUuid\x18\x01 \x01(\x03H\x00R\tQueueUuid\x88\x01\x01\x12W\n" +
	"\x13PassengerChangeInfo\x18\x02 \x01(\v2 .MagneticRidePassengerChangeInfoH\x01R\x13PassengerChangeInfo\x88\x01\x01\x12W\n" +
	"\x13PathPointChangeInfo\x18\x03 \x01(\v2 .MagneticRidePathPointChangeInfoH\x02R\x13PathPointChangeInfo\x88\x01\x01\x12\x1f\n" +
	"\bIsCircle\x18\x04 \x01(\bH\x03R\bIsCircle\x88\x01\x01\x12\x1f\n" +
	"\bIsRemove\x18\x05 \x01(\bH\x04R\bIsRemove\x88\x01\x01\x12#\n" +
	"\n" +
	"PathLength\x18\x06 \x01(\x02H\x05R\n" +
	"PathLength\x88\x01\x01B\f\n" +
	"\n" +
	"_QueueUuidB\x16\n" +
	"\x14_PassengerChangeInfoB\x16\n" +
	"\x14_PathPointChangeInfoB\v\n" +
	"\t_IsCircleB\v\n" +
	"\t_IsRemoveB\r\n" +
	"\v_PathLength\"\xc2\a\n" +
	"\fAoiSyncDelta\x12\x17\n" +
	"\x04Uuid\x18\x01 \x01(\x03H\x00R\x04Uuid\x88\x01\x01\x12*\n" +
	"\x05Attrs\x18\x02 \x01(\v2\x0f.AttrCollectionH\x01R\x05Attrs\x88\x01\x01\x126\n" +
	"\tTempAttrs\x18\x03 \x01(\v2\x13.TempAttrCollectionH\x02R\tTempAttrs\x88\x01\x01\x129\n" +
	"\rEventDataList\x18\x04 \x01(\v2\x0e.EventDataListH\x03R\rEventDataList\x88\x01\x01\x123\n" +
	"\vBulletEvent\x18\x05 \x01(\v2\f.BulletEventH\x04R\vBulletEvent\x88\x01\x01\x12>\n" +
	"\rBodyPartInfos\x18\x06 \x01(\v2\x13.ActorBodyPartInfosH\x05R\rBodyPartInfos\x88\x01\x01\x125\n" +
	"\fSkillEffects\x18\a \x01(\v2\f.SkillEffectH\x06R\fSkillEffects\x88\x01\x01\x12G\n" +
	"\x11PassiveSkillInfos\x18\b \x01(\v2\x14.SeqPassiveSkillInfoH\aR\x11PassiveSkillInfos\x88\x01\x01\x12P\n" +
	"\x14PassiveSkillEndInfos\x18\t \x01(\v2\x17.SeqPassiveSkillEndInfoH\bR\x14PassiveSkillEndInfos\x88\x01\x01\x120\n" +
	"\tBuffInfos\x18\n" +
	" \x01(\v2\r.BuffInfoSyncH\tR\tBuffInfos\x88\x01\x01\x124\n" +
	"\n" +
	"BuffEffect\x18\v \x01(\v2\x0f.BuffEffectSyncH\n" +
	"R\n" +
	"BuffEffect\x88\x01\x01\x121\n" +
	"\vFakeBullets\x18\f \x03(\v2\x0f.FakeBulletInfoR\vFakeBullets\x12f\n" +
	"\x1fMagneticRideQueueChangeInfoList\x18\r \x03(\v2\x1c.MagneticRideQueueChangeInfoR\x1fMagneticRideQueueChangeInfoListB\a\n" +
	"\x05_UuidB\b\n" +
	"\x06_AttrsB\f\n" +
	"\n" +
	"_TempAttrsB\x10\n" +
	"\x0e_EventDataListB\x0e\n" +
	"\f_BulletEventB\x10\n" +
	"\x0e_BodyPartInfosB\x0f\n" +
	"\r_SkillEffectsB\x14\n" +
	"\x12_PassiveSkillInfosB\x17\n" +
	"\x15_PassiveSkillEndInfosB\f\n" +
	"\n" +
	"_BuffInfosB\r\n" +
	"\v_BuffEffect\"\x9f\x02\n" +
	"\aSkillCD\x12'\n" +
	"\fSkillLevelId\x18\x01 \x01(\x05H\x00R\fSkillLevelId\x88\x01\x01\x12!\n" +
	"\tBeginTime\x18\x02 \x01(\x03H\x01R\tBeginTime\x88\x01\x01\x12\x1f\n" +
	"\bDuration\x18\x03 \x01(\x05H\x02R\bDuration\x88\x01\x01\x124\n" +
	"\vSkillCDType\x18\x04 \x01(\x0e2\r.ESkillCDTypeH\x03R\vSkillCDType\x88\x01\x01\x12%\n" +
	"\vValidCDTime\x18\x05 \x01(\x05H\x04R\vValidCDTime\x88\x01\x01B\x0f\n" +
	"\r_SkillLevelIdB\f\n" +
	"\n" +
	"_BeginTimeB\v\n" +
	"\t_DurationB\x0e\n" +
	"\f_SkillCDTypeB\x0e\n" +
	"\f_ValidCDTime\"\xc7\x01\n" +
	"\n" +
	"FightResCD\x12\x19\n" +
	"\x05ResId\x18\x01 \x01(\x05H\x00R\x05ResId\x88\x01\x01\x12!\n" +
	"\tBeginTime\x18\x02 \x01(\x03H\x01R\tBeginTime\x88\x01\x01\x12\x1f\n" +
	"\bDuration\x18\x03 \x01(\x05H\x02R\bDuration\x88\x01\x01\x12%\n" +
	"\vValidCDTime\x18\x04 \x01(\x05H\x03R\vValidCDTime\x88\x01\x01B\b\n" +
	"\x06_ResIdB\f\n" +
	"\n" +
	"_BeginTimeB\v\n" +
	"\t_DurationB\x0e\n" +
	"\f_ValidCDTime\"\xf3\x01\n" +
	"\x10AoiSyncToMeDelta\x120\n" +
	"\tBaseDelta\x18\x01 \x01(\v2\r.AoiSyncDeltaH\x00R\tBaseDelta\x88\x01\x01\x12 \n" +
	"\vSyncHateIds\x18\x02 \x03(\x03R\vSyncHateIds\x12,\n" +
	"\fSyncSkillCDs\x18\x03 \x03(\v2\b.SkillCDR\fSyncSkillCDs\x12-\n" +
	"\vFightResCDs\x18\x04 \x03(\v2\v.FightResCDR\vFightResCDs\x12\x17\n" +
	"\x04Uuid\x18\x05 \x01(\x03H\x01R\x04Uuid\x88\x01\x01B\f\n" +
	"\n" +
	"_BaseDeltaB\a\n" +
	"\x05_Uuid\"B\n" +
	"\x11SyncNearDeltaInfo\x12-\n" +
	"\n" +
	"DeltaInfos\x18\x01 \x03(\v2\r.AoiSyncDeltaR\n" +
	"DeltaInfos\"D\n" +
	"\x11SyncToMeDeltaInfo\x12/\n" +
	"\tDeltaInfo\x18\x01 \x01(\v2\x11.AoiSyncToMeDeltaR\tDeltaInfo\"c\n" +
	"\x10SyncNearEntities\x12\x1f\n" +
	"\x06Appear\x18\x01 \x03(\v2\a.EntityR\x06Appear\x12.\n" +
	"\tDisappear\x18\x02 \x03(\v2\x10.DisappearEntityR\tDisappear\"\x83\x01\n" +
	"\x17MagneticQueueAppearInfo\x12,\n" +
	"\x11PassengerUuidList\x18\x01 \x03(\x03R\x11PassengerUuidList\x12\x1a\n" +
	"\bIsCircle\x18\x02 \x01(\bR\bIsCircle\x12\x1e\n" +
	"\n" +
	"PathLength\x18\x03 \x01(\x02R\n" +
	"PathLength\"\xd0\x04\n" +
	"\x06Entity\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\x03R\x04uuid\x12,\n" +
	"\n" +
	"EntityType\x18\x02 \x01(\x0e2\f.EEntityTypeR\n" +
	"EntityType\x12%\n" +
	"\x05Attrs\x18\x03 \x01(\v2\x0f.AttrCollectionR\x05Attrs\x121\n" +
	"\tTempAttrs\x18\x04 \x01(\v2\x13.TempAttrCollectionR\tTempAttrs\x121\n" +
	"\tBodyInfos\x18\x05 \x01(\v2\x13.ActorBodyPartInfosR\tBodyInfos\x12F\n" +
	"\x13SeqPassiveSkillInfo\x18\x06 \x01(\v2\x14.SeqPassiveSkillInfoR\x13SeqPassiveSkillInfo\x12+\n" +
	"\tBuffInfos\x18\a \x01(\v2\r.BuffInfoSyncR\tBuffInfos\x12,\n" +
	"\n" +
	"AppearType\x18\b \x01(\x0e2\f.EAppearTypeR\n" +
	"AppearType\x12j\n" +
	"\x1bMagneticRideQueueChangeInfo\x18\t \x03(\v2(.Entity.MagneticRideQueueChangeInfoEntryR\x1bMagneticRideQueueChangeInfo\x1ah\n" +
	" MagneticRideQueueChangeInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.MagneticQueueAppearInfoR\x05value:\x028\x01\"\\\n" +
	"\x0fDisappearEntity\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\x03R\x04uuid\x125\n" +
	"\rDisappearType\x18\x02 \x01(\x0e2\x0f.EDisappearTypeR\rDisappearType\"T\n" +
	"\x12UnionHistoryActive\x12\x19\n" +
	"\bunion_id\x18\x01 \x01(\x03R\aunionId\x12#\n" +
	"\ractive_points\x18\x02 \x01(\x03R\factivePoints\"0\n" +
	"\x11UserUnionHuntInfo\x12\x1b\n" +
	"\thunt_rank\x18\x01 \x01(\x05R\bhuntRank\"\x8f\x01\n" +
	"\x11UnionDanceHistory\x12$\n" +
	"\x0edance_end_time\x18\x01 \x01(\x03R\fdanceEndTime\x12(\n" +
	"\x10sent_dance_award\x18\x02 \x01(\bR\x0esentDanceAward\x12*\n" +
	"\x11drawn_dance_award\x18\x03 \x01(\bR\x0fdrawnDanceAward\"\xd0\x05\n" +
	"\tUserUnion\x12\x19\n" +
	"\bunion_id\x18\x01 \x01(\x03R\aunionId\x12$\n" +
	"\x0enext_join_time\x18\x02 \x01(\x04R\fnextJoinTime\x12E\n" +
	"\x0freq_union_times\x18\x03 \x03(\v2\x1d.UserUnion.ReqUnionTimesEntryR\rreqUnionTimes\x12\x1b\n" +
	"\tjoin_flag\x18\x04 \x01(\bR\bjoinFlag\x12#\n" +
	"\rcollected_ids\x18\x05 \x03(\x03R\fcollectedIds\x125\n" +
	"\x17active_award_reset_time\x18\x06 \x01(\x03R\x14activeAwardResetTime\x12,\n" +
	"\x12received_award_ids\x18\a \x03(\x05R\x10receivedAwardIds\x12G\n" +
	"\x15history_active_points\x18\b \x03(\v2\x13.UnionHistoryActiveR\x13historyActivePoints\x127\n" +
	"\x18active_last_refresh_time\x18\t \x01(\x03R\x15activeLastRefreshTime\x125\n" +
	"\x17finish_daily_active_ids\x18\n" +
	" \x03(\x05R\x14finishDailyActiveIds\x12\x1d\n" +
	"\n" +
	"leave_time\x18\v \x01(\x04R\tleaveTime\x125\n" +
	"\fdance_record\x18\r \x01(\v2\x12.UnionDanceHistoryR\vdanceRecord\x12C\n" +
	"\x14user_union_hunt_info\x18\x0e \x01(\v2\x12.UserUnionHuntInfoR\x11userUnionHuntInfo\x1a@\n" +
	"\x12ReqUnionTimesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"q\n" +
	"\vProfileInfo\x12\x1d\n" +
	"\n" +
	"profile_id\x18\x01 \x01(\x05R\tprofileId\x12\x1f\n" +
	"\vprofile_url\x18\x02 \x01(\tR\n" +
	"profileUrl\x12\"\n" +
	"\rhalf_body_url\x18\x03 \x01(\tR\vhalfBodyUrl\"\xb6\n" +
	"\n" +
	"\fCharBaseInfo\x12\x17\n" +
	"\achar_id\x18\x01 \x01(\x03R\x06charId\x12\x1d\n" +
	"\n" +
	"account_id\x18\x02 \x01(\tR\taccountId\x12\x17\n" +
	"\ashow_id\x18\x03 \x01(\x03R\x06showId\x12\x1b\n" +
	"\tserver_id\x18\x04 \x01(\rR\bserverId\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12 \n" +
	"\x06gender\x18\x06 \x01(\x0e2\b.EGenderR\x06gender\x12\x1d\n" +
	"\n" +
	"is_deleted\x18\a \x01(\bR\tisDeleted\x12\x1b\n" +
	"\tis_forbid\x18\b \x01(\bR\bisForbid\x12\x17\n" +
	"\ais_mute\x18\t \x01(\bR\x06isMute\x12\f\n" +
	"\x01x\x18\n" +
	" \x01(\x02R\x01x\x12\f\n" +
	"\x01y\x18\v \x01(\x02R\x01y\x12\f\n" +
	"\x01z\x18\f \x01(\x02R\x01z\x12\x10\n" +
	"\x03dir\x18\r \x01(\x02R\x03dir\x12&\n" +
	"\tface_data\x18\x0e \x01(\v2\t.FaceDataR\bfaceData\x12\x17\n" +
	"\acard_id\x18\x0f \x01(\rR\x06cardId\x12\x1f\n" +
	"\vcreate_time\x18\x10 \x01(\x03R\n" +
	"createTime\x12\x1f\n" +
	"\vonline_time\x18\x11 \x01(\x03R\n" +
	"onlineTime\x12!\n" +
	"\foffline_time\x18\x12 \x01(\x03R\vofflineTime\x12/\n" +
	"\fprofile_info\x18\x13 \x01(\v2\f.ProfileInfoR\vprofileInfo\x12&\n" +
	"\tteam_info\x18\x14 \x01(\v2\t.CharTeamR\bteamInfo\x12\x1d\n" +
	"\n" +
	"char_state\x18\x15 \x01(\x04R\tcharState\x12'\n" +
	"\tbody_size\x18\x16 \x01(\x0e2\n" +
	".EBodySizeR\bbodySize\x12)\n" +
	"\n" +
	"union_info\x18\x17 \x01(\v2\n" +
	".UserUnionR\tunionInfo\x12%\n" +
	"\x0epersonal_state\x18\x18 \x03(\x05R\rpersonalState\x12,\n" +
	"\vavatar_info\x18\x19 \x01(\v2\v.AvatarInfoR\n" +
	"avatarInfo\x12*\n" +
	"\x11total_online_time\x18\x1a \x01(\x04R\x0ftotalOnlineTime\x12\x17\n" +
	"\aopen_id\x18\x1b \x01(\tR\x06openId\x12\x19\n" +
	"\bsdk_type\x18\x1c \x01(\x05R\asdkType\x12\x0e\n" +
	"\x02os\x18\x1d \x01(\x05R\x02os\x12,\n" +
	"\x12init_profession_id\x18\x1f \x01(\x05R\x10initProfessionId\x12-\n" +
	"\x13last_cal_total_time\x18  \x01(\x04R\x10lastCalTotalTime\x12\x17\n" +
	"\aarea_id\x18! \x01(\x05R\x06areaId\x12%\n" +
	"\x0eclient_version\x18\" \x01(\tR\rclientVersion\x12\x1f\n" +
	"\vfight_point\x18# \x01(\x05R\n" +
	"fightPoint\x12\x19\n" +
	"\bsum_save\x18$ \x01(\x03R\asumSave\x126\n" +
	"\x17client_resource_version\x18% \x01(\tR\x15clientResourceVersion\x12*\n" +
	"\x11last_offline_time\x18& \x01(\x03R\x0flastOfflineTime\x12'\n" +
	"\x10day_acc_dur_time\x18' \x01(\x05R\rdayAccDurTime\x123\n" +
	"\x16last_acc_dur_timestamp\x18( \x01(\x03R\x13lastAccDurTimestamp\x12\x1f\n" +
	"\vsave_serial\x18) \x01(\x03R\n" +
	"saveSerial\"\x96\x01\n" +
	"\fSceneLuaData\x12E\n" +
	"\x0escene_lua_info\x18\x01 \x03(\v2\x1f.SceneLuaData.SceneLuaInfoEntryR\fsceneLuaInfo\x1a?\n" +
	"\x11SceneLuaInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8d\x01\n" +
	"\vPioneerData\x124\n" +
	"\binfo_map\x18\x01 \x03(\v2\x19.PioneerData.InfoMapEntryR\ainfoMap\x1aH\n" +
	"\fInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.PioneerInfoR\x05value:\x028\x01\"\xce\x03\n" +
	"\vPioneerInfo\x12#\n" +
	"\rcurrent_total\x18\x01 \x01(\rR\fcurrentTotal\x123\n" +
	"\atargets\x18\x02 \x03(\v2\x19.PioneerInfo.TargetsEntryR\atargets\x120\n" +
	"\x06awards\x18\x03 \x03(\v2\x18.PioneerInfo.AwardsEntryR\x06awards\x12C\n" +
	"\rentered_zones\x18\x04 \x03(\v2\x1e.PioneerInfo.EnteredZonesEntryR\fenteredZones\x12\x0e\n" +
	"\x02id\x18\x05 \x01(\rR\x02id\x12&\n" +
	"\berr_code\x18\x06 \x01(\x0e2\v.EErrorCodeR\aerrCode\x1a:\n" +
	"\fTargetsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a9\n" +
	"\vAwardsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a?\n" +
	"\x11EnteredZonesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xbb\x01\n" +
	"\n" +
	"BuffDBInfo\x12\x15\n" +
	"\x06max_id\x18\x01 \x01(\rR\x05maxId\x12G\n" +
	"\x10all_buff_db_data\x18\x02 \x03(\v2\x1e.BuffDBInfo.AllBuffDbDataEntryR\rallBuffDbData\x1aM\n" +
	"\x12AllBuffDbDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.BuffDBDataR\x05value:\x028\x01\"\x94\x03\n" +
	"\n" +
	"BuffDBData\x12\x1b\n" +
	"\tbuff_uuid\x18\x01 \x01(\x03R\bbuffUuid\x12\x19\n" +
	"\bfirer_id\x18\x02 \x01(\x03R\afirerId\x12$\n" +
	"\x0ebuff_config_id\x18\x03 \x01(\rR\fbuffConfigId\x12\x17\n" +
	"\abase_id\x18\x04 \x01(\rR\x06baseId\x12\x14\n" +
	"\x05level\x18\x05 \x01(\rR\x05level\x12\x14\n" +
	"\x05layer\x18\x06 \x01(\rR\x05layer\x12\x1a\n" +
	"\bduration\x18\a \x01(\x05R\bduration\x12\x14\n" +
	"\x05count\x18\b \x01(\x05R\x05count\x12\x1f\n" +
	"\vcreate_time\x18\t \x01(\x03R\n" +
	"createTime\x12\x17\n" +
	"\apart_id\x18\n" +
	" \x01(\x05R\x06partId\x12&\n" +
	"\x0fcreate_scene_id\x18\v \x01(\x05R\rcreateSceneId\x12*\n" +
	"\x11custom_params_key\x18\f \x03(\tR\x0fcustomParamsKey\x12#\n" +
	"\rcustom_params\x18\r \x03(\x05R\fcustomParams\"\xc7\x03\n" +
	"\vItemPackage\x126\n" +
	"\bpackages\x18\x01 \x03(\v2\x1a.ItemPackage.PackagesEntryR\bpackages\x12@\n" +
	"\funlock_items\x18\x02 \x03(\v2\x1d.ItemPackage.UnlockItemsEntryR\vunlockItems\x12\x1b\n" +
	"\tquick_bar\x18\x03 \x01(\x05R\bquickBar\x12\x1b\n" +
	"\titem_uuid\x18\x04 \x01(\x05R\bitemUuid\x12>\n" +
	"\fuse_group_cd\x18\x05 \x03(\v2\x1c.ItemPackage.UseGroupCdEntryR\n" +
	"useGroupCd\x1aE\n" +
	"\rPackagesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\v2\b.PackageR\x05value:\x028\x01\x1a>\n" +
	"\x10UnlockItemsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fUseGroupCdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xda\x02\n" +
	"\aPackage\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12!\n" +
	"\fmax_capacity\x18\x02 \x01(\x05R\vmaxCapacity\x12-\n" +
	"\aitem_cd\x18\x03 \x03(\v2\x14.Package.ItemCdEntryR\x06itemCd\x12)\n" +
	"\x05items\x18\x04 \x03(\v2\x13.Package.ItemsEntryR\x05items\x12\x1b\n" +
	"\tpublic_cd\x18\x05 \x01(\x03R\bpublicCd\x12%\n" +
	"\x0echange_version\x18\x06 \x01(\x05R\rchangeVersion\x1a9\n" +
	"\vItemCdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a?\n" +
	"\n" +
	"ItemsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x1b\n" +
	"\x05value\x18\x02 \x01(\v2\x05.ItemR\x05value:\x028\x01\"\xc5\x04\n" +
	"\tQuestData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x17\n" +
	"\astep_id\x18\x02 \x01(\rR\x06stepId\x12\x14\n" +
	"\x05state\x18\x03 \x01(\rR\x05state\x128\n" +
	"\n" +
	"target_num\x18\x04 \x03(\v2\x19.QuestData.TargetNumEntryR\ttargetNum\x12B\n" +
	"\x0etarget_max_num\x18\x05 \x03(\v2\x1c.QuestData.TargetMaxNumEntryR\ftargetMaxNum\x12&\n" +
	"\x0fstep_limit_time\x18\x06 \x01(\x03R\rstepLimitTime\x122\n" +
	"\vstep_status\x18\a \x01(\x0e2\x11.EQuestStepStatusR\n" +
	"stepStatus\x12$\n" +
	"\x0eadd_limit_time\x18\b \x01(\rR\faddLimitTime\x12;\n" +
	"\vtarget_type\x18\t \x03(\v2\x1a.QuestData.TargetTypeEntryR\n" +
	"targetType\x1a<\n" +
	"\x0eTargetNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a?\n" +
	"\x11TargetMaxNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fTargetTypeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x91\x01\n" +
	"\fQuestHistory\x12A\n" +
	"\fstep_history\x18\x01 \x03(\v2\x1e.QuestHistory.StepHistoryEntryR\vstepHistory\x1a>\n" +
	"\x10StepHistoryEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\"z\n" +
	"\x0eWorldQuestInfo\x12#\n" +
	"\rfinish_points\x18\x01 \x01(\rR\ffinishPoints\x12\x18\n" +
	"\arewards\x18\x02 \x03(\rR\arewards\x12)\n" +
	"\x10exceeding_points\x18\x03 \x01(\rR\x0fexceedingPoints\"/\n" +
	"\x0eworldQuestList\x12\x1d\n" +
	"\n" +
	"quest_list\x18\x01 \x03(\x05R\tquestList\"\xee\x0e\n" +
	"\rQuestDataList\x129\n" +
	"\tquest_map\x18\x01 \x03(\v2\x1c.QuestDataList.QuestMapEntryR\bquestMap\x12B\n" +
	"\ffinish_quest\x18\x02 \x03(\v2\x1f.QuestDataList.FinishQuestEntryR\vfinishQuest\x12\x1f\n" +
	"\vtracking_id\x18\x03 \x01(\rR\n" +
	"trackingId\x12R\n" +
	"\x12finish_reset_quest\x18\x04 \x03(\v2$.QuestDataList.FinishResetQuestEntryR\x10finishResetQuest\x12?\n" +
	"\vhistory_map\x18\x05 \x03(\v2\x1e.QuestDataList.HistoryMapEntryR\n" +
	"historyMap\x123\n" +
	"\x16world_quest_time_stamp\x18\x06 \x01(\x03R\x13worldQuestTimeStamp\x12L\n" +
	"\x10world_quest_info\x18\a \x03(\v2\".QuestDataList.WorldQuestInfoEntryR\x0eworldQuestInfo\x12V\n" +
	"\x14all_world_quest_list\x18\b \x03(\v2%.QuestDataList.AllWorldQuestListEntryR\x11allWorldQuestList\x12V\n" +
	"\x14blue_world_quest_map\x18\t \x03(\v2%.QuestDataList.BlueWorldQuestMapEntryR\x11blueWorldQuestMap\x12I\n" +
	"\x0ffilter_event_id\x18\n" +
	" \x03(\v2!.QuestDataList.FilterEventIdEntryR\rfilterEventId\x12*\n" +
	"\x11accept_quest_list\x18\v \x03(\rR\x0facceptQuestList\x125\n" +
	"\x17follow_world_quest_list\x18\f \x03(\rR\x14followWorldQuestList\x12X\n" +
	"\x14track_optional_quest\x18\r \x03(\v2&.QuestDataList.TrackOptionalQuestEntryR\x12trackOptionalQuest\x12b\n" +
	"\x18finish_reset_quest_count\x18\x0e \x03(\v2).QuestDataList.FinishResetQuestCountEntryR\x15finishResetQuestCount\x12L\n" +
	"\x10accept_quest_map\x18\x0f \x03(\v2\".QuestDataList.AcceptQuestMapEntryR\x0eacceptQuestMap\x12\x18\n" +
	"\aversion\x18\x10 \x01(\x04R\aversion\x1aG\n" +
	"\rQuestMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".QuestDataR\x05value:\x028\x01\x1a>\n" +
	"\x10FinishQuestEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aC\n" +
	"\x15FinishResetQuestEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aL\n" +
	"\x0fHistoryMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.QuestHistoryR\x05value:\x028\x01\x1aR\n" +
	"\x13WorldQuestInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.WorldQuestInfoR\x05value:\x028\x01\x1aD\n" +
	"\x16AllWorldQuestListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aD\n" +
	"\x16BlueWorldQuestMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aQ\n" +
	"\x12FilterEventIdEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.worldQuestListR\x05value:\x028\x01\x1aE\n" +
	"\x17TrackOptionalQuestEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aH\n" +
	"\x1aFinishResetQuestCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1aA\n" +
	"\x13AcceptQuestMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xae\x01\n" +
	"\bMiscInfo\x12Y\n" +
	"\x16expression_ids_learned\x18\x01 \x03(\v2#.MiscInfo.ExpressionIdsLearnedEntryR\x14expressionIdsLearned\x1aG\n" +
	"\x19ExpressionIdsLearnedEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa4\x01\n" +
	"\fExchangeItem\x12D\n" +
	"\rexchange_info\x18\x01 \x03(\v2\x1f.ExchangeItem.ExchangeInfoEntryR\fexchangeInfo\x1aN\n" +
	"\x11ExchangeInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.ExchangeInfoR\x05value:\x028\x01\"\xb4\x01\n" +
	"\fExchangeInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12D\n" +
	"\rexchange_data\x18\x02 \x03(\v2\x1f.ExchangeInfo.ExchangeDataEntryR\fexchangeData\x1aN\n" +
	"\x11ExchangeDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.ExchangeDataR\x05value:\x028\x01\"\xc7\x01\n" +
	"\fExchangeData\x12$\n" +
	"\x0eitem_config_id\x18\x01 \x01(\x05R\fitemConfigId\x12\x16\n" +
	"\x06unlock\x18\x02 \x01(\x05R\x06unlock\x12,\n" +
	"\x12cur_exchange_count\x18\x03 \x01(\x05R\x10curExchangeCount\x12\x1f\n" +
	"\vexpire_time\x18\x04 \x01(\x03R\n" +
	"expireTime\x12*\n" +
	"\x11last_refresh_time\x18\x05 \x01(\x03R\x0flastRefreshTime\"\xc2\x01\n" +
	"\tEquipInfo\x12\x1d\n" +
	"\n" +
	"equip_slot\x18\x01 \x01(\x05R\tequipSlot\x12\x1b\n" +
	"\titem_uuid\x18\x02 \x01(\x04R\bitemUuid\x125\n" +
	"\x17equip_slot_refine_level\x18\x03 \x01(\rR\x14equipSlotRefineLevel\x12B\n" +
	"\x1eequip_slot_refine_failed_count\x18\x04 \x01(\rR\x1aequipSlotRefineFailedCount\"\x9f\x01\n" +
	"\x10EquipEnchantInfo\x12/\n" +
	"\x14enchant_item_type_id\x18\x01 \x01(\x05R\x11enchantItemTypeId\x12#\n" +
	"\renchant_level\x18\x02 \x01(\x05R\fenchantLevel\x125\n" +
	"\fenchant_type\x18\x03 \x01(\x0e2\x12.EEquipEnchantTypeR\venchantType\"\xa4\x01\n" +
	"\rEquipSuitInfo\x129\n" +
	"\tsuit_attr\x18\x03 \x03(\v2\x1c.EquipSuitInfo.SuitAttrEntryR\bsuitAttr\x12\x1b\n" +
	"\tattr_type\x18\x04 \x01(\x05R\battrType\x1a;\n" +
	"\rSuitAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x83\x05\n" +
	"\tEquipList\x128\n" +
	"\n" +
	"equip_list\x18\x01 \x03(\v2\x19.EquipList.EquipListEntryR\tequipList\x12)\n" +
	"\n" +
	"equip_attr\x18\x02 \x01(\v2\n" +
	".EquipAttrR\tequipAttr\x12K\n" +
	"\x11equip_recast_info\x18\x04 \x03(\v2\x1f.EquipList.EquipRecastInfoEntryR\x0fequipRecastInfo\x12A\n" +
	"\requip_enchant\x18\x05 \x03(\v2\x1c.EquipList.EquipEnchantEntryR\fequipEnchant\x12B\n" +
	"\x0esuit_info_dict\x18\x06 \x03(\v2\x1c.EquipList.SuitInfoDictEntryR\fsuitInfoDict\x1aH\n" +
	"\x0eEquipListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".EquipInfoR\x05value:\x028\x01\x1aN\n" +
	"\x14EquipRecastInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".EquipAttrR\x05value:\x028\x01\x1aR\n" +
	"\x11EquipEnchantEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.EquipEnchantInfoR\x05value:\x028\x01\x1aO\n" +
	"\x11SuitInfoDictEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.EquipSuitInfoR\x05value:\x028\x01\"\xe7\x01\n" +
	"\n" +
	"EnergyItem\x12!\n" +
	"\fenergy_limit\x18\x01 \x01(\rR\venergyLimit\x12,\n" +
	"\x12extra_energy_limit\x18\x02 \x01(\rR\x10extraEnergyLimit\x12<\n" +
	"\venergy_info\x18\x03 \x03(\v2\x1b.EnergyItem.EnergyInfoEntryR\n" +
	"energyInfo\x1aJ\n" +
	"\x0fEnergyInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.EnergyInfoR\x05value:\x028\x01\"\xed\x01\n" +
	"\n" +
	"EnergyInfo\x12!\n" +
	"\fenergy_value\x18\x01 \x01(\rR\venergyValue\x12\x1d\n" +
	"\n" +
	"unlock_num\x18\x02 \x01(\rR\tunlockNum\x12I\n" +
	"\x10energy_item_info\x18\x03 \x03(\v2\x1f.EnergyInfo.EnergyItemInfoEntryR\x0eenergyItemInfo\x1aR\n" +
	"\x13EnergyItemInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.EnergyItemInfoR\x05value:\x028\x01\"\x88\x01\n" +
	"\x0eEnergyItemInfo\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\x12\x1b\n" +
	"\tcolumn_id\x18\x02 \x01(\rR\bcolumnId\x12!\n" +
	"\frefine_state\x18\x03 \x01(\rR\vrefineState\x12\x1b\n" +
	"\tgain_time\x18\x04 \x01(\x03R\bgainTime\"\x9e\x02\n" +
	"\aMapData\x12=\n" +
	"\rmark_data_map\x18\x01 \x03(\v2\x19.MapData.MarkDataMapEntryR\vmarkDataMap\x120\n" +
	"\bares_map\x18\x02 \x03(\v2\x15.MapData.AresMapEntryR\aaresMap\x12\x1b\n" +
	"\tmark_uuid\x18\x03 \x01(\x05R\bmarkUuid\x1aI\n" +
	"\x10MarkDataMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1f\n" +
	"\x05value\x18\x02 \x01(\v2\t.MarkDataR\x05value:\x028\x01\x1a:\n" +
	"\fAresMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xc2\x01\n" +
	"\bMarkData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12>\n" +
	"\rmark_info_map\x18\x02 \x03(\v2\x1a.MarkData.MarkInfoMapEntryR\vmarkInfoMap\x12\x1b\n" +
	"\tmark_uuid\x18\x03 \x01(\x05R\bmarkUuid\x1aI\n" +
	"\x10MarkInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x1f\n" +
	"\x05value\x18\x02 \x01(\v2\t.MarkInfoR\x05value:\x028\x01\"\x95\x01\n" +
	"\bMarkInfo\x12\x15\n" +
	"\x06tag_id\x18\x01 \x01(\x03R\x05tagId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x17\n" +
	"\aicon_id\x18\x04 \x01(\rR\x06iconId\x12)\n" +
	"\bposition\x18\x05 \x01(\v2\r.MarkPositionR\bposition\"*\n" +
	"\fMarkPosition\x12\f\n" +
	"\x01x\x18\x01 \x01(\x05R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x05R\x01y\"\xab\x01\n" +
	"\x11DungeonEnterLimit\x12C\n" +
	"\venter_count\x18\x01 \x03(\v2\".DungeonEnterLimit.EnterCountEntryR\n" +
	"enterCount\x1aQ\n" +
	"\x0fEnterCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.DungeonEnterCountR\x05value:\x028\x01\"S\n" +
	"\x11DungeonEnterCount\x12\x1d\n" +
	"\n" +
	"enter_time\x18\x01 \x01(\rR\tenterTime\x12\x1f\n" +
	"\venter_count\x18\x02 \x01(\x05R\n" +
	"enterCount\"\xda\x01\n" +
	"\x15DungeonWeekTargetList\x12G\n" +
	"\vweek_target\x18\x01 \x03(\v2&.DungeonWeekTargetList.WeekTargetEntryR\n" +
	"weekTarget\x12!\n" +
	"\frefresh_time\x18\x02 \x01(\rR\vrefreshTime\x1aU\n" +
	"\x0fWeekTargetEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.DungeonTargetProgressR\x05value:\x028\x01\"~\n" +
	"\x15DungeonTargetProgress\x12\x1b\n" +
	"\ttarget_id\x18\x01 \x01(\x05R\btargetId\x12'\n" +
	"\x0ftarget_progress\x18\x02 \x01(\x05R\x0etargetProgress\x12\x1f\n" +
	"\vaward_state\x18\x03 \x01(\x05R\n" +
	"awardState\"\xa0\x01\n" +
	"\n" +
	"RaidRecord\x12B\n" +
	"\rboss_progress\x18\x02 \x03(\v2\x1d.RaidRecord.BossProgressEntryR\fbossProgress\x1aN\n" +
	"\x11BossProgressEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.BossProgressR\x05value:\x028\x01\"6\n" +
	"\fBossProgress\x12&\n" +
	"\x0ftotal_award_cnt\x18\x01 \x01(\x05R\rtotalAwardCnt\"\xc1\x04\n" +
	"\vDungeonList\x12L\n" +
	"\x10complete_dungeon\x18\x01 \x03(\v2!.DungeonList.CompleteDungeonEntryR\x0fcompleteDungeon\x12\x1d\n" +
	"\n" +
	"reset_time\x18\x02 \x01(\rR\tresetTime\x129\n" +
	"\x19normal_dungeon_pass_count\x18\x03 \x01(\rR\x16normalDungeonPassCount\x12B\n" +
	"\x13dungeon_enter_limit\x18\x04 \x01(\v2\x12.DungeonEnterLimitR\x11dungeonEnterLimit\x127\n" +
	"\vweek_target\x18\x05 \x01(\v2\x16.DungeonWeekTargetListR\n" +
	"weekTarget\x12\x1b\n" +
	"\tis_assist\x18\x06 \x01(\bR\bisAssist\x12M\n" +
	"\x11raid_record_table\x18\a \x03(\v2!.DungeonList.RaidRecordTableEntryR\x0fraidRecordTable\x1aP\n" +
	"\x14CompleteDungeonEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.DungeonInfoR\x05value:\x028\x01\x1aO\n" +
	"\x14RaidRecordTableEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.RaidRecordR\x05value:\x028\x01\"\x9d\x02\n" +
	"\rUserFightAttr\x12\x15\n" +
	"\x06cur_hp\x18\x01 \x01(\x03R\x05curHp\x12\x15\n" +
	"\x06max_hp\x18\x02 \x01(\x03R\x05maxHp\x12#\n" +
	"\rorigin_energy\x18\x03 \x01(\x02R\foriginEnergy\x12!\n" +
	"\fresource_ids\x18\x04 \x03(\rR\vresourceIds\x12\x1c\n" +
	"\tresources\x18\x05 \x03(\rR\tresources\x12\x17\n" +
	"\ais_dead\x18\x06 \x01(\x05R\x06isDead\x12\x1b\n" +
	"\tdead_time\x18\a \x01(\x03R\bdeadTime\x12\x1b\n" +
	"\trevive_id\x18\b \x01(\x05R\breviveId\x12%\n" +
	"\acd_info\x18\t \x03(\v2\f.SkillCDInfoR\x06cdInfo\"\x95\x03\n" +
	"\vSkillCDInfo\x12$\n" +
	"\x0eskill_level_id\x18\x01 \x01(\x05R\fskillLevelId\x12(\n" +
	"\x10skill_begin_time\x18\x02 \x01(\x03R\x0eskillBeginTime\x12\x1a\n" +
	"\bduration\x18\x03 \x01(\x05R\bduration\x12\"\n" +
	"\rskill_cd_type\x18\x04 \x01(\rR\vskillCdType\x12;\n" +
	"\x1aprofession_hold_begin_time\x18\x06 \x01(\x03R\x17professionHoldBeginTime\x12!\n" +
	"\fcharge_count\x18\a \x01(\x05R\vchargeCount\x12\"\n" +
	"\rvalid_cd_time\x18\b \x01(\x05R\vvalidCdTime\x12 \n" +
	"\fsub_cd_ratio\x18\t \x01(\x05R\n" +
	"subCdRatio\x12 \n" +
	"\fsub_cd_fixed\x18\n" +
	" \x01(\x03R\n" +
	"subCdFixed\x12.\n" +
	"\x13accelerate_cd_ratio\x18\v \x01(\x05R\x11accelerateCdRatio\"\xbc\x02\n" +
	"\x0fUnlockColorInfo\x12H\n" +
	"\x0ecolor_info_map\x18\x01 \x03(\v2\".UnlockColorInfo.ColorInfoMapEntryR\fcolorInfoMap\x12X\n" +
	"\x14color_block_info_map\x18\x02 \x03(\v2'.UnlockColorInfo.ColorBlockInfoMapEntryR\x11colorBlockInfoMap\x1a?\n" +
	"\x11ColorInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aD\n" +
	"\x16ColorBlockInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"~\n" +
	"\x12FashionAdvanceInfo\x12\x1d\n" +
	"\n" +
	"fashion_id\x18\x01 \x01(\x05R\tfashionId\x12(\n" +
	"\x10using_advance_id\x18\x02 \x01(\x05R\x0eusingAdvanceId\x12\x1f\n" +
	"\vadvance_ids\x18\x03 \x03(\x05R\n" +
	"advanceIds\"\x84\x0e\n" +
	"\n" +
	"FashionMgr\x126\n" +
	"\twear_info\x18\x01 \x03(\v2\x19.FashionMgr.WearInfoEntryR\bwearInfo\x12B\n" +
	"\rfashion_datas\x18\x02 \x03(\v2\x1d.FashionMgr.FashionDatasEntryR\ffashionDatas\x12?\n" +
	"\funlock_color\x18\x03 \x03(\v2\x1c.FashionMgr.UnlockColorEntryR\vunlockColor\x12E\n" +
	"\x0efashion_reward\x18\x04 \x03(\v2\x1e.FashionMgr.FashionRewardEntryR\rfashionReward\x12<\n" +
	"\vall_fashion\x18\x05 \x03(\v2\x1b.FashionMgr.AllFashionEntryR\n" +
	"allFashion\x123\n" +
	"\ball_ride\x18\x06 \x03(\v2\x18.FashionMgr.AllRideEntryR\aallRide\x12F\n" +
	"\x0fall_weapon_skin\x18\a \x03(\v2\x1e.FashionMgr.AllWeaponSkinEntryR\rallWeaponSkin\x12H\n" +
	"\x0ffashion_advance\x18\b \x03(\v2\x1f.FashionMgr.FashionAdvanceEntryR\x0efashionAdvance\x122\n" +
	"\x15fashion_collect_point\x18\t \x01(\x05R\x13fashionCollectPoint\x12,\n" +
	"\x12ride_collect_point\x18\n" +
	" \x01(\x05R\x10rideCollectPoint\x129\n" +
	"\x19weapon_skin_collect_point\x18\v \x01(\x05R\x16weaponSkinCollectPoint\x12F\n" +
	"\x0fall_fashion_num\x18\f \x03(\v2\x1e.FashionMgr.AllFashionNumEntryR\rallFashionNum\x12=\n" +
	"\fall_ride_num\x18\r \x03(\v2\x1b.FashionMgr.AllRideNumEntryR\n" +
	"allRideNum\x12P\n" +
	"\x13all_weapon_skin_num\x18\x0e \x03(\v2!.FashionMgr.AllWeaponSkinNumEntryR\x10allWeaponSkinNum\x12&\n" +
	"\x0fis_fashion_init\x18\x0f \x01(\bR\risFashionInit\x12 \n" +
	"\fis_ride_init\x18\x10 \x01(\bR\n" +
	"isRideInit\x12-\n" +
	"\x13is_weapon_skin_init\x18\x11 \x01(\bR\x10isWeaponSkinInit\x1a;\n" +
	"\rWearInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aR\n" +
	"\x11FashionDatasEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.FashionColorInfoR\x05value:\x028\x01\x1aP\n" +
	"\x10UnlockColorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.UnlockColorInfoR\x05value:\x028\x01\x1a@\n" +
	"\x12FashionRewardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a=\n" +
	"\x0fAllFashionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a:\n" +
	"\fAllRideEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a@\n" +
	"\x12AllWeaponSkinEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aV\n" +
	"\x13FashionAdvanceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.FashionAdvanceInfoR\x05value:\x028\x01\x1a@\n" +
	"\x12AllFashionNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fAllRideNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aC\n" +
	"\x15AllWeaponSkinNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa8\x01\n" +
	"\vProfileList\x12S\n" +
	"\x13unlock_profile_list\x18\x01 \x03(\v2#.ProfileList.UnlockProfileListEntryR\x11unlockProfileList\x1aD\n" +
	"\x16UnlockProfileListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xbb\x02\n" +
	"\n" +
	"PlayHelper\x12X\n" +
	"\x15displayed_helper_list\x18\x01 \x03(\v2$.PlayHelper.DisplayedHelperListEntryR\x13displayedHelperList\x12H\n" +
	"\x0fcompleted_guide\x18\x02 \x03(\v2\x1f.PlayHelper.CompletedGuideEntryR\x0ecompletedGuide\x1aF\n" +
	"\x18DisplayedHelperListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aA\n" +
	"\x13CompletedGuideEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\x99\x01\n" +
	"\vCounterList\x12=\n" +
	"\vcounter_map\x18\x01 \x03(\v2\x1c.CounterList.CounterMapEntryR\n" +
	"counterMap\x1aK\n" +
	"\x0fCounterMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.CounterInfoR\x05value:\x028\x01\"7\n" +
	"\vCounterInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x18\n" +
	"\acounter\x18\x02 \x01(\x03R\acounter\"\xb0\x01\n" +
	"\x0ePersonalObject\x12G\n" +
	"\x0escene_obj_data\x18\x01 \x03(\v2!.PersonalObject.SceneObjDataEntryR\fsceneObjData\x1aU\n" +
	"\x11SceneObjDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.ScenePersonalObjectR\x05value:\x028\x01\"\xd4\x01\n" +
	"\x13ScenePersonalObject\x12U\n" +
	"\x11personal_obj_data\x18\x01 \x03(\v2).ScenePersonalObject.PersonalObjDataEntryR\x0fpersonalObjData\x1af\n" +
	"\x14PersonalObjDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x128\n" +
	"\x05value\x18\x02 \x01(\v2\".ServerStateObjectInteractionParamR\x05value:\x028\x01\"\x93\x01\n" +
	"!ServerStateObjectInteractionParam\x12\x19\n" +
	"\bobj_uuid\x18\x01 \x01(\x03R\aobjUuid\x12\x1f\n" +
	"\vstate_value\x18\x02 \x01(\x05R\n" +
	"stateValue\x122\n" +
	"\x15last_interaction_time\x18\x03 \x01(\x03R\x13lastInteractionTime\"\x9d\x05\n" +
	"\tRoleLevel\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12\"\n" +
	"\rcur_level_exp\x18\x02 \x01(\x03R\vcurLevelExp\x12Q\n" +
	"\x13received_level_list\x18\x03 \x03(\v2!.RoleLevel.ReceivedLevelListEntryR\x11receivedLevelList\x12<\n" +
	"\x10proficiency_info\x18\x04 \x01(\v2\x11.LevelProficiencyR\x0fproficiencyInfo\x12B\n" +
	"\x0eactive_exp_map\x18\x05 \x03(\v2\x1c.RoleLevel.ActiveExpMapEntryR\factiveExpMap\x12&\n" +
	"\x0flast_season_day\x18\x06 \x01(\x05R\rlastSeasonDay\x12$\n" +
	"\x0ebless_exp_pool\x18\a \x01(\x03R\fblessExpPool\x12&\n" +
	"\x0fgrant_bless_exp\x18\b \x01(\x03R\rgrantBlessExp\x120\n" +
	"\x14accumulate_bless_exp\x18\t \x01(\x03R\x12accumulateBlessExp\x12%\n" +
	"\x0eaccumulate_exp\x18\n" +
	" \x01(\x03R\raccumulateExp\x12+\n" +
	"\x12prev_season_max_lv\x18\v \x01(\x05R\x0fprevSeasonMaxLv\x1aD\n" +
	"\x16ReceivedLevelListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a?\n" +
	"\x11ActiveExpMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xfa\x02\n" +
	"\x10LevelProficiency\x12^\n" +
	"\x15using_proficiency_map\x18\x01 \x03(\v2*.LevelProficiency.UsingProficiencyMapEntryR\x13usingProficiencyMap\x12a\n" +
	"\x16unlock_proficiency_map\x18\x02 \x03(\v2+.LevelProficiency.UnlockProficiencyMapEntryR\x14unlockProficiencyMap\x1aF\n" +
	"\x18UsingProficiencyMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a[\n" +
	"\x19UnlockProficiencyMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.UnlockProficiencyR\x05value:\x028\x01\"=\n" +
	"\x11UnlockProficiency\x12(\n" +
	"\x10unlock_buffer_id\x18\x01 \x03(\x05R\x0eunlockBufferId\"\xfa\x01\n" +
	"\x05Pivot\x12*\n" +
	"\x06pivots\x18\x01 \x03(\v2\x12.Pivot.PivotsEntryR\x06pivots\x124\n" +
	"\n" +
	"map_pivots\x18\x02 \x03(\v2\x15.Pivot.MapPivotsEntryR\tmapPivots\x1aE\n" +
	"\vPivotsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".PivotInfoR\x05value:\x028\x01\x1aH\n" +
	"\x0eMapPivotsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".PivotInfoR\x05value:\x028\x01\"\x8b\x01\n" +
	"\tPivotInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1f\n" +
	"\vbreak_point\x18\x02 \x03(\x05R\n" +
	"breakPoint\x12!\n" +
	"\freward_stage\x18\x03 \x03(\x05R\vrewardStage\x12*\n" +
	"\x11reward_full_state\x18\x04 \x01(\x05R\x0frewardFullState\"~\n" +
	"\rTransferPoint\x122\n" +
	"\x06points\x18\x01 \x03(\v2\x1a.TransferPoint.PointsEntryR\x06points\x1a9\n" +
	"\vPointsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"+\n" +
	"\fPlanetMemory\x12\x1b\n" +
	"\tpass_room\x18\x01 \x03(\x05R\bpassRoom\"\xa0\x01\n" +
	"\fSeasonTarget\x12>\n" +
	"\vtarget_info\x18\x01 \x03(\v2\x1d.SeasonTarget.TargetInfoEntryR\n" +
	"targetInfo\x1aP\n" +
	"\x0fTargetInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.SeasonTargetInfoR\x05value:\x028\x01\"y\n" +
	"\x10SeasonTargetInfo\x12\x1b\n" +
	"\ttarget_id\x18\x01 \x01(\x05R\btargetId\x12'\n" +
	"\x0ftarget_progress\x18\x02 \x01(\x05R\x0etargetProgress\x12\x1f\n" +
	"\vaward_state\x18\x03 \x01(\x05R\n" +
	"awardState\"\xb9\x02\n" +
	"\n" +
	"RedDotData\x12_\n" +
	"\x18permanent_closed_red_dot\x18\x01 \x03(\v2&.RedDotData.PermanentClosedRedDotEntryR\x15permanentClosedRedDot\x12@\n" +
	"\rred_dot_count\x18\x02 \x03(\v2\x1c.RedDotData.RedDotCountEntryR\vredDotCount\x1aH\n" +
	"\x1aPermanentClosedRedDotEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a>\n" +
	"\x10RedDotCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xa4\x01\n" +
	"\tResonance\x12:\n" +
	"\n" +
	"resonances\x18\x01 \x03(\v2\x1a.Resonance.ResonancesEntryR\n" +
	"resonances\x12\x1c\n" +
	"\tinstalled\x18\x02 \x03(\rR\tinstalled\x1a=\n" +
	"\x0fResonancesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\x83\x01\n" +
	"\tCutsState\x128\n" +
	"\n" +
	"state_info\x18\x01 \x03(\v2\x19.CutsState.StateInfoEntryR\tstateInfo\x1a<\n" +
	"\x0eStateInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x86\x03\n" +
	"\x0fInvestigateList\x12M\n" +
	"\x0finvestigate_map\x18\x01 \x03(\v2$.InvestigateList.InvestigateMapEntryR\x0einvestigateMap\x12Z\n" +
	"\x14comp_investigate_map\x18\x02 \x03(\v2(.InvestigateList.CompInvestigateMapEntryR\x12compInvestigateMap\x12,\n" +
	"\x12comp_reasoning_map\x18\x03 \x03(\rR\x10compReasoningMap\x1aS\n" +
	"\x13InvestigateMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.InvestigateDataR\x05value:\x028\x01\x1aE\n" +
	"\x17CompInvestigateMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xa9\x01\n" +
	"\x0fInvestigateData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x128\n" +
	"\bstep_ids\x18\x02 \x03(\v2\x1d.InvestigateData.StepIdsEntryR\astepIds\x1aL\n" +
	"\fStepIdsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.InvestigateStepR\x05value:\x028\x01\"\xbe\x01\n" +
	"\x0fInvestigateStep\x12\x14\n" +
	"\x05clues\x18\x01 \x03(\x05R\x05clues\x12G\n" +
	"\rreasoning_map\x18\x02 \x03(\v2\".InvestigateStep.ReasoningMapEntryR\freasoningMap\x1aL\n" +
	"\x11ReasoningMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.AnswerListR\x05value:\x028\x01\"&\n" +
	"\n" +
	"AnswerList\x12\x18\n" +
	"\aanswers\x18\x01 \x03(\x05R\aanswers\"\xa7\x01\n" +
	"\x11ParkourRecordList\x12C\n" +
	"\vrecord_list\x18\x01 \x03(\v2\".ParkourRecordList.RecordListEntryR\n" +
	"recordList\x1aM\n" +
	"\x0fRecordListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.ParkourRecordR\x05value:\x028\x01\"\\\n" +
	"\rParkourRecord\x12\x12\n" +
	"\x04time\x18\x01 \x01(\rR\x04time\x12\x14\n" +
	"\x05state\x18\x02 \x01(\rR\x05state\x12!\n" +
	"\fperfect_time\x18\x03 \x01(\rR\vperfectTime\"\xef\x01\n" +
	"\x0fInteractionInfo\x12+\n" +
	"\x11interaction_stage\x18\x01 \x01(\x05R\x10interactionStage\x12\x1b\n" +
	"\taction_id\x18\x02 \x01(\x05R\bactionId\x12#\n" +
	"\roriginator_id\x18\x03 \x01(\x03R\foriginatorId\x12\x1d\n" +
	"\n" +
	"invitee_id\x18\x04 \x01(\x03R\tinviteeId\x12#\n" +
	"\ris_originator\x18\x05 \x01(\bR\fisOriginator\x12)\n" +
	"\x10interaction_type\x18\x06 \x01(\x05R\x0finteractionType\"\xf2\x01\n" +
	"\x0fSeasonQuestList\x12>\n" +
	"\n" +
	"season_map\x18\x01 \x03(\v2\x1f.SeasonQuestList.SeasonMapEntryR\tseasonMap\x12!\n" +
	"\frefresh_week\x18\x02 \x01(\x05R\vrefreshWeek\x12,\n" +
	"\x12refresh_time_stamp\x18\x03 \x01(\x03R\x10refreshTimeStamp\x1aN\n" +
	"\x0eSeasonMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.SeasonQuestDataR\x05value:\x028\x01\"V\n" +
	"\x0fSeasonQuestData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1d\n" +
	"\n" +
	"target_num\x18\x02 \x01(\x05R\ttargetNum\x12\x14\n" +
	"\x05award\x18\x03 \x01(\x05R\x05award\"\xbe\x01\n" +
	"\bRoleFace\x12D\n" +
	"\x0funlock_item_map\x18\x01 \x03(\v2\x1c.RoleFace.UnlockItemMapEntryR\runlockItemMap\x12*\n" +
	"\x11save_need_consume\x18\x02 \x01(\bR\x0fsaveNeedConsume\x1a@\n" +
	"\x12UnlockItemMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xa2\x01\n" +
	"\x0fMapBookInfoList\x12B\n" +
	"\fmap_book_map\x18\x01 \x03(\v2 .MapBookInfoList.MapBookMapEntryR\n" +
	"mapBookMap\x1aK\n" +
	"\x0fMapBookMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.MapBookInfoR\x05value:\x028\x01\"\xd8\x01\n" +
	"\vMapBookInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12G\n" +
	"\x0fmap_sticker_map\x18\x02 \x03(\v2\x1f.MapBookInfo.MapStickerMapEntryR\rmapStickerMap\x12\x1d\n" +
	"\n" +
	"award_flag\x18\x03 \x01(\rR\tawardFlag\x1aQ\n" +
	"\x12MapStickerMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.MapStickerInfoR\x05value:\x028\x01\"\xe4\x01\n" +
	"\x0eMapStickerInfo\x12@\n" +
	"\vsticker_map\x18\x01 \x03(\v2\x1f.MapStickerInfo.StickerMapEntryR\n" +
	"stickerMap\x12\x1d\n" +
	"\n" +
	"finish_map\x18\x02 \x03(\rR\tfinishMap\x12\x1d\n" +
	"\n" +
	"award_flag\x18\x03 \x01(\rR\tawardFlag\x1aR\n" +
	"\x0fStickerMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.MapStickerTaskInfoR\x05value:\x028\x01\"\xae\x01\n" +
	"\x12MapStickerTaskInfo\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12A\n" +
	"\n" +
	"target_num\x18\x02 \x03(\v2\".MapStickerTaskInfo.TargetNumEntryR\ttargetNum\x1a<\n" +
	"\x0eTargetNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"0\n" +
	"\x11AntiAddictionInfo\x12\x1b\n" +
	"\tlast_time\x18\x01 \x01(\rR\blastTime\"\xcf\x01\n" +
	"\x12MonsterExploreList\x12]\n" +
	"\x14monster_explore_list\x18\x01 \x03(\v2+.MonsterExploreList.MonsterExploreListEntryR\x12monsterExploreList\x1aZ\n" +
	"\x17MonsterExploreListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.MonsterExploreInfoR\x05value:\x028\x01\"\xea\x01\n" +
	"\x12MonsterExploreInfo\x12\x1b\n" +
	"\tis_unlock\x18\x01 \x01(\bR\bisUnlock\x12A\n" +
	"\n" +
	"target_num\x18\x02 \x03(\v2\".MonsterExploreInfo.TargetNumEntryR\ttargetNum\x12\x1d\n" +
	"\n" +
	"award_flag\x18\x03 \x01(\rR\tawardFlag\x12\x17\n" +
	"\ais_flag\x18\x04 \x01(\bR\x06isFlag\x1a<\n" +
	"\x0eTargetNumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x98\x04\n" +
	"\rShowPieceData\x12S\n" +
	"\x13often_use_type_list\x18\x01 \x03(\v2$.ShowPieceData.OftenUseTypeListEntryR\x10oftenUseTypeList\x12L\n" +
	"\x10unlock_type_list\x18\x02 \x03(\v2\".ShowPieceData.UnlockTypeListEntryR\x0eunlockTypeList\x12_\n" +
	"\x17roulette_pos_piece_info\x18\x03 \x03(\v2(.ShowPieceData.RoulettePosPieceInfoEntryR\x14roulettePosPieceInfo\x1aU\n" +
	"\x15OftenUseTypeListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.ShowPieceIdListR\x05value:\x028\x01\x1aS\n" +
	"\x13UnlockTypeListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.ShowPieceIdListR\x05value:\x028\x01\x1aW\n" +
	"\x19RoulettePosPieceInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.ShowPiecePairR\x05value:\x028\x01\"Z\n" +
	"\rShowPiecePair\x12.\n" +
	"\n" +
	"piece_type\x18\x01 \x01(\x0e2\x0f.EShowPieceTypeR\tpieceType\x12\x19\n" +
	"\bpiece_id\x18\x02 \x01(\x05R\apieceId\".\n" +
	"\x0fShowPieceIdList\x12\x1b\n" +
	"\tpiece_ids\x18\x01 \x03(\x05R\bpieceIds\"\x92\x01\n" +
	"\x0eCollectionBook\x12A\n" +
	"\fmod_book_map\x18\x01 \x03(\v2\x1f.CollectionBook.ModBookMapEntryR\n" +
	"modBookMap\x1a=\n" +
	"\x0fModBookMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xaa\x01\n" +
	"\x16NotGetProceedAwardInfo\x12O\n" +
	"\x0eaward_id_times\x18\x01 \x03(\v2).NotGetProceedAwardInfo.AwardIdTimesEntryR\fawardIdTimes\x1a?\n" +
	"\x11AwardIdTimesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\"\x88\x01\n" +
	"\bCookList\x124\n" +
	"\tbook_data\x18\x01 \x03(\v2\x17.CookList.BookDataEntryR\bbookData\x1aF\n" +
	"\rBookDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x1f\n" +
	"\x05value\x18\x02 \x01(\v2\t.CookBookR\x05value:\x028\x01\"+\n" +
	"\bCookBook\x12\x1f\n" +
	"\vcreate_time\x18\x01 \x01(\rR\n" +
	"createTime\"\xc5\x01\n" +
	"\x14TimerRefreshDataList\x12V\n" +
	"\x11refresh_data_list\x18\x01 \x03(\v2*.TimerRefreshDataList.RefreshDataListEntryR\x0frefreshDataList\x1aU\n" +
	"\x14RefreshDataListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.TimerRefreshListR\x05value:\x028\x01\"\xac\x01\n" +
	"\x10TimerRefreshList\x12E\n" +
	"\frefresh_data\x18\x01 \x03(\v2\".TimerRefreshList.RefreshDataEntryR\vrefreshData\x1aQ\n" +
	"\x10RefreshDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.TimerRefreshInfoR\x05value:\x028\x01\">\n" +
	"\x10TimerRefreshInfo\x12*\n" +
	"\x11last_refresh_time\x18\x01 \x01(\x03R\x0flastRefreshTime\"\xec\x02\n" +
	"\x14ChallengeDungeonInfo\x12I\n" +
	"\fdungeon_info\x18\x01 \x03(\v2&.ChallengeDungeonInfo.DungeonInfoEntryR\vdungeonInfo\x12_\n" +
	"\x14dungeon_target_award\x18\x02 \x03(\v2-.ChallengeDungeonInfo.DungeonTargetAwardEntryR\x12dungeonTargetAward\x1aL\n" +
	"\x10DungeonInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.DungeonInfoR\x05value:\x028\x01\x1aZ\n" +
	"\x17DungeonTargetAwardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.DungeonTargetAwardR\x05value:\x028\x01\"\xde\x01\n" +
	"\x12DungeonTargetAward\x12f\n" +
	"\x17dungeon_target_progress\x18\x01 \x03(\v2..DungeonTargetAward.DungeonTargetProgressEntryR\x15dungeonTargetProgress\x1a`\n" +
	"\x1aDungeonTargetProgressEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.DungeonTargetProgressR\x05value:\x028\x01\"\xbc\x01\n" +
	"\rSyncAwardData\x12V\n" +
	"\x14level_up_award_infos\x18\x01 \x03(\v2%.SyncAwardData.LevelUpAwardInfosEntryR\x11levelUpAwardInfos\x1aS\n" +
	"\x16LevelUpAwardInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.LevelUpAwardR\x05value:\x028\x01\"S\n" +
	"\fLevelUpAward\x12\x1d\n" +
	"\n" +
	"drop_times\x18\x01 \x01(\rR\tdropTimes\x12$\n" +
	"\x0elast_drop_time\x18\x02 \x01(\x03R\flastDropTime\"\x8b\x03\n" +
	"\x15SeasonAchievementList\x12i\n" +
	"\x17season_achievement_list\x18\x01 \x03(\v21.SeasonAchievementList.SeasonAchievementListEntryR\x15seasonAchievementList\x12N\n" +
	"\x0ehas_init_dones\x18\x02 \x03(\v2(.SeasonAchievementList.HasInitDonesEntryR\fhasInitDones\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x04R\aversion\x1a\\\n" +
	"\x1aSeasonAchievementListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.SeasonAchievementR\x05value:\x028\x01\x1a?\n" +
	"\x11HasInitDonesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\xc1\x01\n" +
	"\x11SeasonAchievement\x12X\n" +
	"\x12season_achievement\x18\x01 \x03(\v2).SeasonAchievement.SeasonAchievementEntryR\x11seasonAchievement\x1aR\n" +
	"\x16SeasonAchievementEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.AchievementR\x05value:\x028\x01\"v\n" +
	"\vAchievement\x12\x1d\n" +
	"\n" +
	"finish_num\x18\x01 \x01(\rR\tfinishNum\x12!\n" +
	"\fhas_received\x18\x02 \x01(\bR\vhasReceived\x12%\n" +
	"\x0ebegin_progress\x18\x03 \x01(\x04R\rbeginProgress\"\xdb\x01\n" +
	"\x0eSeasonRankList\x12M\n" +
	"\x10season_rank_list\x18\x01 \x03(\v2#.SeasonRankList.SeasonRankListEntryR\x0eseasonRankList\x12&\n" +
	"\x0fshow_armband_id\x18\x02 \x01(\rR\rshowArmbandId\x1aR\n" +
	"\x13SeasonRankListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.SeasonRankInfoR\x05value:\x028\x01\"c\n" +
	"\x0eSeasonRankInfo\x12#\n" +
	"\x0ecur_ran_k_star\x18\x01 \x01(\rR\vcurRanKStar\x12,\n" +
	"\x12received_rank_star\x18\x02 \x03(\rR\x10receivedRankStar\"\xb2\x02\n" +
	"\fSeasonCenter\x12\x1b\n" +
	"\tseason_id\x18\x01 \x01(\x05R\bseasonId\x12,\n" +
	"\vbattle_pass\x18\x02 \x01(\v2\v.BattlePassR\n" +
	"battlePass\x126\n" +
	"\rbp_quest_list\x18\x03 \x01(\v2\x12.SeasonBpQuestListR\vbpQuestList\x12G\n" +
	"\x0eseason_history\x18\x04 \x03(\v2 .SeasonCenter.SeasonHistoryEntryR\rseasonHistory\x1aV\n" +
	"\x12SeasonHistoryEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.SeasonCenterHistoryR\x05value:\x028\x01\"\xf4\x01\n" +
	"\x11SeasonBpQuestList\x12@\n" +
	"\n" +
	"season_map\x18\x01 \x03(\v2!.SeasonBpQuestList.SeasonMapEntryR\tseasonMap\x12\x1d\n" +
	"\n" +
	"random_map\x18\x02 \x03(\rR\trandomMap\x12,\n" +
	"\x12refresh_time_stamp\x18\x03 \x01(\x03R\x10refreshTimeStamp\x1aP\n" +
	"\x0eSeasonMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.SeasonBpQuestDataR\x05value:\x028\x01\"{\n" +
	"\x13SeasonCenterHistory\x12,\n" +
	"\vbattle_pass\x18\x01 \x01(\v2\v.BattlePassR\n" +
	"battlePass\x126\n" +
	"\rbp_quest_list\x18\x02 \x01(\v2\x12.SeasonBpQuestListR\vbpQuestList\"X\n" +
	"\x11SeasonBpQuestData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1d\n" +
	"\n" +
	"target_num\x18\x02 \x01(\x05R\ttargetNum\x12\x14\n" +
	"\x05award\x18\x03 \x01(\x05R\x05award\"\xaf\x03\n" +
	"\x0fSeasonMedalInfo\x12\x1b\n" +
	"\tseason_id\x18\x01 \x01(\rR\bseasonId\x12Q\n" +
	"\x11normal_hole_infos\x18\x02 \x03(\v2%.SeasonMedalInfo.NormalHoleInfosEntryR\x0fnormalHoleInfos\x120\n" +
	"\x0ecore_hole_info\x18\x03 \x01(\v2\n" +
	".MedalHoleR\fcoreHoleInfo\x12X\n" +
	"\x14core_hole_node_infos\x18\x04 \x03(\v2'.SeasonMedalInfo.CoreHoleNodeInfosEntryR\x11coreHoleNodeInfos\x1aN\n" +
	"\x14NormalHoleInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".MedalHoleR\x05value:\x028\x01\x1aP\n" +
	"\x16CoreHoleNodeInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".MedalNodeR\x05value:\x028\x01\"o\n" +
	"\tMedalNode\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\rR\x06nodeId\x12\x1d\n" +
	"\n" +
	"node_level\x18\x02 \x01(\rR\tnodeLevel\x12\x16\n" +
	"\x06choose\x18\x03 \x01(\bR\x06choose\x12\x12\n" +
	"\x04slot\x18\x04 \x01(\x05R\x04slot\"\\\n" +
	"\tMedalHole\x12\x17\n" +
	"\ahole_id\x18\x01 \x01(\rR\x06holeId\x12\x1d\n" +
	"\n" +
	"hole_level\x18\x02 \x01(\rR\tholeLevel\x12\x17\n" +
	"\acur_exp\x18\x03 \x01(\rR\x06curExp\"\xbc\x02\n" +
	"\x11CommunityHomeData\x12!\n" +
	"\fcommunity_id\x18\x01 \x01(\x03R\vcommunityId\x12\x1f\n" +
	"\vhomeland_id\x18\x02 \x01(\x03R\n" +
	"homelandId\x12\x1b\n" +
	"\tbuy_count\x18\x03 \x01(\x05R\bbuyCount\x12R\n" +
	"\x10unlocked_recipes\x18\x04 \x03(\v2'.CommunityHomeData.UnlockedRecipesEntryR\x0funlockedRecipes\x12\x14\n" +
	"\x05level\x18\x05 \x01(\x05R\x05level\x1a\\\n" +
	"\x14UnlockedRecipesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.CommunityHomelandRecipeR\x05value:\x028\x01\")\n" +
	"\x17CommunityHomelandRecipe\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\"\xd5\x03\n" +
	"\x10SeasonActivation\x12\x1b\n" +
	"\tseason_id\x18\x01 \x01(\x05R\bseasonId\x12)\n" +
	"\x10activation_point\x18\x02 \x01(\x05R\x0factivationPoint\x12!\n" +
	"\frefresh_time\x18\x03 \x01(\x05R\vrefreshTime\x12W\n" +
	"\x12activation_targets\x18\x04 \x03(\v2(.SeasonActivation.ActivationTargetsEntryR\x11activationTargets\x12X\n" +
	"\x13stage_reward_status\x18\x05 \x03(\v2(.SeasonActivation.StageRewardStatusEntryR\x11stageRewardStatus\x1a]\n" +
	"\x16ActivationTargetsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.SeasonActivationTargetR\x05value:\x028\x01\x1aD\n" +
	"\x16StageRewardStatusEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xd0\x01\n" +
	"\x16SeasonActivationTarget\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1f\n" +
	"\vtarget_type\x18\x02 \x01(\x05R\n" +
	"targetType\x12\x1f\n" +
	"\vtarget_uuid\x18\x03 \x01(\x05R\n" +
	"targetUuid\x12\x1f\n" +
	"\vreward_rate\x18\x04 \x01(\x05R\n" +
	"rewardRate\x12\x1a\n" +
	"\bprogress\x18\x05 \x01(\x05R\bprogress\x12'\n" +
	"\x0fcompleted_times\x18\x06 \x01(\x05R\x0ecompletedTimes\"s\n" +
	"\x04Slot\x12&\n" +
	"\x05slots\x18\x01 \x03(\v2\x10.Slot.SlotsEntryR\x05slots\x1aC\n" +
	"\n" +
	"SlotsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1f\n" +
	"\x05value\x18\x02 \x01(\v2\t.SlotInfoR\x05value:\x028\x01\"f\n" +
	"\bSlotInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x19\n" +
	"\bskill_id\x18\x02 \x01(\x05R\askillId\x12/\n" +
	"\x14is_auto_battle_close\x18\x03 \x01(\bR\x11isAutoBattleClose\"\xb5\x04\n" +
	"\x0fMonsterHuntInfo\x12Q\n" +
	"\x11monster_hunt_list\x18\x01 \x03(\v2%.MonsterHuntInfo.MonsterHuntListEntryR\x0fmonsterHuntList\x12\x1b\n" +
	"\tcur_level\x18\x02 \x01(\x05R\bcurLevel\x12\x17\n" +
	"\acur_exp\x18\x03 \x01(\x05R\x06curExp\x12N\n" +
	"\x10level_award_flag\x18\x04 \x03(\v2$.MonsterHuntInfo.LevelAwardFlagEntryR\x0elevelAwardFlag\x12d\n" +
	"\x18monster_hunt_refrsh_time\x18\x06 \x03(\v2+.MonsterHuntInfo.MonsterHuntRefrshTimeEntryR\x15monsterHuntRefrshTime\x1aV\n" +
	"\x14MonsterHuntListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.MonsterHuntTargetR\x05value:\x028\x01\x1aA\n" +
	"\x13LevelAwardFlagEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aH\n" +
	"\x1aMonsterHuntRefrshTimeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xdb\x01\n" +
	"\x11MonsterHuntTarget\x12\x1d\n" +
	"\n" +
	"monster_id\x18\x01 \x01(\x05R\tmonsterId\x12P\n" +
	"\x10target_info_list\x18\x02 \x03(\v2&.MonsterHuntTarget.TargetInfoListEntryR\x0etargetInfoList\x1aU\n" +
	"\x13TargetInfoListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.MonsterTargetInfoR\x05value:\x028\x01\"\xb8\x01\n" +
	"\x11MonsterTargetInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1f\n" +
	"\vtarget_uuid\x18\x02 \x01(\x05R\n" +
	"targetUuid\x12\x1f\n" +
	"\vtarget_type\x18\x03 \x01(\x05R\n" +
	"targetType\x12\x1d\n" +
	"\n" +
	"target_num\x18\x04 \x01(\x05R\ttargetNum\x122\n" +
	"\n" +
	"award_flag\x18\x05 \x01(\x0e2\x13.MonsterTargetAwardR\tawardFlag\"\xeb\x01\n" +
	"\x03Mod\x12/\n" +
	"\tmod_slots\x18\x01 \x03(\v2\x12.Mod.ModSlotsEntryR\bmodSlots\x12/\n" +
	"\tmod_infos\x18\x02 \x03(\v2\x12.Mod.ModInfosEntryR\bmodInfos\x1a;\n" +
	"\rModSlotsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aE\n" +
	"\rModInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x1e\n" +
	"\x05value\x18\x02 \x01(\v2\b.ModInfoR\x05value:\x028\x01\"\xad\x01\n" +
	"\aModInfo\x12\x19\n" +
	"\bpart_ids\x18\x01 \x03(\x05R\apartIds\x12>\n" +
	"\x0fupgrade_records\x18\x02 \x03(\v2\x15.ModPartUpgradeRecordR\x0eupgradeRecords\x12!\n" +
	"\fsuccess_rate\x18\x03 \x01(\x05R\vsuccessRate\x12$\n" +
	"\x0einit_link_nums\x18\x04 \x03(\x05R\finitLinkNums\"\x88\x02\n" +
	"\rWorldEventMap\x129\n" +
	"\tevent_map\x18\x01 \x03(\v2\x1c.WorldEventMap.EventMapEntryR\beventMap\x12!\n" +
	"\faccept_count\x18\x02 \x01(\x05R\vacceptCount\x12(\n" +
	"\x10last_update_time\x18\x03 \x01(\x03R\x0elastUpdateTime\x12!\n" +
	"\frefresh_time\x18\x04 \x01(\x03R\vrefreshTime\x1aL\n" +
	"\rEventMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.worldEventDataR\x05value:\x028\x01\"U\n" +
	"\x0eworldEventData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1d\n" +
	"\n" +
	"target_num\x18\x02 \x01(\x05R\ttargetNum\x12\x14\n" +
	"\x05award\x18\x03 \x01(\x05R\x05award\"\xc4\x05\n" +
	"\vFishSetting\x12\x17\n" +
	"\abait_id\x18\x02 \x01(\x05R\x06baitId\x12 \n" +
	"\vexperiences\x18\x03 \x01(\x05R\vexperiences\x12(\n" +
	"\x10research_fish_id\x18\x04 \x01(\x05R\x0eresearchFishId\x12@\n" +
	"\ffish_records\x18\x05 \x03(\v2\x1d.FishSetting.FishRecordsEntryR\vfishRecords\x12S\n" +
	"\x13fish_rod_durability\x18\x06 \x03(\v2#.FishSetting.FishRodDurabilityEntryR\x11fishRodDurability\x12\x19\n" +
	"\brod_uuid\x18\a \x01(\x04R\arodUuid\x12@\n" +
	"\flevel_reward\x18\b \x03(\v2\x1d.FishSetting.LevelRewardEntryR\vlevelReward\x12G\n" +
	"\x0fzero_fish_times\x18\t \x03(\v2\x1f.FishSetting.ZeroFishTimesEntryR\rzeroFishTimes\x1aK\n" +
	"\x10FishRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.FishRecordR\x05value:\x028\x01\x1aD\n" +
	"\x16FishRodDurabilityEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a>\n" +
	"\x10LevelRewardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a@\n" +
	"\x12ZeroFishTimesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xa7\x02\n" +
	"\vFreightData\x12!\n" +
	"\frefresh_time\x18\x01 \x01(\x03R\vrefreshTime\x12\x1f\n" +
	"\vgoods_value\x18\x02 \x01(\x05R\n" +
	"goodsValue\x12\x17\n" +
	"\aset_off\x18\x03 \x01(\bR\x06setOff\x12\x1f\n" +
	"\vcan_receive\x18\x04 \x01(\bR\n" +
	"canReceive\x12\"\n" +
	"\rup_goods_list\x18\x05 \x03(\x05R\vupGoodsList\x12&\n" +
	"\x0fkeep_goods_list\x18\x06 \x03(\x05R\rkeepGoodsList\x12&\n" +
	"\x0fdown_goods_list\x18\a \x03(\x05R\rdownGoodsList\x12&\n" +
	"\x0fcan_reward_time\x18\b \x01(\x03R\rcanRewardTime\"\xc6\x05\n" +
	"\x0eProfessionList\x12*\n" +
	"\x11cur_profession_id\x18\x01 \x01(\x05R\x0fcurProfessionId\x124\n" +
	"\x16cur_assist_professions\x18\x03 \x03(\x05R\x14curAssistProfessions\x12L\n" +
	"\x0fprofession_list\x18\x04 \x03(\v2#.ProfessionList.ProfessionListEntryR\x0eprofessionList\x12T\n" +
	"\x13aoyi_skill_info_map\x18\a \x03(\v2%.ProfessionList.AoyiSkillInfoMapEntryR\x10aoyiSkillInfoMap\x12.\n" +
	"\x13total_talent_points\x18\b \x01(\rR\x11totalTalentPoints\x127\n" +
	"\x18total_talent_reset_count\x18\t \x01(\rR\x15totalTalentResetCount\x12@\n" +
	"\vtalent_list\x18\n" +
	" \x03(\v2\x1f.ProfessionList.TalentListEntryR\n" +
	"talentList\x1aR\n" +
	"\x13ProfessionListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.ProfessionInfoR\x05value:\x028\x01\x1aY\n" +
	"\x15AoyiSkillInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.ProfessionSkillInfoR\x05value:\x028\x01\x1aT\n" +
	"\x0fTalentListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.ProfessionTalentInfoR\x05value:\x028\x01\"\x9b\x01\n" +
	"\x14ProfessionTalentInfo\x12,\n" +
	"\x12used_talent_points\x18\x01 \x01(\rR\x10usedTalentPoints\x12&\n" +
	"\x0ftalent_node_ids\x18\x02 \x03(\rR\rtalentNodeIds\x12-\n" +
	"\x13talent_stage_cfg_id\x18\x04 \x01(\x05R\x10talentStageCfgId\"\xf0\x03\n" +
	"\x0eProfessionInfo\x12#\n" +
	"\rprofession_id\x18\x01 \x01(\x05R\fprofessionId\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x05R\x05level\x12\x1e\n" +
	"\n" +
	"experience\x18\x03 \x01(\x03R\n" +
	"experience\x12G\n" +
	"\x0eskill_info_map\x18\x04 \x03(\v2!.ProfessionInfo.SkillInfoMapEntryR\fskillInfoMap\x12(\n" +
	"\x10active_skill_ids\x18\x06 \x03(\x05R\x0eactiveSkillIds\x12T\n" +
	"\x13slot_skill_info_map\x18\a \x03(\v2%.ProfessionInfo.SlotSkillInfoMapEntryR\x10slotSkillInfoMap\x12\x1e\n" +
	"\vuse_skin_id\x18\b \x01(\x05R\tuseSkinId\x1aU\n" +
	"\x11SkillInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.ProfessionSkillInfoR\x05value:\x028\x01\x1aC\n" +
	"\x15SlotSkillInfoMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xdc\x02\n" +
	"\x13ProfessionSkillInfo\x12\x19\n" +
	"\bskill_id\x18\x01 \x01(\x05R\askillId\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x05R\x05level\x12*\n" +
	"\x11replace_skill_ids\x18\x03 \x03(\x05R\x0freplaceSkillIds\x12#\n" +
	"\rremodel_level\x18\x04 \x01(\x05R\fremodelLevel\x12$\n" +
	"\x0ecur_skill_skin\x18\x05 \x01(\x05R\fcurSkillSkin\x12X\n" +
	"\x12active_skill_skins\x18\x06 \x03(\v2*.ProfessionSkillInfo.ActiveSkillSkinsEntryR\x10activeSkillSkins\x1aC\n" +
	"\x15ActiveSkillSkinsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\x8e\x02\n" +
	"\tTrialRoad\x12\x1b\n" +
	"\tpass_room\x18\x01 \x03(\x05R\bpassRoom\x12K\n" +
	"\x11room_target_award\x18\x02 \x03(\v2\x1f.TrialRoad.RoomTargetAwardEntryR\x0froomTargetAward\x128\n" +
	"\ftarget_award\x18\x03 \x01(\v2\x15.TrialRoadTargetAwardR\vtargetAward\x1a]\n" +
	"\x14RoomTargetAwardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.TrialRoadRoomTargetAwardR\x05value:\x028\x01\"\xc7\x01\n" +
	"\x14TrialRoadTargetAward\x12R\n" +
	"\x0ftarget_progress\x18\x01 \x03(\v2).TrialRoadTargetAward.TargetProgressEntryR\x0etargetProgress\x1a[\n" +
	"\x13TargetProgressEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.TrialRoadTargetProgressR\x05value:\x028\x01\"\xcf\x01\n" +
	"\x18TrialRoadRoomTargetAward\x12V\n" +
	"\x0ftarget_progress\x18\x01 \x03(\v2-.TrialRoadRoomTargetAward.TargetProgressEntryR\x0etargetProgress\x1a[\n" +
	"\x13TargetProgressEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.TrialRoadTargetProgressR\x05value:\x028\x01\"\x80\x01\n" +
	"\x17TrialRoadTargetProgress\x12\x1b\n" +
	"\ttarget_id\x18\x01 \x01(\x05R\btargetId\x12'\n" +
	"\x0ftarget_progress\x18\x02 \x01(\x05R\x0etargetProgress\x12\x1f\n" +
	"\vaward_state\x18\x03 \x01(\x05R\n" +
	"awardState\"\xc9\x02\n" +
	"\tGashaData\x12;\n" +
	"\vgasha_infos\x18\x01 \x03(\v2\x1a.GashaData.GashaInfosEntryR\n" +
	"gashaInfos\x12W\n" +
	"\x15gasha_guarantee_infos\x18\x02 \x03(\v2#.GashaData.GashaGuaranteeInfosEntryR\x13gashaGuaranteeInfos\x1aI\n" +
	"\x0fGashaInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12 \n" +
	"\x05value\x18\x02 \x01(\v2\n" +
	".GashaInfoR\x05value:\x028\x01\x1a[\n" +
	"\x18GashaGuaranteeInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.GashaGuaranteeInfoR\x05value:\x028\x01\"\xac\x02\n" +
	"\x12GashaGuaranteeInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1e\n" +
	"\n" +
	"guaranteex\x18\x02 \x01(\rR\n" +
	"guaranteex\x12\x1e\n" +
	"\n" +
	"guaranteey\x18\x03 \x01(\rR\n" +
	"guaranteey\x126\n" +
	"\x17residue_guarantee_timex\x18\x04 \x01(\x05R\x15residueGuaranteeTimex\x126\n" +
	"\x17residue_guarantee_timey\x18\x05 \x01(\x05R\x15residueGuaranteeTimey\x126\n" +
	"\x17residue_guarantee_timez\x18\x06 \x01(\x05R\x15residueGuaranteeTimez\x12\x1e\n" +
	"\n" +
	"guaranteez\x18\a \x01(\rR\n" +
	"guaranteez\"\x88\x02\n" +
	"\tGashaInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1d\n" +
	"\n" +
	"draw_count\x18\x04 \x01(\rR\tdrawCount\x12!\n" +
	"\frefresh_time\x18\x05 \x01(\x03R\vrefreshTime\x12\x17\n" +
	"\awish_id\x18\b \x01(\rR\x06wishId\x12\x1d\n" +
	"\n" +
	"wish_value\x18\t \x01(\rR\twishValue\x12*\n" +
	"\x11wish_finish_count\x18\n" +
	" \x01(\rR\x0fwishFinishCount\x12&\n" +
	"\x0fwish_reset_time\x18\v \x01(\x03R\rwishResetTime\x12\x1d\n" +
	"\n" +
	"wish_limit\x18\f \x01(\rR\twishLimit\"\xbe\x04\n" +
	"\bShopData\x12=\n" +
	"\frefresh_list\x18\x01 \x03(\v2\x1a.ShopData.RefreshListEntryR\vrefreshList\x12P\n" +
	"\x13normal_shop_records\x18\x02 \x03(\v2 .ShopData.NormalShopRecordsEntryR\x11normalShopRecords\x12P\n" +
	"\x13season_shop_records\x18\x03 \x03(\v2 .ShopData.SeasonShopRecordsEntryR\x11seasonShopRecords\x12K\n" +
	"\x16compensation_item_data\x18\x04 \x01(\v2\x15.ShopCompensationDataR\x14compensationItemData\x1aR\n" +
	"\x10RefreshListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.ShopRefreshRecordR\x05value:\x028\x01\x1aV\n" +
	"\x16NormalShopRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.PlayerBuyRecordR\x05value:\x028\x01\x1aV\n" +
	"\x16SeasonShopRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.PlayerBuyRecordR\x05value:\x028\x01\"\x9f\x01\n" +
	"\x14ShopCompensationData\x126\n" +
	"\x05items\x18\x01 \x03(\v2 .ShopCompensationData.ItemsEntryR\x05items\x1aO\n" +
	"\n" +
	"ItemsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.ShopCompensationInfoR\x05value:\x028\x01\"W\n" +
	"\x14ShopCompensationInfo\x12&\n" +
	"\x0fentor_store_num\x18\x01 \x01(\x03R\rentorStoreNum\x12\x17\n" +
	"\abuy_num\x18\x02 \x01(\x03R\x06buyNum\"L\n" +
	"\x0fPlayerBuyRecord\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12#\n" +
	"\rbuy_timestamp\x18\x03 \x01(\x03R\fbuyTimestamp\"\xa4\x02\n" +
	"\x11ShopRefreshRecord\x12+\n" +
	"\x11refresh_timestamp\x18\x03 \x01(\x03R\x10refreshTimestamp\x12#\n" +
	"\rrefresh_count\x18\x04 \x01(\x05R\frefreshCount\x12\\\n" +
	"\x14shop_refresh_records\x18\x05 \x03(\v2*.ShopRefreshRecord.ShopRefreshRecordsEntryR\x12shopRefreshRecords\x1a_\n" +
	"\x17ShopRefreshRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.PlayerRefreshShopRecordR\x05value:\x028\x01\"/\n" +
	"\x17PlayerRefreshShopRecord\x12\x14\n" +
	"\x05items\x18\x02 \x03(\x05R\x05items\"\x93\x03\n" +
	"\x15PersonalWorldBossInfo\x12\x14\n" +
	"\x05score\x18\x01 \x01(\x05R\x05score\x12T\n" +
	"\x10score_award_info\x18\x02 \x03(\v2*.PersonalWorldBossInfo.ScoreAwardInfoEntryR\x0escoreAwardInfo\x12Q\n" +
	"\x0fboss_award_info\x18\x03 \x03(\v2).PersonalWorldBossInfo.BossAwardInfoEntryR\rbossAwardInfo\x12\x12\n" +
	"\x04uuid\x18\x04 \x01(\x05R\x04uuid\x1aS\n" +
	"\x13ScoreAwardInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.CommonAwardInfoR\x05value:\x028\x01\x1aR\n" +
	"\x12BossAwardInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.CommonAwardInfoR\x05value:\x028\x01\"[\n" +
	"\x0fCommonAwardInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x128\n" +
	"\faward_status\x18\x02 \x01(\x0e2\x15.EReceiveRewardStatusR\vawardStatus\"\x8a\x01\n" +
	"\x11CraftEnergyRecord\x129\n" +
	"\arecords\x18\x01 \x03(\v2\x1f.CraftEnergyRecord.RecordsEntryR\arecords\x1a:\n" +
	"\fRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x9f\x01\n" +
	"\x11WeeklyTowerRecord\x12\x1d\n" +
	"\n" +
	"begin_time\x18\x01 \x01(\x03R\tbeginTime\x12%\n" +
	"\x0fmax_climb_up_id\x18\x02 \x01(\x05R\fmaxClimbUpId\x12+\n" +
	"\x12award_climb_up_ids\x18\x03 \x03(\x05R\x0fawardClimbUpIds\x12\x17\n" +
	"\arule_id\x18\x04 \x01(\x05R\x06ruleId\"\xd4\x03\n" +
	"\rCutSceneInfos\x12I\n" +
	"\x0fcut_scene_infos\x18\x01 \x03(\v2!.CutSceneInfos.CutSceneInfosEntryR\rcutSceneInfos\x12U\n" +
	"\x13finished_cut_scenes\x18\x02 \x03(\v2%.CutSceneInfos.FinishedCutScenesEntryR\x11finishedCutScenes\x12H\n" +
	"\x0efinished_infos\x18\x03 \x03(\v2!.CutSceneInfos.FinishedInfosEntryR\rfinishedInfos\x1aO\n" +
	"\x12CutSceneInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.CutSceneInfoR\x05value:\x028\x01\x1aD\n" +
	"\x16FinishedCutScenesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a@\n" +
	"\x12FinishedInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"\x8a\x01\n" +
	"\fCutSceneInfo\x12 \n" +
	"\fcut_scene_id\x18\x01 \x01(\x05R\n" +
	"cutSceneId\x12\x12\n" +
	"\x04flag\x18\x02 \x01(\rR\x04flag\x12\x19\n" +
	"\bscene_id\x18\x03 \x01(\rR\asceneId\x12)\n" +
	"\n" +
	"event_data\x18\x04 \x01(\v2\n" +
	".EventDataR\teventData\"\x97\x01\n" +
	"\x15UserRecommendPlayData\x12A\n" +
	"\tplay_mail\x18\x01 \x03(\v2$.UserRecommendPlayData.PlayMailEntryR\bplayMail\x1a;\n" +
	"\rPlayMailEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xaa\x02\n" +
	"\bRideList\x12*\n" +
	"\x05rides\x18\x01 \x03(\v2\x14.RideList.RidesEntryR\x05rides\x12&\n" +
	"\x04type\x18\x02 \x01(\x0e2\x12.ERidePropertyTypeR\x04type\x124\n" +
	"\tskin_data\x18\x03 \x03(\v2\x17.RideList.SkinDataEntryR\bskinData\x1aC\n" +
	"\n" +
	"RidesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x1f\n" +
	"\x05value\x18\x02 \x01(\v2\t.RideDataR\x05value:\x028\x01\x1aO\n" +
	"\rSkinDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.RideSkinContainerR\x05value:\x028\x01\"\xb3\x01\n" +
	"\x11RideSkinContainer\x12 \n" +
	"\fride_skin_id\x18\x01 \x01(\x05R\n" +
	"rideSkinId\x123\n" +
	"\x05sinks\x18\x02 \x03(\v2\x1d.RideSkinContainer.SinksEntryR\x05sinks\x1aG\n" +
	"\n" +
	"SinksEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.RideSkinDataR\x05value:\x028\x01\"3\n" +
	"\fRideSkinData\x12#\n" +
	"\ractivate_time\x18\x01 \x01(\x03R\factivateTime\"#\n" +
	"\bRideData\x12\x17\n" +
	"\aride_id\x18\x01 \x01(\x05R\x06rideId\"\x8e\x03\n" +
	"\fPayOrderList\x12$\n" +
	"\x0epay_order_list\x18\x01 \x03(\tR\fpayOrderList\x12&\n" +
	"\x0fpay_refund_list\x18\x02 \x03(\tR\rpayRefundList\x12%\n" +
	"\tfirst_pay\x18\x03 \x01(\v2\b.PayDataR\bfirstPay\x12;\n" +
	"\n" +
	"order_list\x18\x04 \x03(\v2\x1c.PayOrderList.OrderListEntryR\torderList\x12K\n" +
	"\x10order_index_list\x18\x05 \x03(\v2!.PayOrderList.OrderIndexListEntryR\x0eorderIndexList\x1a<\n" +
	"\x0eOrderListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aA\n" +
	"\x13OrderIndexListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x86\x01\n" +
	"\aPayData\x120\n" +
	"\bpay_data\x18\x01 \x03(\v2\x15.PayData.PayDataEntryR\apayData\x1aI\n" +
	"\fPayDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.FirstPayInfoR\x05value:\x028\x01\"R\n" +
	"\fFirstPayInfo\x12$\n" +
	"\x0efirst_pay_type\x18\x01 \x01(\x05R\ffirstPayType\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"\x9d\x06\n" +
	"\x0eLifeProfession\x12L\n" +
	"\x0fprofession_info\x18\x01 \x03(\v2#.LifeProfession.ProfessionInfoEntryR\x0eprofessionInfo\x12M\n" +
	"\x10life_target_info\x18\x02 \x03(\v2#.LifeProfession.LifeTargetInfoEntryR\x0elifeTargetInfo\x12_\n" +
	"\x16life_profession_recipe\x18\x03 \x03(\v2).LifeProfession.LifeProfessionRecipeEntryR\x14lifeProfessionRecipe\x12[\n" +
	"\x1clife_profession_alchemy_info\x18\x04 \x01(\v2\x1a.LifeProfessionAlchemyInfoR\x19lifeProfessionAlchemyInfo\x12C\n" +
	"\fspare_energy\x18\x05 \x03(\v2 .LifeProfession.SpareEnergyEntryR\vspareEnergy\x12\x14\n" +
	"\x05point\x18\x06 \x01(\x05R\x05point\x1aW\n" +
	"\x13ProfessionInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.LifeProfessionBasicR\x05value:\x028\x01\x1a\\\n" +
	"\x13LifeTargetInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12/\n" +
	"\x05value\x18\x02 \x01(\v2\x19.LifeProfessionTargetInfoR\x05value:\x028\x01\x1a^\n" +
	"\x19LifeProfessionRecipeEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12+\n" +
	"\x05value\x18\x02 \x01(\v2\x15.LifeProfessionRecipeR\x05value:\x028\x01\x1a>\n" +
	"\x10SpareEnergyEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x83\x01\n" +
	"\x19LifeProfessionAlchemyInfo\x12#\n" +
	"\rfailure_count\x18\x01 \x01(\rR\ffailureCount\x12\x19\n" +
	"\brd_count\x18\x02 \x01(\rR\ardCount\x12&\n" +
	"\x0flast_reset_time\x18\x03 \x01(\x03R\rlastResetTime\"\xc3\x02\n" +
	"\x13LifeProfessionBasic\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x05R\x05level\x12\x10\n" +
	"\x03exp\x18\x03 \x01(\x05R\x03exp\x12P\n" +
	"\x0especialization\x18\x05 \x03(\v2(.LifeProfessionBasic.SpecializationEntryR\x0especialization\x12@\n" +
	"\x1ccurrent_specialization_point\x18\x06 \x01(\x05R\x1acurrentSpecializationPoint\x1a`\n" +
	"\x13SpecializationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.LiftProfessionSpecializationR\x05value:\x028\x01\"D\n" +
	"\x1cLiftProfessionSpecialization\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x05R\x05level\"G\n" +
	"\x14LifeProfessionRecipe\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1f\n" +
	"\vunlock_time\x18\x02 \x01(\x03R\n" +
	"unlockTime\"\x91\x01\n" +
	"\x18LifeProfessionTargetInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value\x12\x14\n" +
	"\x05level\x18\x03 \x01(\x05R\x05level\x129\n" +
	"\x19life_target_reward_states\x18\x04 \x03(\rR\x16lifeTargetRewardStates\"\xcb\x01\n" +
	"\x12LifeProfessionWork\x12R\n" +
	"\x19life_profession_work_info\x18\x01 \x01(\v2\x17.LifeProfessionWorkInfoR\x16lifeProfessionWorkInfo\x12a\n" +
	"!life_profession_work_history_info\x18\x02 \x03(\v2\x17.LifeProfessionWorkInfoR\x1dlifeProfessionWorkHistoryInfo\"\xe2\x01\n" +
	"\x16LifeProfessionWorkInfo\x12,\n" +
	"\x12life_profession_id\x18\x01 \x01(\rR\x10lifeProfessionId\x12\x1d\n" +
	"\n" +
	"begin_time\x18\x02 \x01(\rR\tbeginTime\x12\x19\n" +
	"\bend_time\x18\x03 \x01(\rR\aendTime\x12\x14\n" +
	"\x05count\x18\x04 \x01(\rR\x05count\x12\x12\n" +
	"\x04cost\x18\x05 \x01(\rR\x04cost\x12\x1d\n" +
	"\x06reward\x18\x06 \x03(\v2\x05.ItemR\x06reward\x12\x17\n" +
	"\acost_id\x18\a \x01(\rR\x06costId\"\xa7\x01\n" +
	"\x10UserActivityList\x12A\n" +
	"\n" +
	"activities\x18\x01 \x03(\v2!.UserActivityList.ActivitiesEntryR\n" +
	"activities\x1aP\n" +
	"\x0fActivitiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.UserActivityInfoR\x05value:\x028\x01\"\xdb\x01\n" +
	"\x10UserActivityInfo\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\x04R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x03 \x01(\x04R\aendTime\x128\n" +
	"\arewards\x18\x04 \x03(\v2\x1e.UserActivityInfo.RewardsEntryR\arewards\x1aS\n" +
	"\fRewardsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.UserActivityRewardInfoR\x05value:\x028\x01\"\xd7\x01\n" +
	"\x16UserActivityRewardInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x16\n" +
	"\x06status\x18\x02 \x01(\rR\x06status\x12D\n" +
	"\tfunctions\x18\x03 \x03(\v2&.UserActivityRewardInfo.FunctionsEntryR\tfunctions\x1aO\n" +
	"\x0eFunctionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.GameFunctionDataR\x05value:\x028\x01\"\xf9\x01\n" +
	"\x10GameFunctionData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x14\n" +
	"\x05state\x18\x02 \x01(\bR\x05state\x12\x1d\n" +
	"\n" +
	"product_id\x18\x03 \x01(\rR\tproductId\x12K\n" +
	"\x0efunction_times\x18\x04 \x03(\v2$.GameFunctionData.FunctionTimesEntryR\rfunctionTimes\x1aS\n" +
	"\x12FunctionTimesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.FunctionTimeDataR\x05value:\x028\x01\"F\n" +
	"\x10FunctionTimeData\x12\x14\n" +
	"\x05times\x18\x01 \x01(\rR\x05times\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\rR\ttimestamp\"\xbd\x01\n" +
	"\fPlayerRecord\x12T\n" +
	"\x13player_record_infos\x18\x01 \x03(\v2$.PlayerRecord.PlayerRecordInfosEntryR\x11playerRecordInfos\x1aW\n" +
	"\x16PlayerRecordInfosEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.PlayerRecordInfoR\x05value:\x028\x01\"\xb6\x01\n" +
	"\x10PlayerRecordInfo\x12K\n" +
	"\x0eplayer_records\x18\x01 \x03(\v2$.PlayerRecordInfo.PlayerRecordsEntryR\rplayerRecords\x1aU\n" +
	"\x12PlayerRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.PlayerRecordSingleR\x05value:\x028\x01\"\x85\x01\n" +
	"\x12PlayerRecordSingle\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\x12\x1f\n" +
	"\vcycle_count\x18\x03 \x01(\x03R\n" +
	"cycleCount\x12\x1d\n" +
	"\n" +
	"cycle_time\x18\x04 \x01(\x03R\tcycleTime\"\xf5\x02\n" +
	"\x11DropContainerInfo\x12O\n" +
	"\x0fdrop_containers\x18\x01 \x03(\v2&.DropContainerInfo.DropContainersEntryR\x0edropContainers\x12\\\n" +
	"\x14drop_award_histories\x18\x02 \x03(\v2*.DropContainerInfo.DropAwardHistoriesEntryR\x12dropAwardHistories\x1aW\n" +
	"\x13DropContainersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.DropContainerSingleR\x05value:\x028\x01\x1aX\n" +
	"\x17DropAwardHistoriesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.DropAwardHistoryR\x05value:\x028\x01\"\x7f\n" +
	"\x13DropContainerSingle\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x1d\n" +
	"\n" +
	"cycle_time\x18\x03 \x01(\x03R\tcycleTime\x12#\n" +
	"\rhistory_count\x18\x04 \x01(\x05R\fhistoryCount\"W\n" +
	"\x10DropAwardHistory\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x1d\n" +
	"\n" +
	"cycle_time\x18\x03 \x01(\x03R\tcycleTime\"\xa3\x04\n" +
	"\vMonthlyCard\x12\x1f\n" +
	"\vexpire_time\x18\x01 \x01(\x03R\n" +
	"expireTime\x12M\n" +
	"\x11monthly_card_info\x18\x02 \x03(\v2!.MonthlyCard.MonthlyCardInfoEntryR\x0fmonthlyCardInfo\x12>\n" +
	"\x1clast_award_monthly_card_time\x18\x03 \x01(\x05R\x18lastAwardMonthlyCardTime\x12!\n" +
	"\ftips_clicked\x18\x04 \x01(\x05R\vtipsClicked\x12\x19\n" +
	"\btips_day\x18\x05 \x01(\x05R\atipsDay\x12\x1b\n" +
	"\x05items\x18\x06 \x03(\v2\x05.ItemR\x05items\x12W\n" +
	"\x15monthly_card_buy_list\x18\a \x03(\v2$.MonthlyCard.MonthlyCardBuyListEntryR\x12monthlyCardBuyList\x1aT\n" +
	"\x14MonthlyCardInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.MonthlyCardInfoR\x05value:\x028\x01\x1aZ\n" +
	"\x17MonthlyCardBuyListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.MonthlyCardBuyListR\x05value:\x028\x01\"\x82\x02\n" +
	"\x0fMonthlyCardInfo\x12C\n" +
	"\x12limit_award_status\x18\x01 \x01(\x0e2\x15.EReceiveRewardStatusR\x10limitAwardStatus\x128\n" +
	"\faward_status\x18\x02 \x01(\x0e2\x15.EReceiveRewardStatusR\vawardStatus\x126\n" +
	"\x0fmonth_card_item\x18\x03 \x01(\v2\x0e.MonthCardItemR\rmonthCardItem\x12\x1d\n" +
	"\n" +
	"begin_time\x18\x04 \x01(\x03R\tbeginTime\x12\x19\n" +
	"\bend_time\x18\x05 \x01(\x03R\aendTime\"I\n" +
	"\rMonthCardItem\x12\x17\n" +
	"\aitem_id\x18\x01 \x01(\x05R\x06itemId\x12\x1f\n" +
	"\vcreate_time\x18\x02 \x01(\x03R\n" +
	"createTime\"}\n" +
	"\x12MonthlyCardBuyList\x12\x1d\n" +
	"\n" +
	"begin_time\x18\x01 \x01(\x03R\tbeginTime\x12\x19\n" +
	"\bend_time\x18\x02 \x01(\x03R\aendTime\x12-\n" +
	"\x13last_award_day_time\x18\x03 \x01(\x03R\x10lastAwardDayTime\"\xd0\x05\n" +
	"\x0eFashionBenefit\x12$\n" +
	"\x0elast_reward_id\x18\x01 \x01(\x05R\flastRewardId\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x05R\x05level\x12\x1f\n" +
	"\vpoints_task\x18\x03 \x01(\x05R\n" +
	"pointsTask\x12!\n" +
	"\fpoints_cycle\x18\x04 \x01(\x05R\vpointsCycle\x12+\n" +
	"\x11points_collection\x18\x05 \x01(\x05R\x10pointsCollection\x12:\n" +
	"\ttask_list\x18\x06 \x03(\v2\x1d.FashionBenefit.TaskListEntryR\btaskList\x12O\n" +
	"\x12collection_history\x18\a \x03(\v2 .FashionBenefitCollectionHistoryR\x11collectionHistory\x12*\n" +
	"\x11next_refresh_time\x18\b \x01(\x03R\x0fnextRefreshTime\x12\x1d\n" +
	"\n" +
	"max_points\x18\t \x01(\x05R\tmaxPoints\x12\"\n" +
	"\rlast_add_time\x18\n" +
	" \x01(\x03R\vlastAddTime\x12+\n" +
	"\x12cur_day_max_points\x18\v \x01(\x05R\x0fcurDayMaxPoints\x12!\n" +
	"\fexpire_cycle\x18\f \x01(\x05R\vexpireCycle\x12\x1d\n" +
	"\n" +
	"last_level\x18\r \x01(\x05R\tlastLevel\x12(\n" +
	"\x10firt_expire_time\x18\x0e \x01(\x03R\x0efirtExpireTime\x12&\n" +
	"\x0flast_reward_ids\x18\x0f \x03(\x05R\rlastRewardIds\x1aT\n" +
	"\rTaskListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.FashionBenefitTaskInfoR\x05value:\x028\x01\"\x86\x01\n" +
	"\x1fFashionBenefitCollectionHistory\x12\x1d\n" +
	"\n" +
	"fashion_id\x18\x01 \x01(\x05R\tfashionId\x12\x12\n" +
	"\x04time\x18\x02 \x01(\x03R\x04time\x12\x12\n" +
	"\x04type\x18\x03 \x01(\x05R\x04type\x12\x1c\n" +
	"\tparameter\x18\x04 \x01(\x05R\tparameter\"Z\n" +
	"\x16FashionBenefitTaskInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count\x12\x1a\n" +
	"\bprogress\x18\x03 \x01(\x05R\bprogress\"\xc1\x01\n" +
	"\fItemCurrency\x12\x17\n" +
	"\ais_init\x18\x01 \x01(\bR\x06isInit\x12G\n" +
	"\x0ecurrency_datas\x18\x02 \x03(\v2 .ItemCurrency.CurrencyDatasEntryR\rcurrencyDatas\x1aO\n" +
	"\x12CurrencyDatasEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12#\n" +
	"\x05value\x18\x02 \x01(\v2\r.CurrencyDataR\x05value:\x028\x01\"A\n" +
	"\fCurrencyData\x12\x1b\n" +
	"\tconfig_id\x18\x01 \x01(\x05R\bconfigId\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x03R\x05count\"\x93\x03\n" +
	"\x13PrivilegeEffectData\x12$\n" +
	"\x0enormal_pass_id\x18\x01 \x01(\x05R\fnormalPassId\x12\"\n" +
	"\rprime_pass_id\x18\x02 \x01(\x05R\vprimePassId\x12V\n" +
	"\x12normal_pass_id_map\x18\x03 \x03(\v2).PrivilegeEffectData.NormalPassIdMapEntryR\x0fnormalPassIdMap\x12S\n" +
	"\x11prime_pass_id_map\x18\x04 \x03(\v2(.PrivilegeEffectData.PrimePassIdMapEntryR\x0eprimePassIdMap\x1aB\n" +
	"\x14NormalPassIdMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1aA\n" +
	"\x13PrimePassIdMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"9\n" +
	"\x11SyncContainerData\x12$\n" +
	"\x05VData\x18\x01 \x01(\v2\x0e.CharSerializeR\x05VData\"\x88(\n" +
	"\rCharSerialize\x12\x17\n" +
	"\achar_id\x18\x01 \x01(\x03R\x06charId\x12*\n" +
	"\tchar_base\x18\x02 \x01(\v2\r.CharBaseInfoR\bcharBase\x12)\n" +
	"\n" +
	"scene_data\x18\x03 \x01(\v2\n" +
	".SceneDataR\tsceneData\x123\n" +
	"\x0escene_lua_data\x18\x04 \x01(\v2\r.SceneLuaDataR\fsceneLuaData\x12/\n" +
	"\fpioneer_data\x18\x05 \x01(\v2\f.PioneerDataR\vpioneerData\x12(\n" +
	"\tbuff_info\x18\x06 \x01(\v2\v.BuffDBInfoR\bbuffInfo\x12/\n" +
	"\fitem_package\x18\a \x01(\v2\f.ItemPackageR\vitemPackage\x12-\n" +
	"\n" +
	"quest_list\x18\b \x01(\v2\x0e.QuestDataListR\tquestList\x12/\n" +
	"\fsetting_data\x18\t \x01(\v2\f.SettingDataR\vsettingData\x12&\n" +
	"\tmisc_info\x18\n" +
	" \x01(\v2\t.MiscInfoR\bmiscInfo\x124\n" +
	"\x0eexchange_items\x18\v \x01(\v2\r.ExchangeItemR\rexchangeItems\x12 \n" +
	"\x05equip\x18\f \x01(\v2\n" +
	".EquipListR\x05equip\x12,\n" +
	"\venergy_item\x18\r \x01(\v2\v.EnergyItemR\n" +
	"energyItem\x12#\n" +
	"\bmap_data\x18\x0e \x01(\v2\b.MapDataR\amapData\x12/\n" +
	"\fdungeon_list\x18\x0f \x01(\v2\f.DungeonListR\vdungeonList\x12\"\n" +
	"\x04attr\x18\x10 \x01(\v2\x0e.UserFightAttrR\x04attr\x12%\n" +
	"\afashion\x18\x11 \x01(\v2\v.FashionMgrR\afashion\x12/\n" +
	"\fprofile_list\x18\x12 \x01(\v2\f.ProfileListR\vprofileList\x12\x1f\n" +
	"\x04help\x18\x13 \x01(\v2\v.PlayHelperR\x04help\x12/\n" +
	"\fcounter_list\x18\x14 \x01(\v2\f.CounterListR\vcounterList\x122\n" +
	"\fpersonal_obj\x18\x15 \x01(\v2\x0f.PersonalObjectR\vpersonalObj\x12)\n" +
	"\n" +
	"role_level\x18\x16 \x01(\v2\n" +
	".RoleLevelR\troleLevel\x12\x1c\n" +
	"\x05pivot\x18\x17 \x01(\v2\x06.PivotR\x05pivot\x125\n" +
	"\x0etransfer_point\x18\x18 \x01(\v2\x0e.TransferPointR\rtransferPoint\x122\n" +
	"\rplanet_memory\x18\x19 \x01(\v2\r.PlanetMemoryR\fplanetMemory\x12?\n" +
	"\x14planet_memory_target\x18\x1a \x01(\v2\r.SeasonTargetR\x12planetMemoryTarget\x12$\n" +
	"\ared_dot\x18\x1b \x01(\v2\v.RedDotDataR\x06redDot\x12(\n" +
	"\tresonance\x18\x1c \x01(\v2\n" +
	".ResonanceR\tresonance\x12)\n" +
	"\n" +
	"cuts_state\x18\x1d \x01(\v2\n" +
	".CutsStateR\tcutsState\x12;\n" +
	"\x10investigate_list\x18\x1e \x01(\v2\x10.InvestigateListR\x0finvestigateList\x12,\n" +
	"\arecords\x18\x1f \x01(\v2\x12.ParkourRecordListR\arecords\x122\n" +
	"\vinteraction\x18  \x01(\v2\x10.InteractionInfoR\vinteraction\x12<\n" +
	"\x11season_quest_list\x18! \x01(\v2\x10.SeasonQuestListR\x0fseasonQuestList\x12&\n" +
	"\trole_face\x18\" \x01(\v2\t.RoleFaceR\broleFace\x124\n" +
	"\rmap_book_list\x18# \x01(\v2\x10.MapBookInfoListR\vmapBookList\x122\n" +
	"\rfunction_data\x18$ \x01(\v2\r.FunctionDataR\ffunctionData\x12/\n" +
	"\tanti_info\x18% \x01(\v2\x12.AntiAddictionInfoR\bantiInfo\x12E\n" +
	"\x14monster_explore_list\x18& \x01(\v2\x13.MonsterExploreListR\x12monsterExploreList\x126\n" +
	"\x0fshow_piece_data\x18' \x01(\v2\x0e.ShowPieceDataR\rshowPieceData\x128\n" +
	"\x0fcollection_book\x18* \x01(\v2\x0f.CollectionBookR\x0ecollectionBook\x12U\n" +
	"\x1bnot_get_proceed_award_times\x18+ \x01(\v2\x17.NotGetProceedAwardInfoR\x17notGetProceedAwardTimes\x12&\n" +
	"\tcook_list\x18, \x01(\v2\t.CookListR\bcookList\x12A\n" +
	"\x11refresh_data_list\x18- \x01(\v2\x15.TimerRefreshDataListR\x0frefreshDataList\x12K\n" +
	"\x16challenge_dungeon_info\x18. \x01(\v2\x15.ChallengeDungeonInfoR\x14challengeDungeonInfo\x126\n" +
	"\x0fsync_award_data\x18/ \x01(\v2\x0e.SyncAwardDataR\rsyncAwardData\x12N\n" +
	"\x17season_achievement_list\x180 \x01(\v2\x16.SeasonAchievementListR\x15seasonAchievementList\x129\n" +
	"\x10season_rank_list\x181 \x01(\v2\x0f.SeasonRankListR\x0eseasonRankList\x122\n" +
	"\rseason_center\x182 \x01(\v2\r.SeasonCenterR\fseasonCenter\x122\n" +
	"\rpersonal_zone\x183 \x01(\v2\r.PersonalZoneR\fpersonalZone\x12<\n" +
	"\x11season_medal_info\x184 \x01(\v2\x10.SeasonMedalInfoR\x0fseasonMedalInfo\x12B\n" +
	"\x13community_home_info\x185 \x01(\v2\x12.CommunityHomeDataR\x11communityHomeInfo\x12>\n" +
	"\x11season_activation\x186 \x01(\v2\x11.SeasonActivationR\x10seasonActivation\x12\x1b\n" +
	"\x05slots\x187 \x01(\v2\x05.SlotR\x05slots\x12<\n" +
	"\x11monster_hunt_info\x188 \x01(\v2\x10.MonsterHuntInfoR\x0fmonsterHuntInfo\x12\x16\n" +
	"\x03mod\x189 \x01(\v2\x04.ModR\x03mod\x126\n" +
	"\x0fworld_event_map\x18: \x01(\v2\x0e.WorldEventMapR\rworldEventMap\x12/\n" +
	"\ffish_setting\x18; \x01(\v2\f.FishSettingR\vfishSetting\x12/\n" +
	"\ffreight_data\x18< \x01(\v2\f.FreightDataR\vfreightData\x128\n" +
	"\x0fprofession_list\x18= \x01(\v2\x0f.ProfessionListR\x0eprofessionList\x12)\n" +
	"\n" +
	"trial_road\x18> \x01(\v2\n" +
	".TrialRoadR\ttrialRoad\x12)\n" +
	"\n" +
	"gasha_data\x18? \x01(\v2\n" +
	".GashaDataR\tgashaData\x12&\n" +
	"\tshop_data\x18@ \x01(\v2\t.ShopDataR\bshopData\x12O\n" +
	"\x18personal_world_boss_info\x18A \x01(\v2\x16.PersonalWorldBossInfoR\x15personalWorldBossInfo\x125\n" +
	"\fcraft_energy\x18B \x01(\v2\x12.CraftEnergyRecordR\vcraftEnergy\x125\n" +
	"\fweekly_tower\x18C \x01(\v2\x12.WeeklyTowerRecordR\vweeklyTower\x126\n" +
	"\x0fcut_scene_infos\x18D \x01(\v2\x0e.CutSceneInfosR\rcutSceneInfos\x12F\n" +
	"\x13recommend_play_data\x18E \x01(\v2\x16.UserRecommendPlayDataR\x11recommendPlayData\x12&\n" +
	"\tride_list\x18F \x01(\v2\t.RideListR\brideList\x123\n" +
	"\x0epay_order_list\x18G \x01(\v2\r.PayOrderListR\fpayOrderList\x128\n" +
	"\x0flife_profession\x18H \x01(\v2\x0f.LifeProfessionR\x0elifeProfession\x12E\n" +
	"\x14life_profession_work\x18I \x01(\v2\x13.LifeProfessionWorkR\x12lifeProfessionWork\x12?\n" +
	"\x12user_activity_list\x18J \x01(\v2\x11.UserActivityListR\x10userActivityList\x122\n" +
	"\rplayer_record\x18K \x01(\v2\r.PlayerRecordR\fplayerRecord\x129\n" +
	"\x0edrop_container\x18L \x01(\v2\x12.DropContainerInfoR\rdropContainer\x12/\n" +
	"\fmonthly_card\x18M \x01(\v2\f.MonthlyCardR\vmonthlyCard\x128\n" +
	"\x0ffashion_benefit\x18N \x01(\v2\x0f.FashionBenefitR\x0efashionBenefit\x122\n" +
	"\ritem_currency\x18O \x01(\v2\r.ItemCurrencyR\fitemCurrency\x12H\n" +
	"\x15privilege_effect_data\x18P \x01(\v2\x14.PrivilegeEffectDataR\x13privilegeEffectData\x12%\n" +
	"\btreasure\x18Q \x01(\v2\t.TreasureR\btreasure\x12<\n" +
	"\x11unlock_emoji_data\x18R \x01(\v2\x10.UnlockEmojiDataR\x0funlockEmojiData\x12X\n" +
	"\x1bplayer_order_comtainer_info\x18S \x01(\v2\x19.PlayerOrderComtainerInfoR\x18playerOrderComtainerInfo\x12)\n" +
	"\n" +
	"player_box\x18T \x01(\v2\n" +
	".PlayerBoxR\tplayerBox\x12H\n" +
	"\x15launch_privilege_data\x18U \x01(\v2\x14.LaunchPrivilegeDataR\x13launchPrivilegeData\x129\n" +
	"\x10battle_pass_data\x18V \x01(\v2\x0f.BattlePassDataR\x0ebattlePassData\x122\n" +
	"\rrecharge_data\x18W \x01(\v2\r.RechargeDataR\frechargeData\x126\n" +
	"\x0flucky_value_mgr\x18X \x01(\v2\x0e.LuckyValueMgrR\rluckyValueMgr\x122\n" +
	"\rhandbook_data\x18Y \x01(\v2\r.HandbookDataR\fhandbookData\x12O\n" +
	"\x18master_mode_dungeon_info\x18Z \x01(\v2\x16.MasterModeDungeonInfoR\x15masterModeDungeonInfo\x128\n" +
	"\x0fstatistics_data\x18[ \x01(\v2\x0f.StatisticsDataR\x0estatisticsData\x12N\n" +
	"\x16compenstion_statistics\x18\\ \x01(\v2\x17.CompensationStatisticsR\x15compenstionStatistics\x126\n" +
	"\x0fbubble_act_data\x18] \x01(\v2\x0e.BubbleActDataR\rbubbleActData\x12<\n" +
	"\x11mail_claimed_info\x18^ \x01(\v2\x10.MailClaimedInfoR\x0fmailClaimedInfo\x12,\n" +
	"\vnewbie_data\x18_ \x01(\v2\v.NewbieDataR\n" +
	"newbieData\x12,\n" +
	"\vfight_point\x18` \x01(\v2\v.FightPointR\n" +
	"fightPoint\x12\x1d\n" +
	"\x04sign\x18a \x01(\v2\t.SignInfoR\x04sign\x12E\n" +
	"\x14char_statistics_data\x18b \x01(\v2\x13.CharStatisticsDataR\x12charStatisticsData\"\xde\x03\n" +
	"\bTreasure\x12'\n" +
	"\x04rows\x18\x01 \x03(\v2\x13.Treasure.RowsEntryR\x04rows\x12=\n" +
	"\fhistory_rows\x18\x02 \x03(\v2\x1a.Treasure.HistoryRowsEntryR\vhistoryRows\x12\x12\n" +
	"\x04flag\x18\x03 \x01(\bR\x04flag\x12!\n" +
	"\frefresh_time\x18\x04 \x01(\x03R\vrefreshTime\x12'\n" +
	"\x0fselected_reward\x18\x05 \x03(\x05R\x0eselectedReward\x12\x1b\n" +
	"\tseason_id\x18\x06 \x01(\x05R\bseasonId\x12$\n" +
	"\x0elast_season_id\x18\a \x01(\x05R\flastSeasonId\x12*\n" +
	"\x11last_refresh_time\x18\b \x01(\x03R\x0flastRefreshTime\x1aI\n" +
	"\tRowsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.TreasureItemRowR\x05value:\x028\x01\x1aP\n" +
	"\x10HistoryRowsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12&\n" +
	"\x05value\x18\x02 \x01(\v2\x10.TreasureItemRowR\x05value:\x028\x01\"\xe0\x02\n" +
	"\x0fTreasureItemRow\x12\x1b\n" +
	"\tconfig_id\x18\x01 \x01(\x05R\bconfigId\x12D\n" +
	"\fmain_targets\x18\x02 \x03(\v2!.TreasureItemRow.MainTargetsEntryR\vmainTargets\x12A\n" +
	"\vsub_targets\x18\x03 \x03(\v2 .TreasureItemRow.SubTargetsEntryR\n" +
	"subTargets\x1aS\n" +
	"\x10MainTargetsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.TreasureItemTargetR\x05value:\x028\x01\x1aR\n" +
	"\x0fSubTargetsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.TreasureItemTargetR\x05value:\x028\x01\"w\n" +
	"\x12TreasureItemTarget\x12\x1b\n" +
	"\ttarget_id\x18\x01 \x01(\x05R\btargetId\x12\x1d\n" +
	"\n" +
	"target_num\x18\x02 \x01(\x05R\ttargetNum\x12%\n" +
	"\x06reward\x18\x03 \x01(\v2\r.TreasureItemR\x06reward\"?\n" +
	"\fTreasureItem\x12\x1b\n" +
	"\x05items\x18\x01 \x03(\v2\x05.ItemR\x05items\x12\x12\n" +
	"\x04type\x18\x02 \x01(\x05R\x04type\"\x8a\x06\n" +
	"\x04Item\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\x03R\x04uuid\x12\x1b\n" +
	"\tconfig_id\x18\x02 \x01(\x05R\bconfigId\x12\x14\n" +
	"\x05count\x18\x03 \x01(\x03R\x05count\x12\x18\n" +
	"\ainvalid\x18\x04 \x01(\x05R\ainvalid\x12+\n" +
	"\tbind_flag\x18\x05 \x01(\x0e2\x0e.EItemBindFlagR\bbindFlag\x12\x1f\n" +
	"\vcreate_time\x18\x06 \x01(\x03R\n" +
	"createTime\x12\x1f\n" +
	"\vexpire_time\x18\a \x01(\x03R\n" +
	"expireTime\x12\x17\n" +
	"\aopt_src\x18\b \x01(\x05R\x06optSrc\x12\x18\n" +
	"\aquality\x18\t \x01(\x05R\aquality\x12)\n" +
	"\n" +
	"equip_attr\x18\n" +
	" \x01(\v2\n" +
	".EquipAttrR\tequipAttr\x12#\n" +
	"\bmod_attr\x18\v \x01(\v2\b.ModAttrR\amodAttr\x121\n" +
	"\x15cool_down_expire_time\x18\f \x01(\x03R\x12coolDownExpireTime\x12-\n" +
	"\fmod_new_attr\x18\r \x01(\v2\v.ModNewAttrR\n" +
	"modNewAttr\x12)\n" +
	"\n" +
	"affix_data\x18\x0e \x01(\v2\n" +
	".AffixDataR\taffixData\x126\n" +
	"\vextend_attr\x18\x0f \x03(\v2\x15.Item.ExtendAttrEntryR\n" +
	"extendAttr\x12\x1b\n" +
	"\treward_id\x18\x10 \x01(\x05R\brewardId\x12<\n" +
	"\rgene_sequence\x18\x11 \x03(\v2\x17.Item.GeneSequenceEntryR\fgeneSequence\x1aN\n" +
	"\x0fExtendAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.ItemExtendDataR\x05value:\x028\x01\x1a?\n" +
	"\x11GeneSequenceEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"(\n" +
	"\tAffixData\x12\x1b\n" +
	"\taffix_ids\x18\x01 \x03(\x05R\baffixIds\"6\n" +
	"\x0eItemExtendData\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value\"i\n" +
	"\n" +
	"ModNewAttr\x12\x1b\n" +
	"\tmod_parts\x18\x01 \x03(\x05R\bmodParts\x12>\n" +
	"\x0fupgrade_records\x18\x02 \x03(\v2\x15.ModPartUpgradeRecordR\x0eupgradeRecords\"N\n" +
	"\x14ModPartUpgradeRecord\x12\x17\n" +
	"\apart_id\x18\x01 \x01(\x05R\x06partId\x12\x1d\n" +
	"\n" +
	"is_success\x18\x02 \x01(\bR\tisSuccess\"\x82\x01\n" +
	"\aModAttr\x12\x1b\n" +
	"\tload_flag\x18\x01 \x01(\x05R\bloadFlag\x12\x12\n" +
	"\x04type\x18\x02 \x01(\x05R\x04type\x12\x14\n" +
	"\x05level\x18\x03 \x01(\x05R\x05level\x120\n" +
	"\rmod_attr_info\x18\x04 \x03(\v2\f.ModAttrInfoR\vmodAttrInfo\"\xd9\x01\n" +
	"\vModAttrInfo\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\x05R\x02id\x12\x14\n" +
	"\x05value\x18\x03 \x01(\x05R\x05value\x12L\n" +
	"\x10effect_parameter\x18\x04 \x03(\v2!.ModAttrInfo.EffectParameterEntryR\x0feffectParameter\x1aB\n" +
	"\x14EffectParameterEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc4\a\n" +
	"\tEquipAttr\x128\n" +
	"\n" +
	"base_attrs\x18\x04 \x03(\v2\x19.EquipAttr.BaseAttrsEntryR\tbaseAttrs\x12)\n" +
	"\x10perfection_value\x18\a \x01(\x05R\x0fperfectionValue\x12!\n" +
	"\frecast_count\x18\b \x01(\x05R\vrecastCount\x12,\n" +
	"\x12total_recast_count\x18\t \x01(\x05R\x10totalRecastCount\x128\n" +
	"\n" +
	"basic_attr\x18\n" +
	" \x03(\v2\x19.EquipAttr.BasicAttrEntryR\tbasicAttr\x12>\n" +
	"\fadvance_attr\x18\v \x03(\v2\x1b.EquipAttr.AdvanceAttrEntryR\vadvanceAttr\x12;\n" +
	"\vrecast_attr\x18\f \x03(\v2\x1a.EquipAttr.RecastAttrEntryR\n" +
	"recastAttr\x12)\n" +
	"\x10perfection_level\x18\r \x01(\x05R\x0fperfectionLevel\x12K\n" +
	"\x11rare_quality_attr\x18\x0e \x03(\v2\x1f.EquipAttr.RareQualityAttrEntryR\x0frareQualityAttr\x120\n" +
	"\x14max_perfection_value\x18\x0f \x01(\x05R\x12maxPerfectionValue\x123\n" +
	"\x0eequip_attr_set\x18\x11 \x01(\v2\r.EquipAttrSetR\fequipAttrSet\x12,\n" +
	"\x12break_through_time\x18\x12 \x01(\x05R\x10breakThroughTime\x1a<\n" +
	"\x0eBaseAttrsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a<\n" +
	"\x0eBasicAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a>\n" +
	"\x10AdvanceAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fRecastAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aB\n" +
	"\x14RareQualityAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x9f\x04\n" +
	"\fEquipAttrSet\x12;\n" +
	"\n" +
	"basic_attr\x18\x01 \x03(\v2\x1c.EquipAttrSet.BasicAttrEntryR\tbasicAttr\x12A\n" +
	"\fadvance_attr\x18\x02 \x03(\v2\x1e.EquipAttrSet.AdvanceAttrEntryR\vadvanceAttr\x12>\n" +
	"\vrecast_attr\x18\x03 \x03(\v2\x1d.EquipAttrSet.RecastAttrEntryR\n" +
	"recastAttr\x12N\n" +
	"\x11rare_quality_attr\x18\x04 \x03(\v2\".EquipAttrSet.RareQualityAttrEntryR\x0frareQualityAttr\x1a<\n" +
	"\x0eBasicAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a>\n" +
	"\x10AdvanceAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a=\n" +
	"\x0fRecastAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1aB\n" +
	"\x14RareQualityAttrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x8f\x01\n" +
	"\x0fUnlockEmojiData\x12>\n" +
	"\n" +
	"unlock_map\x18\x01 \x03(\v2\x1f.UnlockEmojiData.UnlockMapEntryR\tunlockMap\x1a<\n" +
	"\x0eUnlockMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"0\n" +
	"\x18PlayerOrderComtainerInfo\x12\x14\n" +
	"\x05index\x18\x01 \x01(\x05R\x05index\"\x86\x01\n" +
	"\tPlayerBox\x12.\n" +
	"\x06scenes\x18\x01 \x03(\v2\x16.PlayerBox.ScenesEntryR\x06scenes\x1aI\n" +
	"\vScenesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12$\n" +
	"\x05value\x18\x02 \x01(\v2\x0e.PlayerBoxDataR\x05value:\x028\x01\"\x95\x01\n" +
	"\rPlayerBoxData\x12\x1d\n" +
	"\n" +
	"scene_uuid\x18\x01 \x01(\x04R\tsceneUuid\x12,\n" +
	"\x04boxs\x18\x02 \x03(\v2\x18.PlayerBoxData.BoxsEntryR\x04boxs\x1a7\n" +
	"\tBoxsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xd8\x01\n" +
	"\x13LaunchPrivilegeData\x128\n" +
	"\x0flaunch_platform\x18\x01 \x01(\x0e2\x0f.LaunchPlatformR\x0elaunchPlatform\x12!\n" +
	"\fis_privilege\x18\x02 \x01(\bR\visPrivilege\x12?\n" +
	"\x13bak_launch_platform\x18\x03 \x01(\x0e2\x0f.LaunchPlatformR\x11bakLaunchPlatform\x12#\n" +
	"\rbak_privilege\x18\x04 \x01(\bR\fbakPrivilege\"\x9a\x01\n" +
	"\x0eBattlePassData\x12=\n" +
	"\n" +
	"battle_map\x18\x01 \x03(\v2\x1e.BattlePassData.BattleMapEntryR\tbattleMap\x1aI\n" +
	"\x0eBattleMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.BattlePassR\x05value:\x028\x01\"\xb1\x03\n" +
	"\n" +
	"BattlePass\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x05R\x05level\x12\x16\n" +
	"\x06curexp\x18\x03 \x01(\x05R\x06curexp\x12\x19\n" +
	"\bweek_exp\x18\x04 \x01(\x05R\aweekExp\x12\"\n" +
	"\rexp_last_time\x18\x05 \x01(\x05R\vexpLastTime\x12\x1b\n" +
	"\tis_unlock\x18\x06 \x01(\bR\bisUnlock\x12$\n" +
	"\x0ebuy_normal_pas\x18\a \x01(\bR\fbuyNormalPas\x12$\n" +
	"\x0ebuy_prime_pass\x18\b \x01(\bR\fbuyPrimePass\x12,\n" +
	"\x05award\x18\t \x03(\v2\x16.BattlePass.AwardEntryR\x05award\x12\x19\n" +
	"\bis_valid\x18\n" +
	" \x01(\bR\aisValid\x12$\n" +
	"\x0eis_sended_mail\x18\v \x01(\bR\fisSendedMail\x1aN\n" +
	"\n" +
	"AwardEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.BattlePassAwardInfoR\x05value:\x028\x01\"S\n" +
	"\x13BattlePassAwardInfo\x12\x1d\n" +
	"\n" +
	"free_award\x18\x01 \x01(\bR\tfreeAward\x12\x1d\n" +
	"\n" +
	"paid_award\x18\x02 \x01(\bR\tpaidAward\"\xcb\x01\n" +
	"\fRechargeData\x12+\n" +
	"\x11accumulate_amount\x18\x01 \x01(\x03R\x10accumulateAmount\x12,\n" +
	"\x12last_recharge_time\x18\x02 \x01(\x03R\x10lastRechargeTime\x120\n" +
	"\x14last_recharge_amount\x18\x03 \x01(\x03R\x12lastRechargeAmount\x12.\n" +
	"\x13last_diamond_amount\x18\x04 \x01(\x03R\x11lastDiamondAmount\"\xcc\x01\n" +
	"\rLuckyValueMgr\x12I\n" +
	"\x0fluck_value_info\x18\x01 \x03(\v2!.LuckyValueMgr.LuckValueInfoEntryR\rluckValueInfo\x12\x1d\n" +
	"\n" +
	"init_value\x18\x02 \x01(\bR\tinitValue\x1aQ\n" +
	"\x12LuckValueInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.LuckyValueInfoR\x05value:\x028\x01\"e\n" +
	"\x0eLuckyValueInfo\x12\x17\n" +
	"\aluck_id\x18\x01 \x01(\x05R\x06luckId\x12\x1d\n" +
	"\n" +
	"luck_value\x18\x02 \x01(\x05R\tluckValue\x12\x1b\n" +
	"\tnext_time\x18\x03 \x01(\x03R\bnextTime\"\xf4\a\n" +
	"\fHandbookData\x12q\n" +
	"\x1eunlock_note_important_role_map\x18\x01 \x03(\v2-.HandbookData.UnlockNoteImportantRoleMapEntryR\x1aunlockNoteImportantRoleMap\x12k\n" +
	"\x1cunlock_note_reading_book_map\x18\x02 \x03(\v2+.HandbookData.UnlockNoteReadingBookMapEntryR\x18unlockNoteReadingBookMap\x12g\n" +
	"\x1aunlock_note_dictionary_map\x18\x03 \x03(\v2*.HandbookData.UnlockNoteDictionaryMapEntryR\x17unlockNoteDictionaryMap\x12b\n" +
	"\x19unlock_note_post_card_map\x18\x04 \x03(\v2(.HandbookData.UnlockNotePostCardMapEntryR\x15unlockNotePostCardMap\x12e\n" +
	"\x1aunlock_note_month_card_map\x18\x05 \x03(\v2).HandbookData.UnlockNoteMonthCardMapEntryR\x16unlockNoteMonthCardMap\x1a^\n" +
	"\x1fUnlockNoteImportantRoleMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.HandBookStructR\x05value:\x028\x01\x1a\\\n" +
	"\x1dUnlockNoteReadingBookMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.HandBookStructR\x05value:\x028\x01\x1a[\n" +
	"\x1cUnlockNoteDictionaryMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.HandBookStructR\x05value:\x028\x01\x1aY\n" +
	"\x1aUnlockNotePostCardMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.HandBookStructR\x05value:\x028\x01\x1aZ\n" +
	"\x1bUnlockNoteMonthCardMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.HandBookStructR\x05value:\x028\x01\"8\n" +
	"\x0eHandBookStruct\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x16\n" +
	"\x06unlock\x18\x02 \x01(\bR\x06unlock\"\x84\x02\n" +
	"\x15MasterModeDungeonInfo\x12j\n" +
	"\x18master_mode_dungeon_info\x18\x01 \x03(\v21.MasterModeDungeonInfo.MasterModeDungeonInfoEntryR\x15masterModeDungeonInfo\x12\x17\n" +
	"\ais_show\x18\x02 \x01(\bR\x06isShow\x1af\n" +
	"\x1aMasterModeDungeonInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.SeasonMasterModeDungeonInfoR\x05value:\x028\x01\"\xb8\x03\n" +
	"\x1bSeasonMasterModeDungeonInfo\x12g\n" +
	"\x15master_mode_diff_info\x18\x01 \x03(\v24.SeasonMasterModeDungeonInfo.MasterModeDiffInfoEntryR\x12masterModeDiffInfo\x127\n" +
	"\x18dungeon_info_update_time\x18\x02 \x01(\x03R\x15dungeonInfoUpdateTime\x12S\n" +
	"\rseason_awards\x18\x03 \x03(\v2..SeasonMasterModeDungeonInfo.SeasonAwardsEntryR\fseasonAwards\x1aa\n" +
	"\x17MasterModeDiffInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.MasterModeDiffDungeonInfoR\x05value:\x028\x01\x1a?\n" +
	"\x11SeasonAwardsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xb9\x01\n" +
	"\x19MasterModeDiffDungeonInfo\x12N\n" +
	"\fdungeon_info\x18\x01 \x03(\v2+.MasterModeDiffDungeonInfo.DungeonInfoEntryR\vdungeonInfo\x1aL\n" +
	"\x10DungeonInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.DungeonInfoR\x05value:\x028\x01\"\xa3\x01\n" +
	"\vDungeonInfo\x12\x1d\n" +
	"\n" +
	"dungeon_id\x18\x01 \x01(\x05R\tdungeonId\x12%\n" +
	"\x0ecomplete_count\x18\x02 \x01(\x05R\rcompleteCount\x12\x1b\n" +
	"\taward_flg\x18\x03 \x01(\x05R\bawardFlg\x12\x14\n" +
	"\x05score\x18\x04 \x01(\x05R\x05score\x12\x1b\n" +
	"\tpass_time\x18\x05 \x01(\x05R\bpassTime\"\xab\x01\n" +
	"\x0eStatisticsData\x12J\n" +
	"\x0fstat_record_map\x18\x01 \x03(\v2\".StatisticsData.StatRecordMapEntryR\rstatRecordMap\x1aM\n" +
	"\x12StatRecordMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.StatRecordR\x05value:\x028\x01\"\xaa\x02\n" +
	"\n" +
	"StatRecord\x12\x10\n" +
	"\x03cnt\x18\x01 \x01(\x04R\x03cnt\x129\n" +
	"\n" +
	"group_cnts\x18\x02 \x03(\v2\x1a.StatRecord.GroupCntsEntryR\tgroupCnts\x12B\n" +
	"\rscene_records\x18\x03 \x03(\v2\x1d.StatRecord.SceneRecordsEntryR\fsceneRecords\x1a<\n" +
	"\x0eGroupCntsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1aM\n" +
	"\x11SceneRecordsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\"\n" +
	"\x05value\x18\x02 \x01(\v2\f.SceneRecordR\x05value:\x028\x01\"\x99\x01\n" +
	"\vSceneRecord\x12\x10\n" +
	"\x03cnt\x18\x01 \x01(\x04R\x03cnt\x12:\n" +
	"\n" +
	"group_cnts\x18\x02 \x03(\v2\x1b.SceneRecord.GroupCntsEntryR\tgroupCnts\x1a<\n" +
	"\x0eGroupCntsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\"\xa1\x03\n" +
	"\x16CompensationStatistics\x12H\n" +
	"\vseason_data\x18\x01 \x03(\v2'.CompensationStatistics.SeasonDataEntryR\n" +
	"seasonData\x12$\n" +
	"\x0elast_season_id\x18\x02 \x01(\rR\flastSeasonId\x12\x1b\n" +
	"\tcur_point\x18\x03 \x01(\x03R\bcurPoint\x12\x1b\n" +
	"\tmax_point\x18\x04 \x01(\x03R\bmaxPoint\x12B\n" +
	"\tlast_week\x18\x05 \x03(\v2%.CompensationStatistics.LastWeekEntryR\blastWeek\x1a\\\n" +
	"\x0fSeasonDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.CompensationSeasonStatisticsR\x05value:\x028\x01\x1a;\n" +
	"\rLastWeekEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\x82\x03\n" +
	"\x1cCompensationSeasonStatistics\x12H\n" +
	"\tweek_data\x18\x01 \x03(\v2+.CompensationSeasonStatistics.WeekDataEntryR\bweekData\x12S\n" +
	"\fcompensation\x18\x02 \x03(\v2/.CompensationSeasonStatistics.CompensationEntryR\fcompensation\x120\n" +
	"\x15max_climb_up_layer_id\x18\x03 \x01(\x05R\x11maxClimbUpLayerId\x1aP\n" +
	"\rWeekDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.CompensationRecordR\x05value:\x028\x01\x1a?\n" +
	"\x11CompensationEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xc4\x01\n" +
	"\x12CompensationRecord\x12V\n" +
	"\x11compensation_data\x18\x01 \x03(\v2).CompensationRecord.CompensationDataEntryR\x10compensationData\x1aV\n" +
	"\x15CompensationDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.CompensationDataR\x05value:\x028\x01\"\x89\x01\n" +
	"\x10CompensationData\x12'\n" +
	"\x0foverflow_energy\x18\x01 \x01(\x03R\x0eoverflowEnergy\x12!\n" +
	"\ffinish_times\x18\x02 \x01(\x05R\vfinishTimes\x12)\n" +
	"\x11climb_up_layer_id\x18\x03 \x01(\x05R\x0eclimbUpLayerId\"\xc8\x01\n" +
	"\n" +
	"BubbleInfo\x12!\n" +
	"\fbubble_score\x18\x01 \x01(\rR\vbubbleScore\x12,\n" +
	"\x12bubble_award_count\x18\x02 \x01(\rR\x10bubbleAwardCount\x12=\n" +
	"\x1badditional_target_uuid_list\x18\x03 \x03(\x04R\x18additionalTargetUuidList\x12*\n" +
	"\x11last_refresh_time\x18\x04 \x01(\x03R\x0flastRefreshTime\"\x9c\x01\n" +
	"\rBubbleActData\x12?\n" +
	"\vbubble_info\x18\x05 \x03(\v2\x1e.BubbleActData.BubbleInfoEntryR\n" +
	"bubbleInfo\x1aJ\n" +
	"\x0fBubbleInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.BubbleInfoR\x05value:\x028\x01\"\xcd\x01\n" +
	"\x0fMailClaimedInfo\x120\n" +
	"\x14attachment_mail_list\x18\x01 \x03(\x03R\x12attachmentMailList\x12G\n" +
	"\rclaimed_mails\x18\x02 \x03(\v2\".MailClaimedInfo.ClaimedMailsEntryR\fclaimedMails\x1a?\n" +
	"\x11ClaimedMailsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\x7f\n" +
	"\n" +
	"NewbieData\x12*\n" +
	"\x11total_online_time\x18\x01 \x01(\x03R\x0ftotalOnlineTime\x12\x1b\n" +
	"\tis_newbie\x18\x02 \x01(\bR\bisNewbie\x12(\n" +
	"\x10is_cancel_newbie\x18\x03 \x01(\bR\x0eisCancelNewbie\"\xd7\x01\n" +
	"\n" +
	"FightPoint\x12*\n" +
	"\x11total_fight_point\x18\x01 \x01(\x05R\x0ftotalFightPoint\x12I\n" +
	"\x10fight_point_data\x18\x02 \x03(\v2\x1f.FightPoint.FightPointDataEntryR\x0efightPointData\x1aR\n" +
	"\x13FightPointDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.FightPointDataR\x05value:\x028\x01\"\x96\x02\n" +
	"\x0eFightPointData\x12#\n" +
	"\rfunction_type\x18\x01 \x01(\x05R\ffunctionType\x12\x1f\n" +
	"\vtotal_point\x18\x02 \x01(\x05R\n" +
	"totalPoint\x12\x14\n" +
	"\x05point\x18\x03 \x01(\x05R\x05point\x12P\n" +
	"\x11sub_function_data\x18\x04 \x03(\v2$.FightPointData.SubFunctionDataEntryR\x0fsubFunctionData\x1aV\n" +
	"\x14SubFunctionDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.FightPointSubDataR\x05value:\x028\x01\"|\n" +
	"\x11FightPointSubData\x12#\n" +
	"\rfunction_type\x18\x01 \x01(\x05R\ffunctionType\x12,\n" +
	"\x12root_function_type\x18\x02 \x01(\x05R\x10rootFunctionType\x12\x14\n" +
	"\x05point\x18\x03 \x01(\x05R\x05point\"\x8e\x01\n" +
	"\bSignInfo\x124\n" +
	"\tsign_info\x18\x01 \x03(\v2\x17.SignInfo.SignInfoEntryR\bsignInfo\x1aL\n" +
	"\rSignInfoEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12%\n" +
	"\x05value\x18\x02 \x01(\v2\x0f.SignStatusListR\x05value:\x028\x01\"\xaf\x01\n" +
	"\x0eSignStatusList\x12M\n" +
	"\x10sign_status_data\x18\x01 \x03(\v2#.SignStatusList.SignStatusDataEntryR\x0esignStatusData\x1aN\n" +
	"\x13SignStatusDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12!\n" +
	"\x05value\x18\x02 \x01(\v2\v.SignStatusR\x05value:\x028\x01\"\xad\x01\n" +
	"\n" +
	"SignStatus\x12\x1b\n" +
	"\tis_signed\x18\x01 \x01(\bR\bisSigned\x12\x1f\n" +
	"\vis_rewarded\x18\x02 \x01(\bR\n" +
	"isRewarded\x12#\n" +
	"\ris_supplement\x18\x03 \x01(\bR\fisSupplement\x12\x1b\n" +
	"\tsign_time\x18\x04 \x01(\x03R\bsignTime\x12\x1f\n" +
	"\vreward_time\x18\x05 \x01(\x03R\n" +
	"rewardTime\"[\n" +
	"\x12CharStatisticsData\x12\x1d\n" +
	"\n" +
	"login_days\x18\x01 \x01(\x05R\tloginDays\x12&\n" +
	"\x0flast_login_time\x18\x02 \x01(\x04R\rlastLoginTime*J\n" +
	"\tEBodySize\x12\x10\n" +
	"\fBodySizeNull\x10\x00\x12\r\n" +
	"\tBodySizeS\x10\x01\x12\r\n" +
	"\tBodySizeM\x10\x02\x12\r\n" +
	"\tBodySizeL\x10\x03*\x8f\x01\n" +
	"\n" +
	"SystemType\x12\x13\n" +
	"\x0fSystemType_Null\x10\x00\x12\x16\n" +
	"\x12SystemType_Android\x10\x01\x12\x12\n" +
	"\x0eSystemType_Ios\x10\x02\x12\x12\n" +
	"\x0eSystemType_Web\x10\x03\x12\x14\n" +
	"\x10SystemType_Linux\x10\x04\x12\x16\n" +
	"\x12SystemType_Windows\x10\x05*Y\n" +
	"\x0eLaunchPlatform\x12\x16\n" +
	"\x12LaunchPlatformNull\x10\x00\x12\x18\n" +
	"\x13LaunchPlatformWeXin\x10\xe9\a\x12\x15\n" +
	"\x10LaunchPlatformQq\x10\xea\a*\xcc\x01\n" +
	"\x11EUserTransferType\x12\x1c\n" +
	"\x18EUserTransferTypeDefault\x10\x00\x12\"\n" +
	"\x1eEUserTransferTypeScenePosition\x10\x01\x12\x1f\n" +
	"\x1bEUserTransferTypeScenePosId\x10\x02\x12\x1a\n" +
	"\x16EUserTransferTypePivot\x10\x03\x12\x1d\n" +
	"\x19EUserTransferTypeCutScene\x10\x04\x12\x19\n" +
	"\x15EUserTransferTypeNear\x10\x05*\xac\x01\n" +
	"\x10ESceneLineStatus\x12\x17\n" +
	"\x13SceneLineStatusNone\x10\x00\x12\x16\n" +
	"\x12SceneLineStatusLow\x10\x01\x12\x19\n" +
	"\x15SceneLineStatusMedium\x10\x02\x12\x17\n" +
	"\x13SceneLineStatusHigh\x10\x03\x12\x17\n" +
	"\x13SceneLineStatusFull\x10\x04\x12\x1a\n" +
	"\x16SceneLineStatusRecycle\x10\x05*Y\n" +
	"\rBodyPartState\x12\x18\n" +
	"\x14BodyPartStateDefault\x10\x00\x12\x17\n" +
	"\x13BodyPartStateInjury\x10\x01\x12\x15\n" +
	"\x11BodyPartStateDead\x10\x02*\xdc\x02\n" +
	"\x16EBuffEffectLogicPbType\x12\x0e\n" +
	"\n" +
	"PlayEffect\x10\x00\x12\v\n" +
	"\aGravity\x10\x01\x12\x12\n" +
	"\x0eParabolaEffect\x10\x02\x12\v\n" +
	"\aLinking\x10\x03\x12\x13\n" +
	"\x0fConfusionEffect\x10\x04\x12\r\n" +
	"\tZoomScale\x10\x05\x12\x18\n" +
	"\x14BuffProfessionEffect\x10\a\x12\x10\n" +
	"\fTeleportBelt\x10\b\x12\x15\n" +
	"\x11BuffEffectRainbow\x10\t\x12\x15\n" +
	"\x11BuffEffectAttrHUD\x10\v\x12\x12\n" +
	"\x0eBuffEffectStop\x10\f\x12\x16\n" +
	"\x12BuffEffectProgress\x10\r\x12\x1b\n" +
	"\x17BuffEffectEnergyDisplay\x10\x0e\x12\x15\n" +
	"\x11BuffEffectStopAll\x10\x0f\x12\x19\n" +
	"\x15BuffEffectLayerChange\x10\x10\x12\v\n" +
	"\aTension\x10\x11*\xa3\x01\n" +
	"\rEDamageSource\x12\x16\n" +
	"\x12EDamageSourceSkill\x10\x00\x12\x17\n" +
	"\x13EDamageSourceBullet\x10\x01\x12\x15\n" +
	"\x11EDamageSourceBuff\x10\x02\x12\x15\n" +
	"\x11EDamageSourceFall\x10\x03\x12\x1b\n" +
	"\x17EDamageSourceFakeBullet\x10\x04\x12\x16\n" +
	"\x12EDamageSourceOther\x10d*\x82\x01\n" +
	"\x0fEDamageProperty\x12\v\n" +
	"\aGeneral\x10\x00\x12\b\n" +
	"\x04Fire\x10\x01\x12\t\n" +
	"\x05Water\x10\x02\x12\x0f\n" +
	"\vElectricity\x10\x03\x12\b\n" +
	"\x04Wood\x10\x04\x12\b\n" +
	"\x04Wind\x10\x05\x12\b\n" +
	"\x04Rock\x10\x06\x12\t\n" +
	"\x05Light\x10\a\x12\b\n" +
	"\x04Dark\x10\b\x12\t\n" +
	"\x05Count\x10\t*F\n" +
	"\vEDamageMode\x12\x10\n" +
	"\fDamageNormal\x10\x00\x12\x12\n" +
	"\x0eDamagePhysical\x10\x01\x12\x11\n" +
	"\rDamageMagical\x10\x02*Q\n" +
	"\vEDamageType\x12\n" +
	"\n" +
	"\x06Normal\x10\x00\x12\b\n" +
	"\x04Miss\x10\x01\x12\b\n" +
	"\x04Heal\x10\x02\x12\n" +
	"\n" +
	"\x06Immune\x10\x03\x12\b\n" +
	"\x04Fall\x10\x04\x12\f\n" +
	"\bAbsorbed\x10\x05*\xb2\x14\n" +
	"\x0eEBuffEventType\x12\x14\n" +
	"\x10BuffEventUnknown\x10\x00\x12\x12\n" +
	"\x0eBuffEventAddTo\x10\x01\x12\x13\n" +
	"\x0fBuffEventRemove\x10\x02\x12\x14\n" +
	"\x10BuffEventReplace\x10\x03\x12\x12\n" +
	"\x0eBuffEventTimer\x10\x04\x12\x17\n" +
	"\x13BuffEventStackLayer\x10\x05\x12\x18\n" +
	"\x14BuffEventRemoveLayer\x10\x06\x12\x1e\n" +
	"\x1aBuffEventOnHitTargetBefore\x10\a\x12\x1d\n" +
	"\x19BuffEventOnHitTargetAfter\x10\b\x12\x1b\n" +
	"\x17BuffEventOnHittedBefore\x10\t\x12\x1a\n" +
	"\x16BuffEventOnHittedAfter\x10\n" +
	"\x12\x1c\n" +
	"\x18BuffEventOnReachMaxLayer\x10\v\x12\x16\n" +
	"\x12BuffEventHostDeath\x10\f\x12\x1c\n" +
	"\x18BuffEventOnSkillHitAfter\x10\r\x12\x1b\n" +
	"\x17BuffEventTrigTimingAura\x10\x0e\x12\x19\n" +
	"\x15BuffEventBodyPartDead\x10\x0f\x12\x18\n" +
	"\x14BuffEventBodyPartHit\x10\x10\x12 \n" +
	"\x1cBuffEventBodyPartStateChange\x10\x11\x12\x1f\n" +
	"\x1bBuffEventOnPartHittedBefore\x10\x12\x12\x1e\n" +
	"\x1aBuffEventOnPartHittedAfter\x10\x13\x12\x1a\n" +
	"\x16BuffEventGravitational\x10\x14\x12\x1b\n" +
	"\x17BuffEventFightResChange\x10\x15\x12\x18\n" +
	"\x14BuffEventOnKillActor\x10\x17\x12\x18\n" +
	"\x14BuffEventAttrWatcher\x10\x18\x12\x1d\n" +
	"\x19BuffEventOnHittedLHBefore\x10\x19\x12\x1f\n" +
	"\x1bBuffEventOnBeHittedLHBefore\x10\x1a\x12\x18\n" +
	"\x14BuffEventAddByTarget\x10\x1b\x12\x1b\n" +
	"\x17BuffEventRemoveByTarget\x10\x1c\x12\x1a\n" +
	"\x16BuffEventInCombatState\x10\x1d\x12\x1b\n" +
	"\x17BuffEventOutCombatState\x10\x1e\x12\x17\n" +
	"\x13BuffEventSkillBegin\x10\x1f\x12\x15\n" +
	"\x11BuffEventSkillEnd\x10 \x12\x17\n" +
	"\x13BuffEventSingingEnd\x10\"\x12\x1a\n" +
	"\x16BuffEventSummonBuffAdd\x10#\x12\x19\n" +
	"\x15BuffEventSummonEntity\x10$\x12\x15\n" +
	"\x11BuffEventGuideEnd\x10%\x12\x17\n" +
	"\x13BuffEventOnDelayHit\x10'\x12\x18\n" +
	"\x14BuffEventTeamBuffAdd\x10(\x12\x1d\n" +
	"\x19BuffEventChangeProfession\x10)\x12\x19\n" +
	"\x15BuffEventDodgeSuccess\x10*\x12\x17\n" +
	"\x13BuffEventHealBefore\x10+\x12\x16\n" +
	"\x12BuffEventHealAfter\x10,\x12\x1e\n" +
	"\x1aBuffEventProduceHealBefore\x10-\x12\x1d\n" +
	"\x19BuffEventProduceHealAfter\x10.\x12\x19\n" +
	"\x15BuffEventShieldBroken\x10/\x12\x19\n" +
	"\x15BuffEventLinkingStart\x100\x12\x17\n" +
	"\x13BuffEventLinkingEnd\x101\x12\x1b\n" +
	"\x17BuffEventLinkingWatcher\x102\x12\x1d\n" +
	"\x19BuffEventSuperArmorBroken\x103\x12\x1d\n" +
	"\x19BuffEventAddedByTargetTag\x104\x12\x1b\n" +
	"\x17BuffEventAddToTargetTag\x105\x12\x1c\n" +
	"\x18BuffEventOnBeHitLessenHp\x109\x12\x1a\n" +
	"\x16BuffEventEnterBreaking\x10:\x12\x19\n" +
	"\x15BuffEventTeleportBelt\x10;\x12\x1d\n" +
	"\x19BuffEventOnBeHitAfterOnly\x10?\x12\x1b\n" +
	"\x17BuffEventOnHitAfterOnly\x10@\x12\x1e\n" +
	"\x1aBuffEventOnBeHealAfterOnly\x10A\x12\x1c\n" +
	"\x18BuffEventOnHealAfterOnly\x10B\x12\x1f\n" +
	"\x1bBuffEventHealCalcAttrBefore\x10C\x12&\n" +
	"\"BuffEventProduceHealCalcAttrBefore\x10D\x12\x1d\n" +
	"\x19BuffEventReviveSuccessEnd\x10E\x12!\n" +
	"\x1dBuffEventAfterReviveFirstMove\x10F\x12\x1d\n" +
	"\x19BuffEventMonsterIntoAlert\x10G\x12\x1c\n" +
	"\x18BuffEventMonsterOutAlert\x10H\x12\"\n" +
	"\x1eBuffEventOnAddShieldCalcBefore\x10I\x12\x1e\n" +
	"\x1aBuffEventOnAddShieldBefore\x10J\x12\x1d\n" +
	"\x19BuffEventOnAddShieldAfter\x10K\x12&\n" +
	"\"BuffEventOnBeAddedShieldCalcBefore\x10L\x12\"\n" +
	"\x1eBuffEventOnBeAddedShieldBefore\x10M\x12!\n" +
	"\x1dBuffEventOnBeAddedShieldAfter\x10N\x12\x1c\n" +
	"\x18BuffEventProgressWatcher\x10O\x12\x1a\n" +
	"\x16BuffEventOnLuckyDamage\x10P\x12\x17\n" +
	"\x13BuffEventSkillCDEnd\x10Q\x12\x17\n" +
	"\x13BuffEventMotionless\x10R\x12\x1c\n" +
	"\x18BuffEventParticipateKill\x10S\x12#\n" +
	"\x1fBuffEventProfessionBDTypeChange\x10T\x12\x19\n" +
	"\x15BuffEventSingingBegin\x10U\x12\x17\n" +
	"\x13BuffEventGuideBegin\x10V\x12\x16\n" +
	"\x12BuffEventRandTimer\x10W\x12\x1e\n" +
	"\x1aBuffEventIntoFractureState\x10X\x12\x17\n" +
	"\x13BuffEventTakeOnRide\x10Y\x12\x18\n" +
	"\x14BuffEventTakeOffRide\x10Z\x12\x16\n" +
	"\x12BuffEventStartJump\x10[\x12\x17\n" +
	"\x13BuffEventPlayAction\x10\\\x12\x16\n" +
	"\x12BuffEventPlayEmote\x10]\x12\x13\n" +
	"\x0eBuffEventCheck\x10\xe9\a\x12\x17\n" +
	"\x12BuffEventCustomize\x10\xea\a\x12 \n" +
	"\x1bBuffEventShapeshiftEndEvent\x10\xeb\a\x12\x19\n" +
	"\x14BuffEventAttrRefresh\x10\xec\a\x12\"\n" +
	"\x1dBuffEventMonitorTeamKillActor\x10\xed\a\x12\x1c\n" +
	"\x17BuffEventSpecialEffects\x10\x91N*6\n" +
	"\fESkillCDType\x12\x12\n" +
	"\x0eESkillCDNormal\x10\x00\x12\x12\n" +
	"\x0eESkillCDCharge\x10\x01*\xc8\x02\n" +
	"\vEEntityType\x12\x0e\n" +
	"\n" +
	"EntErrType\x10\x00\x12\x0e\n" +
	"\n" +
	"EntMonster\x10\x01\x12\n" +
	"\n" +
	"\x06EntNpc\x10\x02\x12\x12\n" +
	"\x0eEntSceneObject\x10\x03\x12\v\n" +
	"\aEntZone\x10\x05\x12\r\n" +
	"\tEntBullet\x10\x06\x12\x13\n" +
	"\x0fEntClientBullet\x10\a\x12\n" +
	"\n" +
	"\x06EntPet\x10\b\x12\v\n" +
	"\aEntChar\x10\n" +
	"\x12\f\n" +
	"\bEntDummy\x10\v\x12\v\n" +
	"\aEntDrop\x10\f\x12\f\n" +
	"\bEntField\x10\x0e\x12\v\n" +
	"\aEntTrap\x10\x0f\x12\x11\n" +
	"\rEntCollection\x10\x10\x12\x13\n" +
	"\x0fEntStaticObject\x10\x12\x12\x0e\n" +
	"\n" +
	"EntVehicle\x10\x13\x12\n" +
	"\n" +
	"\x06EntToy\x10\x14\x12\x15\n" +
	"\x11EntCommunityHouse\x10\x15\x12\x10\n" +
	"\fEntHouseItem\x10\x16\x12\f\n" +
	"\bEntCount\x10\x17*T\n" +
	"\vEAppearType\x12\x0f\n" +
	"\vEAppearNull\x10\x00\x12\x15\n" +
	"\x11EAppearTransferIn\x10\x01\x12\x1d\n" +
	"\x19EAppearTransferPassLineIn\x10\x02*\x93\x01\n" +
	"\x0eEDisappearType\x12\x14\n" +
	"\x10EDisappearNormal\x10\x00\x12\x12\n" +
	"\x0eEDisappearDead\x10\x01\x12\x15\n" +
	"\x11EDisappearDestroy\x10\x02\x12\x1b\n" +
	"\x17EDisappearTransferLeave\x10\x03\x12#\n" +
	"\x1fEDisappearTransferPassLineLeave\x10\x04*;\n" +
	"\aEGender\x12\x0e\n" +
	"\n" +
	"GenderNull\x10\x00\x12\x0e\n" +
	"\n" +
	"GenderMale\x10\x01\x12\x10\n" +
	"\fGenderFemale\x10\x02*\xbe\x8e\x02\n" +
	"\n" +
	"EErrorCode\x12\x0e\n" +
	"\n" +
	"ErrSuccess\x10\x00\x12\x0f\n" +
	"\vErrNoRecord\x10e\x12\x16\n" +
	"\x12ErrExceptionCancel\x10f\x12\x12\n" +
	"\x0eErrDBException\x10g\x12\x15\n" +
	"\x11ErrDBSeqException\x10h\x12\x17\n" +
	"\x13ErrDBSceneException\x10i\x12\x17\n" +
	"\x13ErrDBTokenException\x10j\x12\x11\n" +
	"\fErrCancelled\x10\xc9\x01\x12\x12\n" +
	"\rErrUnknownRpc\x10\xca\x01\x12\x17\n" +
	"\x12ErrInvalidArgument\x10\xcb\x01\x12\x18\n" +
	"\x13ErrDeadlineExceeded\x10\xcc\x01\x12\x10\n" +
	"\vErrNotFound\x10\xcd\x01\x12\x15\n" +
	"\x10ErrAlreadyExists\x10\xce\x01\x12\x18\n" +
	"\x13ErrPermissionDenied\x10\xcf\x01\x12\x19\n" +
	"\x14ErrResourceExhausted\x10\xd0\x01\x12\x1a\n" +
	"\x15ErrFailedPrecondition\x10\xd1\x01\x12\x0f\n" +
	"\n" +
	"ErrAborted\x10\xd2\x01\x12\x12\n" +
	"\rErrOutOfRange\x10\xd3\x01\x12\x15\n" +
	"\x10ErrUnimplemented\x10\xd4\x01\x12\x10\n" +
	"\vErrInternal\x10\xd5\x01\x12\x13\n" +
	"\x0eErrUnavailable\x10\xd6\x01\x12\x10\n" +
	"\vErrDataLoss\x10\xd7\x01\x12\x17\n" +
	"\x12ErrUnauthenticated\x10\xd8\x01\x12\x11\n" +
	"\fErrSystemMax\x10\xe7\a\x12\x0f\n" +
	"\n" +
	"ErrDBError\x10\xe8\a\x12\x16\n" +
	"\x11ErrCreateOpenInfo\x10\xe9\a\x12\x19\n" +
	"\x14ErrCreateAccountInfo\x10\xea\a\x12\x16\n" +
	"\x11ErrCreateCharInfo\x10\xeb\a\x12\x1a\n" +
	"\x15ErrCreateAccountToken\x10\xec\a\x12\x13\n" +
	"\x0eErrGetOpenInfo\x10\xed\a\x12\x16\n" +
	"\x11ErrGetAccountInfo\x10\xee\a\x12\x13\n" +
	"\x0eErrGetCharInfo\x10\xef\a\x12\x17\n" +
	"\x12ErrGetAccountToken\x10\xf0\a\x12\x14\n" +
	"\x0fErrLoginInQueue\x10\xf1\a\x12\x12\n" +
	"\rErrOtherLogin\x10\xf2\a\x12\x13\n" +
	"\x0eErrServerError\x10\xf3\a\x12\x15\n" +
	"\x10ErrNoAccountInfo\x10\xf4\a\x12\x12\n" +
	"\rErrNoCharInfo\x10\xf5\a\x12\x14\n" +
	"\x0fErrTokenExpired\x10\xf6\a\x12\x17\n" +
	"\x12ErrUpdateTokenFail\x10\xf7\a\x12\x19\n" +
	"\x14ErrRegIntoSceneError\x10\xf8\a\x12\x14\n" +
	"\x0fErrLoginTypeErr\x10\xf9\a\x12\x14\n" +
	"\x0fErrChangeMapErr\x10\xfa\a\x12\x18\n" +
	"\x13ErrLoginPlatformErr\x10\xfb\a\x12\x12\n" +
	"\rErrVersionErr\x10\xfc\a\x12\x1b\n" +
	"\x16ErrDelayOffLineKickOff\x10\xfd\a\x12\x1c\n" +
	"\x17ErrServiceLanguageError\x10\xfe\a\x12\x11\n" +
	"\fNoEnterScene\x10\xff\a\x12\x11\n" +
	"\fModIDNotOpen\x10\x80\b\x12\x10\n" +
	"\vErrFaceData\x10\x81\b\x12\x16\n" +
	"\x11ErrInitProfession\x10\x82\b\x12\x19\n" +
	"\x14ErrSceneCloseKickoff\x10\x83\b\x12\x1a\n" +
	"\x15ErrLoginReconnectKick\x10\x84\b\x12\x18\n" +
	"\x13ErrLoginErrorResume\x10\x85\b\x12\x15\n" +
	"\x10ErrRepeatedLogin\x10\x86\b\x12\x15\n" +
	"\x10ErrRestrictLogin\x10\x87\b\x12\x15\n" +
	"\x10ErrRestrictBlack\x10\x88\b\x12\x15\n" +
	"\x10ErrSdkVerifyFail\x10\x89\b\x12\x17\n" +
	"\x12ErrSdkTokenExpired\x10\x8a\b\x12\x15\n" +
	"\x10ErrServerNotOpen\x10\x8b\b\x12\x15\n" +
	"\x10ErrServerEndOpen\x10\x8c\b\x12\x12\n" +
	"\rErrNormalKick\x10\x8d\b\x12\x12\n" +
	"\rErrServerBusy\x10\x8e\b\x12\x13\n" +
	"\x0eErrServerClose\x10\x8f\b\x12\x10\n" +
	"\vErrExitGame\x10\x90\b\x12\x10\n" +
	"\vErrHopeKick\x10\x91\b\x12\x1a\n" +
	"\x15ErrClientVersionError\x10\x92\b\x12\x17\n" +
	"\x12ErrInvalidDeviceId\x10\x93\b\x12\x19\n" +
	"\x14ErrInvalidSystemType\x10\x94\b\x12\x12\n" +
	"\rErrDeleteChar\x10\x95\b\x12\x18\n" +
	"\x13ErrCancelDeleteChar\x10\x96\b\x12 \n" +
	"\x1bErrCancelDeleteCharIsDelete\x10\x97\b\x12\x1a\n" +
	"\x15ErrIntoSceneOwnerFail\x10\x98\b\x12\x14\n" +
	"\x0fErrSceneQueueUp\x10\x9a\b\x12\x1a\n" +
	"\x15ErrProtocolVersionErr\x10\x9b\b\x12\x18\n" +
	"\x13ErrConfigVersionErr\x10\x9c\b\x12\x18\n" +
	"\x13ErrStateEventFailed\x10\x9d\b\x12\x17\n" +
	"\x12ErrSelectCharDoing\x10\x9e\b\x12\x19\n" +
	"\x14ErrSelectCharDeleted\x10\x9f\b\x12\x17\n" +
	"\x12ErrLoginChannelMax\x10\xa0\b\x12\x19\n" +
	"\x14ErrDeleteAccountKick\x10\xa1\b\x12\x17\n" +
	"\x12ErrIsDeleteAccount\x10\xa2\b\x12\x15\n" +
	"\x10ErrIsVersionKick\x10\xa3\b\x12\x13\n" +
	"\x0eErrNotQQChnnel\x10\xa4\b\x12\x1f\n" +
	"\x1aErrIncorrectLaunchPlatform\x10\xa5\b\x12\x16\n" +
	"\x11ErrConditionWrong\x10\xa6\b\x12\x1b\n" +
	"\x16ErrNotSupportLoginType\x10\xa7\b\x12\x15\n" +
	"\x10ErrSceneNotExist\x10\xd1\x0f\x12\x14\n" +
	"\x0fErrUserNotExist\x10\xd2\x0f\x12\x19\n" +
	"\x14ErrComponentNotExist\x10\xd3\x0f\x12\x1b\n" +
	"\x16ErrSceneConfigNotExist\x10\xd4\x0f\x12\x17\n" +
	"\x12ErrServiceNotExist\x10\xd5\x0f\x12\x1d\n" +
	"\x18ErrDataContainerNotExist\x10\xd6\x0f\x12\x1a\n" +
	"\x15ErrAsynchronousReturn\x10\xd7\x0f\x12\x16\n" +
	"\x11ErrConfigNotExist\x10\xd8\x0f\x12\x0f\n" +
	"\n" +
	"ErrNotUser\x10\xd9\x0f\x12\x13\n" +
	"\x0eErrConfigError\x10\xda\x0f\x12\x15\n" +
	"\x10ErrActorNotExist\x10\xdb\x0f\x12\x1d\n" +
	"\x18ErrCutSceneAlreadyPlayed\x10\xdc\x0f\x12\x16\n" +
	"\x11ErrFunctionUnlock\x10\xe4\x0f\x12\x16\n" +
	"\x11ErrFunctionClosed\x10\xe5\x0f\x12%\n" +
	" ErrUserPlayerNotFurniturePackage\x10\xe6\x0f\x12\x15\n" +
	"\x10ErrSysInnerError\x10\x98\x11\x12\x18\n" +
	"\x13ErrSysWebClientNull\x10\x99\x11\x12\x1c\n" +
	"\x17ErrSysWebRequestTimeOut\x10\x9a\x11\x12\x19\n" +
	"\x14ErrSysWebReturnError\x10\x9b\x11\x12\x1c\n" +
	"\x17ErrRequestTooFrequently\x10\x9c\x11\x12\x18\n" +
	"\x13ErrArgStringTooLong\x10\xcb\x11\x12\x16\n" +
	"\x11ErrArgStringEmpty\x10\xcc\x11\x12\x16\n" +
	"\x11ErrArgArrayTooBig\x10\xcd\x11\x12\x15\n" +
	"\x10ErrArgArrayEmpty\x10\xce\x11\x12\x14\n" +
	"\x0fErrArgMapTooBig\x10\xcf\x11\x12\x13\n" +
	"\x0eErrArgMapEmpty\x10\xd0\x11\x12\x14\n" +
	"\x0fErrItemNotExist\x10\xfc\x11\x12\x17\n" +
	"\x12ErrPackageNotExist\x10\xfd\x11\x12\x13\n" +
	"\x0eErrPackageFull\x10\xfe\x11\x12\x16\n" +
	"\x11ErrItemExpireTime\x10\xff\x11\x12 \n" +
	"\x1bErrItemPackageGridNotEnough\x10\x80\x12\x12\x15\n" +
	"\x10ErrItemUUIDError\x10\x81\x12\x12\x15\n" +
	"\x10ErrItemNotEnough\x10\x82\x12\x12\x14\n" +
	"\x0fErrOptTypeError\x10\x83\x12\x12\x16\n" +
	"\x11ErrItemInCoolDown\x10\x84\x12\x12\x12\n" +
	"\rErrItemNotUse\x10\x85\x12\x12\x1b\n" +
	"\x16ErrItemEffectTypeError\x10\x86\x12\x12\x16\n" +
	"\x11ErrItemParamError\x10\x87\x12\x12\x18\n" +
	"\x13ErrItemAddBuffError\x10\x88\x12\x12\x0f\n" +
	"\n" +
	"ErrItemAdd\x10\x89\x12\x12\x14\n" +
	"\x0fErrUseItemState\x10\x8a\x12\x12\x10\n" +
	"\vErrBatchUse\x10\x8b\x12\x12\x14\n" +
	"\x0fErrFullSendMail\x10\x8c\x12\x12\x13\n" +
	"\x0eErrItemNumZero\x10\x8d\x12\x12!\n" +
	"\x1cErrItemSelectAwardIllegalNum\x10\x8e\x12\x12!\n" +
	"\x1cErrItemSelectAwardIllegalPos\x10\x8f\x12\x12\x17\n" +
	"\x12ErrItemSelectLimit\x10\x90\x12\x12\x1e\n" +
	"\x19ErrItemPeriodGainExceeded\x10\x91\x12\x12\x15\n" +
	"\x10ErrItemNoRecycle\x10\x92\x12\x12 \n" +
	"\x1bErrItemRecycleBeyondMaxGrid\x10\x93\x12\x12\x1f\n" +
	"\x1aErrItemRecycleBeyondMaxNum\x10\x94\x12\x12\"\n" +
	"\x1dErrItemRecycleIdNoMatchItemId\x10\x95\x12\x12\x1c\n" +
	"\x17ErrItemRecycleIllegalId\x10\x96\x12\x12\x16\n" +
	"\x11ErrItemLimitCount\x10\x97\x12\x12\x1e\n" +
	"\x19ErrItemFriendPontExceeded\x10\x98\x12\x12#\n" +
	"\x1eErrItemToySingleEntUseExceeded\x10\x99\x12\x12\x1f\n" +
	"\x1aErrItemToySceneUseExceeded\x10\x9a\x12\x12\x1f\n" +
	"\x1aErrItemToyUseInDisableArea\x10\x9b\x12\x12$\n" +
	"\x1fErrItemToySingleCellUseExceeded\x10\x9c\x12\x12\x1c\n" +
	"\x17ErrMonthlyCardNotExists\x10\xcc\x12\x12\x1c\n" +
	"\x17ErrMonthlyCardDataError\x10\xcd\x12\x12#\n" +
	"\x1eErrMonthlyCardDayAwardReceived\x10\xce\x12\x12\x1d\n" +
	"\x18ErrMonthlyCardLimitCount\x10\xcf\x12\x12\x17\n" +
	"\x12ErrCommunityNoHome\x10\xe0\x12\x12\x15\n" +
	"\x10ErrNotHouseOwner\x10\xe1\x12\x12\x17\n" +
	"\x12ErrHomeLandExisted\x10\xe2\x12\x12\x1f\n" +
	"\x1aErrHomeLandContentWrongful\x10\xe3\x12\x12\x1b\n" +
	"\x16ErrHouseLivetogetherCD\x10\xe4\x12\x12\x1a\n" +
	"\x15ErrHomeLandNotExisted\x10\xe5\x12\x12\x1a\n" +
	"\x15ErrHomeLandNotInScene\x10\xe6\x12\x12\x1c\n" +
	"\x17ErrHomeLandIsInvitation\x10\xe7\x12\x12%\n" +
	" ErrHomeLandInsufficientAuthority\x10\xe8\x12\x12&\n" +
	"!ErrHomeLandTransferRequestPending\x10\xe9\x12\x12&\n" +
	"!ErrHomeLandTransferRequestTimeout\x10\xea\x12\x12\x1a\n" +
	"\x15ErrHomeLandTransferCD\x10\xeb\x12\x12\x1f\n" +
	"\x1aErrHomelandTargetIsHasHome\x10\xec\x12\x12\x1d\n" +
	"\x18ErrHomelandTargetIsOwner\x10\xed\x12\x12%\n" +
	" ErrHomelandNotOwnerCannotOperate\x10\xee\x12\x12\x18\n" +
	"\x13ErrHomeLandHasHouse\x10\xef\x12\x12\x1e\n" +
	"\x19ErrHomeLandContentTooLong\x10\xf0\x12\x12\x1f\n" +
	"\x1aErrHomeLandClutterNotExist\x10\xf1\x12\x12\x1e\n" +
	"\x19ErrHouseNameOrStatementCD\x10\xf2\x12\x12$\n" +
	"\x1fErrHouseIntroductionStatementCD\x10\xf3\x12\x12%\n" +
	" ErrCommunityBuildInvalidRecipeId\x10\xf4\x12\x12$\n" +
	"\x1fErrCommunityBuildRecipeIsUnlock\x10\xf5\x12\x12\x19\n" +
	"\x14ErrCommunityBuildMax\x10\xf6\x12\x12!\n" +
	"\x1cErrCommunityBuildNoAuthority\x10\xf7\x12\x12%\n" +
	" ErrCommunityNotBuildCannotCancel\x10\xf8\x12\x12)\n" +
	"$ErrCommunityBuildNotSelfCannotCancel\x10\xf9\x12\x12)\n" +
	"$ErrCommunityNotBuildCannotAccelerate\x10\xfa\x12\x12-\n" +
	"(ErrCommunityBuildNotSelfCannotAccelerate\x10\xfb\x12\x12&\n" +
	"!ErrCommunityBuildCannotAccelerate\x10\xfc\x12\x12'\n" +
	"\"ErrCommunityBuildAlreadyAccelerate\x10\xfd\x12\x12\x1f\n" +
	"\x1aErrCommunityBuildInDungeon\x10\xfe\x12\x12\"\n" +
	"\x1dErrCommunityBuildRecipeIsLock\x10\xff\x12\x12)\n" +
	"$ErrCommunityBuildRecipeNotItemUnlock\x10\x80\x13\x12\"\n" +
	"\x1dErrCommunityBuildInvalidCount\x10\x81\x13\x12&\n" +
	"!ErrCommunityNotBuildCannotReceive\x10\x82\x13\x12\x1c\n" +
	"\x17ErrCommunityCanNotBuild\x10\x83\x13\x12\x1f\n" +
	"\x1aErrHomeLandCohabitantLimit\x10\x84\x13\x12%\n" +
	" ErrHomeLandRootNotQuitCohabitant\x10\x85\x13\x12,\n" +
	"'ErrHomeLandNotOwnerCannotQuitCohabitant\x10\x86\x13\x12#\n" +
	"\x1eErrHomeLandCohabitantIsExiting\x10\x87\x13\x12#\n" +
	"\x1eErrHomeLandCohabitantNotExists\x10\x88\x13\x12+\n" +
	"&ErrHomeLandCohabitantExitRequestExists\x10\x89\x13\x12!\n" +
	"\x1cErrHomeLandCohabitantDismiss\x10\x8a\x13\x12\x1d\n" +
	"\x18ErrHomeLandNotInvitation\x10\x8b\x13\x12+\n" +
	"&ErrHomeLandCohabitantInvitationTimeout\x10\x8c\x13\x12#\n" +
	"\x1eErrHomeLandCohabitantNotFriend\x10\x8d\x13\x12%\n" +
	" ErrHomeLandCohabitantFriendLevel\x10\x8e\x13\x12\x1f\n" +
	"\x1aErrHomeLandCohabitantLevel\x10\x8f\x13\x12(\n" +
	"#ErrHomeLandInviteCohabitantNotOwner\x10\x90\x13\x12\"\n" +
	"\x1dErrCommunityWarehouseGridFull\x10\x93\x13\x12%\n" +
	" ErrCommunityWarehouseNoAuthority\x10\x94\x13\x12-\n" +
	"(ErrCommunityWarehouseGridPosItemNoEnough\x10\x95\x13\x12%\n" +
	" ErrHomeLandInsufficientFurniture\x10\x96\x13\x12+\n" +
	"&ErrCommunityWarehouseTakeOutCountLimit\x10\x97\x13\x12\x1c\n" +
	"\x17ErrHomeLandTaskNotExist\x10\x98\x13\x12!\n" +
	"\x1cErrHomeLandTaskTimeNotEnough\x10\x99\x13\x12#\n" +
	"\x1eErrHomeLandTaskAlreadyFinished\x10\x9a\x13\x12!\n" +
	"\x1cErrHomeLandTaskItemNotEnough\x10\x9b\x13\x12\x1d\n" +
	"\x18ErrHomeLandCurLevelError\x10\x9d\x13\x12\x1c\n" +
	"\x17ErrHomeLandExpNotEnough\x10\x9e\x13\x12\x1f\n" +
	"\x1aErrHomeLandAlreadyMaxLevel\x10\x9f\x13\x12\x1b\n" +
	"\x16ErrHomeLandLevelLocked\x10\xa0\x13\x12 \n" +
	"\x1bErrHomeLandLevelConfigError\x10\xa1\x13\x12\"\n" +
	"\x1dErrCommunityEditorNotEditable\x10\xa2\x13\x12#\n" +
	"\x1eErrCommunityEditorNotFurniture\x10\xa3\x13\x12!\n" +
	"\x1cErrCommunityEditorNotOutdoor\x10\xa4\x13\x12 \n" +
	"\x1bErrCommunityEditorNotIndoor\x10\xa5\x13\x12\x1e\n" +
	"\x19ErrCommunityEditorOverMax\x10\xa6\x13\x12\"\n" +
	"\x1dErrCommunityEditorOverTypeMax\x10\xa7\x13\x12)\n" +
	"$ErrCommunityEditorFurnitureNotEnough\x10\xa8\x13\x12(\n" +
	"#ErrCommunityEditorFurnitureNotExist\x10\xa9\x13\x12#\n" +
	"\x1eErrCommunityEditorOverMaxGroup\x10\xaa\x13\x12\"\n" +
	"\x1dErrCommunityEditorNoStructure\x10\xab\x13\x12(\n" +
	"#ErrCommunityEditorGroupMaxStructure\x10\xac\x13\x12'\n" +
	"\"ErrCommunityEditorStructureInGroup\x10\xad\x13\x12$\n" +
	"\x1fErrCommunityEditorGroupNotExist\x10\xae\x13\x12#\n" +
	"\x1eErrCommunityEditorAlreadyExist\x10\xaf\x13\x12 \n" +
	"\x1bErrHomeLandSellItemNotExist\x10\xb1\x13\x12 \n" +
	"\x1bErrHomeLandLeftNumNotEnough\x10\xb2\x13\x12\x1e\n" +
	"\x19ErrHomeLandSellShopLocked\x10\xb3\x13\x12\x19\n" +
	"\x14ErrHomeLandSeedExist\x10\xb6\x13\x12\x1c\n" +
	"\x17ErrHomeLandItemNotOwner\x10\xb7\x13\x12\x1e\n" +
	"\x19ErrHomeLandSeedStateError\x10\xb8\x13\x12\x16\n" +
	"\x11ErrHomeLandNoSeed\x10\xb9\x13\x12\x17\n" +
	"\x12ErrHomeLandNoWater\x10\xba\x13\x12%\n" +
	" ErrHomeLandFertilizerMaxNumLimit\x10\xbb\x13\x12\x1c\n" +
	"\x17ErrHomeLandNotFertilize\x10\xbc\x13\x12\x19\n" +
	"\x14ErrHomeLandNotPollen\x10\xbd\x13\x12\x1d\n" +
	"\x18ErrHomeLandAlreadyPollen\x10\xbe\x13\x12\x1a\n" +
	"\x15ErrHomeLandNotHarvest\x10\xbf\x13\x12'\n" +
	"\"ErrHomeLandPickUpSinglePlayerLimit\x10\xc0\x13\x12 \n" +
	"\x1bErrHomeLandPickUpTotalLimit\x10\xc1\x13\x12'\n" +
	"\"ErrHomeLandPickUpFlowerNotFinished\x10\xc2\x13\x12\x1b\n" +
	"\x16ErrHomeLandPickUpOwner\x10\xc3\x13\x12\x1c\n" +
	"\x17ErrHomeLandGainNotOwner\x10\xc4\x13\x12\x1c\n" +
	"\x17ErrHomeLandItemFullGrid\x10\xc5\x13\x12\x1d\n" +
	"\x18ErrHomeLandFurnitureFull\x10\xc6\x13\x12\x1c\n" +
	"\x17ErrComposeItemNotEnough\x10\x8b\x14\x12\x15\n" +
	"\x10ErrComposeFailed\x10\x8c\x14\x12\x1e\n" +
	"\x19ErrRedemptionItemNotExist\x10\x8d\x14\x12\x1e\n" +
	"\x19ErrRedemptionItemMaxCount\x10\x8e\x14\x12\x1f\n" +
	"\x1aErrRedemptionItemNotEnough\x10\x8f\x14\x12\x1c\n" +
	"\x17ErrRedemptionItemGender\x10\x90\x14\x12\x1b\n" +
	"\x16ErrAwardConfigNotFound\x10\xa8\x14\x12\x1e\n" +
	"\x19ErrAwardConfigWeightError\x10\xa9\x14\x12*\n" +
	"%ErrAwardConfigLimitAndContentNotMatch\x10\xaa\x14\x12#\n" +
	"\x1eErrAwardConfigContentSizeError\x10\xab\x14\x12(\n" +
	"#ErrAwardConfigContentRatesSizeError\x10\xac\x14\x12)\n" +
	"$ErrAwardConfigContentWeightSizeError\x10\xad\x14\x12$\n" +
	"\x1fErrAwardConfigGroupContentEmpty\x10\xae\x14\x12 \n" +
	"\x1bErrAwardConfigGroupNumEmpty\x10\xaf\x14\x12.\n" +
	")ErrAwardConfigGroupContentNoMatchGroupNum\x10\xb0\x14\x12\x1f\n" +
	"\x1aErrAwardConfigNoRandomDrop\x10\xb1\x14\x12 \n" +
	"\x1bErrAwardConfigNoSelectAward\x10\xb2\x14\x12*\n" +
	"%ErrAwardConfigSelfSelectContentNoItem\x10\xb3\x14\x12$\n" +
	"\x1fErrAwardConfigWeightRateMustOne\x10\xb4\x14\x12,\n" +
	"'ErrAwardConfigGroupContentRandomNoMatch\x10\xb5\x14\x12$\n" +
	"\x1fErrAwardConfigGroupContentError\x10\xb6\x14\x12.\n" +
	")ErrAwardConfigPackageContentRandomNoMatch\x10\xb7\x14\x122\n" +
	"-ErrAwardConfigLevelUpPackConfigPackageNoMatch\x10\xb8\x14\x12%\n" +
	" ErrAwardConfigProItemRuleNoMatch\x10\xb9\x14\x12&\n" +
	"!ErrAwardConfigPackageContentEmpty\x10\xba\x14\x12\"\n" +
	"\x1dErrAwardConfigDropContentSize\x10\xbb\x14\x12!\n" +
	"\x1cErrAwardConfigDropContentNum\x10\xbc\x14\x12!\n" +
	"\x1cErrAwardConfigGroupRateEmpty\x10\xbd\x14\x12#\n" +
	"\x1eErrAwardConfigGroupWeightEmpty\x10\xbe\x14\x12\x17\n" +
	"\x12ErrAwardInnerError\x10\xbf\x14\x12\x1e\n" +
	"\x19ErrAwardIllegalRandomType\x10\xc0\x14\x12\x1c\n" +
	"\x17ErrAwardConditionNoMeet\x10\xc1\x14\x12\x1b\n" +
	"\x16ErrAwardRandomTypeNone\x10\xc2\x14\x12\x1e\n" +
	"\x19ErrAwardRandomTypeNoMatch\x10\xc3\x14\x12\x18\n" +
	"\x13ErrAwardActorIsNull\x10\xc4\x14\x12\x1d\n" +
	"\x18ErrEquipWashAttrNotExist\x10\x8c\x15\x12\x18\n" +
	"\x13ErrNotEquipInCombat\x10\x8d\x15\x12\x11\n" +
	"\fErrEquipPart\x10\x8e\x15\x12\x1b\n" +
	"\x16ErrComposeItemNotExist\x10\xbe\x15\x12\x1e\n" +
	"\x19ErrPickupDropItemDistance\x10\xf0\x15\x12!\n" +
	"\x1cErrPickupDropItemPackageFull\x10\xf1\x15\x12!\n" +
	"\x1cErrPickupDropItemNoAuthority\x10\xf2\x15\x12\x17\n" +
	"\x12ErrLayerActorExist\x10\xa3\x16\x12\x15\n" +
	"\x10ErrTeamCreateHas\x10\xd4\x16\x12\x15\n" +
	"\x10ErrTeamIllTarget\x10\xd5\x16\x12\x1a\n" +
	"\x15ErrTeamCreateTryLater\x10\xd6\x16\x12\x11\n" +
	"\fErrTeamGetNo\x10\xd7\x16\x12\x15\n" +
	"\x10ErrTeamListEmpty\x10\xd8\x16\x12\x11\n" +
	"\fErrTeamInner\x10\xd9\x16\x12\x14\n" +
	"\x0fErrTeamNoLeader\x10\xda\x16\x12\x13\n" +
	"\x0eErrTeamInMatch\x10\xdb\x16\x12\x1b\n" +
	"\x16ErrTeamCustomizeTarget\x10\xdc\x16\x12\x11\n" +
	"\fErrTeamNoOwn\x10\xdd\x16\x12\x14\n" +
	"\x0fErrTeamTickSelf\x10\xde\x16\x12\x11\n" +
	"\fErrTeamNoMem\x10\xdf\x16\x12\x1a\n" +
	"\x15ErrTeamApplyingLeader\x10\xe0\x16\x12\x17\n" +
	"\x12ErrTeamHasBeLeader\x10\xe1\x16\x12\x1a\n" +
	"\x15ErrTeamNoTransferSelf\x10\xe2\x16\x12\x1c\n" +
	"\x17ErrTeamNoLeaderTransfer\x10\xe3\x16\x12\x16\n" +
	"\x11ErrTeamHasOwnTeam\x10\xe4\x16\x12\x13\n" +
	"\x0eErrTeamNoExist\x10\xe5\x16\x12\x15\n" +
	"\x10ErrTeamApplyInCD\x10\xe6\x16\x12\x17\n" +
	"\x12ErrTeamApplyExpire\x10\xe7\x16\x12\x15\n" +
	"\x10ErrTeamJoinOther\x10\xe8\x16\x12\x12\n" +
	"\rErrTeamMemMax\x10\xe9\x16\x12\x15\n" +
	"\x10ErrTeamNoInvited\x10\xec\x16\x12\x16\n" +
	"\x11ErrTeamIsMatching\x10\xed\x16\x12\x16\n" +
	"\x11ErrTeamIllegalTag\x10\xee\x16\x12\x16\n" +
	"\x11ErrTeamNoMatching\x10\xef\x16\x12\x1b\n" +
	"\x16ErrTeamIllegalActivity\x10\xf0\x16\x12\x16\n" +
	"\x11ErrTeamInActivity\x10\xf1\x16\x12\x1b\n" +
	"\x16ErrTeamNoMeetCondition\x10\xf2\x16\x12\x16\n" +
	"\x11ErrTeamWaitVoting\x10\xf3\x16\x12\x19\n" +
	"\x14ErrTeamDoingActivity\x10\xf4\x16\x12\x16\n" +
	"\x11ErrTeamNoInVoting\x10\xf5\x16\x12\x13\n" +
	"\x0eErrTeamVoteEnd\x10\xf6\x16\x12\x14\n" +
	"\x0fErrTeamHasVoted\x10\xf7\x16\x12\x14\n" +
	"\x0fErrTeamInviteCD\x10\xf8\x16\x12\x17\n" +
	"\x12ErrTeamApplyLeadCD\x10\xf9\x16\x12\x19\n" +
	"\x14ErrTeamMoreMaxWorlds\x10\xfa\x16\x12\x1a\n" +
	"\x15ErrTeamValidApplyInfo\x10\xfb\x16\x12\x1b\n" +
	"\x16ErrTeamInMatchCancelCD\x10\xfc\x16\x12\x19\n" +
	"\x14ErrTeamMatchFinished\x10\xfd\x16\x12\x18\n" +
	"\x13ErrTeamMatchWaitSec\x10\xfe\x16\x12\x18\n" +
	"\x13ErrTeamMemWorldFull\x10\xff\x16\x12\x18\n" +
	"\x13ErrTeamMemNotLeader\x10\x80\x17\x12 \n" +
	"\x1bErrTeamLeaderNotStaticScene\x10\x81\x17\x12\x1b\n" +
	"\x16ErrTeamLeaderCallDoing\x10\x82\x17\x12\x1f\n" +
	"\x1aErrTeamIllegalCallOperator\x10\x83\x17\x12%\n" +
	" ErrTeamLeaderIllegalCallOperator\x10\x84\x17\x12\x15\n" +
	"\x10ErrTeamNoMemCall\x10\x85\x17\x12\x19\n" +
	"\x14ErrTeamLeaderCallEnd\x10\x86\x17\x12\x15\n" +
	"\x10ErrTeamSameScene\x10\x87\x17\x12\x18\n" +
	"\x13ErrTeamNotSameScene\x10\x88\x17\x12\x16\n" +
	"\x11ErrTeamMemTooMore\x10\x89\x17\x12\x18\n" +
	"\x13ErrTeamMemInDungeon\x10\x8a\x17\x12\x16\n" +
	"\x11ErrTeamMemTooLess\x10\x8b\x17\x12\x1d\n" +
	"\x18ErrTeamIllegalInviteType\x10\x8c\x17\x12\x1c\n" +
	"\x17ErrTeamMemberNotInScene\x10\x8d\x17\x12(\n" +
	"#ErrTeamLeaderReadyCheckTimeNotReady\x10\x8e\x17\x12\x1d\n" +
	"\x18ErrTeamExistDungeonCheck\x10\x8f\x17\x12\"\n" +
	"\x1dErrTeamTargetMatchTalentLimit\x10\x90\x17\x12\x1f\n" +
	"\x1aErrTeamEditGroupNotAllowed\x10\x91\x17\x12\x19\n" +
	"\x14ErrTeamGroupNotExist\x10\x92\x17\x12#\n" +
	"\x1eErrTeamTargetNoMatchMemberType\x10\x93\x17\x12\x1d\n" +
	"\x18ErrDecomposeItemNotExist\x10\xb8\x17\x12\x1e\n" +
	"\x19ErrDecomposeItemNotEnough\x10\xb9\x17\x12\x1d\n" +
	"\x18ErrRefineEnergyNotEnough\x10\xba\x17\x12\x1a\n" +
	"\x15ErrRefineItemMaxCount\x10\xbb\x17\x12\x1a\n" +
	"\x15ErrRefineItemNotExist\x10\xbc\x17\x12!\n" +
	"\x1cErrRefineItemColumnNotUnlock\x10\xbd\x17\x12\x1e\n" +
	"\x19ErrRefineItemColumnUnlock\x10\xbe\x17\x12\x17\n" +
	"\x12ErrRefineItemExist\x10\xbf\x17\x12\x16\n" +
	"\x11ErrEnergyLimitMax\x10\xc0\x17\x12 \n" +
	"\x1bErrRefineItemColumnNotEmpty\x10\xc1\x17\x12\x1a\n" +
	"\x15ErrProfessionNotExist\x10\xf0\x17\x12\x18\n" +
	"\x13ErrModSlotNotUnlock\x10\xf2\x17\x12!\n" +
	"\x1cErrChangeProfessionStateFail\x10\xf9\x17\x12\x1e\n" +
	"\x19ErrChangeProfessionCDFail\x10\xfa\x17\x12\x1f\n" +
	"\x1aErrProfessionSkinNotActive\x10\xff\x17\x12\x1c\n" +
	"\x17ErrProfessionSkinActive\x10\x80\x18\x12\x1c\n" +
	"\x17ErrProfessionNotUseSkin\x10\x81\x18\x12!\n" +
	"\x1cErrProfessionSkillSkinActive\x10\x82\x18\x12$\n" +
	"\x1fErrProfessionSkillSkinNotActive\x10\x83\x18\x12 \n" +
	"\x1bErrProfessionSkillNotActive\x10\x84\x18\x12\x13\n" +
	"\x0eErrCharOffline\x10\x9d\x18\x12\x19\n" +
	"\x14ErrUserDataBaseError\x10\x9e\x18\x12\x13\n" +
	"\x0eErrCharGetFail\x10\x9f\x18\x12\x14\n" +
	"\x0fErrAlreadyAlive\x10\x80\x19\x12\x13\n" +
	"\x0eErrReviveParam\x10\x81\x19\x12\x14\n" +
	"\x0fErrStateIllegal\x10\x82\x19\x12\x15\n" +
	"\x10ErrStateNoChange\x10\x83\x19\x12\x1e\n" +
	"\x19ErrReviveConsumeNotEnough\x10\x84\x19\x12\x1b\n" +
	"\x16ErrReviveByOtherForbid\x10\x85\x19\x12\x1c\n" +
	"\x17ErrReviveTimeNotArrived\x10\x86\x19\x12\x18\n" +
	"\x13ErrReviveBossBattle\x10\x87\x19\x12\x18\n" +
	"\x13ErrReviveCountLimit\x10\x88\x19\x12\x16\n" +
	"\x11ErrReviveInDeadTp\x10\x89\x19\x12\x1c\n" +
	"\x17ErrDungeonPlayTypeError\x10\xe5\x19\x12\x17\n" +
	"\x12ErrDungeonNotExist\x10\xe6\x19\x12\x1a\n" +
	"\x15ErrDungeonCreateError\x10\xe7\x19\x12\x19\n" +
	"\x14ErrCantChangeDungeon\x10\xe8\x19\x12\x13\n" +
	"\x0eErrDungeonLock\x10\xe9\x19\x12\x13\n" +
	"\x0eErrPioneerFail\x10\xea\x19\x12\x11\n" +
	"\fErrAwardFail\x10\xeb\x19\x12\x13\n" +
	"\x0eErrGsNotEnough\x10\xec\x19\x12\x19\n" +
	"\x14ErrQuestNotCompleted\x10\xed\x19\x12\x17\n" +
	"\x12ErrDungeonNotClear\x10\xee\x19\x12\x19\n" +
	"\x14ErrConditionNotExist\x10\xef\x19\x12\x15\n" +
	"\x10ErrAwardReceived\x10\xf0\x19\x12\x18\n" +
	"\x13ErrCantRepeatedPlay\x10\xf1\x19\x12\x17\n" +
	"\x12ErrNeedPassPreRoom\x10\xf2\x19\x12\x1e\n" +
	"\x19ErrDungeonEnterCountLimit\x10\xf3\x19\x12\x19\n" +
	"\x14ErrDungeonScoreError\x10\xf4\x19\x12\x1b\n" +
	"\x16ErrDungeonRepeatedVote\x10\xf5\x19\x12\"\n" +
	"\x1dErrDungeonChallengeAwardState\x10\xf6\x19\x12%\n" +
	" ErrDungeonChallengeAffixNotFound\x10\xf7\x19\x12\x1d\n" +
	"\x18ErrDungeonStateNotActive\x10\xf8\x19\x12\x1b\n" +
	"\x16ErrDungeonCantVoteSelf\x10\xf9\x19\x12\x1e\n" +
	"\x19ErrDungeonPlayerNotEnough\x10\xfa\x19\x12\x19\n" +
	"\x14ErrDungeonPlayerFull\x10\xfb\x19\x12\x1a\n" +
	"\x15ErrDungeonCantHeroKey\x10\xfc\x19\x12\x1c\n" +
	"\x17ErrDungeonNotSettlement\x10\xfd\x19\x12\x1e\n" +
	"\x19ErrDungeonNotFindRollItem\x10\xfe\x19\x12\x17\n" +
	"\x12ErrDungeonCantRoll\x10\xff\x19\x12\x19\n" +
	"\x14ErrDungeonRollFinish\x10\x80\x1a\x12\x1a\n" +
	"\x15ErrDungeonSelectError\x10\x81\x1a\x12\x1a\n" +
	"\x15ErrDungeonAiModeError\x10\x82\x1a\x12\x1e\n" +
	"\x19ErrDungeonTargetNotFinish\x10\x83\x1a\x12\x1c\n" +
	"\x17ErrDungeonTargetBeAward\x10\x84\x1a\x12\x1f\n" +
	"\x1aErrDungeonSinglePlayerMore\x10\x85\x1a\x12\x1f\n" +
	"\x1aErrDungeonAiGroupNotEnough\x10\x86\x1a\x12\x15\n" +
	"\x10ErrDungeonNoPass\x10\x87\x1a\x12\x1b\n" +
	"\x16ErrDungeonCloseSceneId\x10\x88\x1a\x12\x1d\n" +
	"\x18ErrDungeonEnterTypeError\x10\x89\x1a\x12\x19\n" +
	"\x14ErrDungeonActorCount\x10\x8a\x1a\x12\x19\n" +
	"\x14ErrDungeonDiffLocked\x10\x8b\x1a\x12\x1e\n" +
	"\x19ErrDungeonPreBattleVoteCd\x10\x8c\x1a\x12\x1a\n" +
	"\x15ErrDungeonBossInvalid\x10\x8d\x1a\x12\x15\n" +
	"\x10ErrDungeonNoUser\x10\x8e\x1a\x12\x1a\n" +
	"\x15ErrDungeonUserInvalid\x10\x8f\x1a\x12 \n" +
	"\x1bErrDungeonAwardualification\x10\x90\x1a\x12\x1e\n" +
	"\x19ErrDungeonAwardTriesLimit\x10\x91\x1a\x12\x16\n" +
	"\x11ErrFashionIsLimit\x10\xc9\x1a\x12\x17\n" +
	"\x12ErrFashionNotFound\x10\xca\x1a\x12\x18\n" +
	"\x13ErrFashionSlotEmpty\x10\xcb\x1a\x12\x19\n" +
	"\x14ErrFashionIDNotFound\x10\xcc\x1a\x12\x13\n" +
	"\x0eErrFashionLock\x10\xcd\x1a\x12!\n" +
	"\x1cErrFashCollectionAwardAlread\x10\xce\x1a\x12$\n" +
	"\x1fErrFashCollectionScoreNotEnough\x10\xcf\x1a\x12&\n" +
	"!ErrFashCollectionAwardAlreadMonth\x10\xd0\x1a\x12\x1b\n" +
	"\x16ErrFashionAlreadUnlock\x10\xd1\x1a\x12\x1e\n" +
	"\x19ErrFashionAdvanceNotExist\x10\xd2\x1a\x12\x1c\n" +
	"\x17ErrFashionBaseNotUnlock\x10\xd3\x1a\x12#\n" +
	"\x1eErrFashionAdvanceAlreadyUnlock\x10\xd4\x1a\x12\x1a\n" +
	"\x15ErrCameraNoExistAlbum\x10\xad\x1b\x12\x1c\n" +
	"\x17ErrCameraBeyondPhotoNum\x10\xae\x1b\x12\x1b\n" +
	"\x16ErrCameraBeyondAlumNum\x10\xaf\x1b\x12\x1b\n" +
	"\x16ErrCameraNoAccessRight\x10\xb0\x1b\x12\x1a\n" +
	"\x15ErrCameraNoExistPhoto\x10\xb1\x1b\x12\x1b\n" +
	"\x16ErrCameraBeyondWordNum\x10\xb2\x1b\x12\x1c\n" +
	"\x17ErrCameraPhotoNoInAlbum\x10\xb3\x1b\x12\x18\n" +
	"\x13ErrCameraInnerError\x10\xb4\x1b\x12\x1a\n" +
	"\x15ErrCameraIllegalRight\x10\xb5\x1b\x12\x19\n" +
	"\x14ErrCameraNoExistChar\x10\xb6\x1b\x12\x1d\n" +
	"\x18ErrCameraNoDelCloudAlbum\x10\xb7\x1b\x12\x1d\n" +
	"\x18ErrCameraBeyondMaxURlLen\x10\xb8\x1b\x12\x1d\n" +
	"\x18ErrCameraBeyondMaxXMLLen\x10\xb9\x1b\x12\x1e\n" +
	"\x19ErrCameraBeyondMaxNameLen\x10\xba\x1b\x12\x18\n" +
	"\x13ErrCameraIllegalUrl\x10\xbb\x1b\x12\x1d\n" +
	"\x18ErrCameraRenderInfoEmpty\x10\xbc\x1b\x12 \n" +
	"\x1bErrCameraBeyondPhotoMaxSize\x10\xbd\x1b\x12 \n" +
	"\x1bErrCameraIllegalPictureType\x10\xbe\x1b\x12\x1a\n" +
	"\x15ErrCameraTypeRepeated\x10\xbf\x1b\x12\x1d\n" +
	"\x18ErrCameraWithoutOriginal\x10\xc0\x1b\x12&\n" +
	"!ErrCameraWithoutThumbnailOrRender\x10\xc1\x1b\x12\x1c\n" +
	"\x17ErrCameraPhotoNameEmpty\x10\xc2\x1b\x12 \n" +
	"\x1bErrCameraPhotoNameOutMaxLen\x10\xc3\x1b\x12\x1c\n" +
	"\x17ErrCameraAlbumNameEmpty\x10\xc4\x1b\x12\x19\n" +
	"\x14ErrCameraPhotoHasDel\x10\xc5\x1b\x12\x1b\n" +
	"\x16ErrCameraSysInnerError\x10\xc6\x1b\x12\x1e\n" +
	"\x19ErrCameraIllegalPictureId\x10\xc7\x1b\x12\x1f\n" +
	"\x1aErrCameraBeyondMaxExtraLen\x10\xc8\x1b\x12\x1f\n" +
	"\x1aErrCameraNoIncludeOriginal\x10\xc9\x1b\x12\x1c\n" +
	"\x17ErrCameraNoDealingPhoto\x10\xca\x1b\x12 \n" +
	"\x1bErrCameraNoDealingPhotoType\x10\xcb\x1b\x12\x18\n" +
	"\x13ErrCameraNoAnyAlbum\x10\xcc\x1b\x12\x1a\n" +
	"\x15ErrCameraNoPassReview\x10\xcd\x1b\x12\x1c\n" +
	"\x17ErrCameraPhotoMissImage\x10\xce\x1b\x12\x1e\n" +
	"\x19ErrCameraWithoutThumbnail\x10\xcf\x1b\x12\"\n" +
	"\x1dErrCameraBeyondMaxUploadTimes\x10\xd0\x1b\x12\x1f\n" +
	"\x1aErrInvalidLifeProfessionId\x10\x91\x1c\x12\x1e\n" +
	"\x19ErrLifeProfessionIsUnlock\x10\x92\x1c\x12\x1e\n" +
	"\x19ErrLifeProfessionMaxLevel\x10\x93\x1c\x12$\n" +
	"\x1fErrLifeProfessionLevelNotEnough\x10\x94\x1c\x12$\n" +
	"\x1fErrLifeProfessionLevelRewardGot\x10\x95\x1c\x12-\n" +
	"(ErrInvalidLifeProfessionSpecializationId\x10\x96\x1c\x12-\n" +
	"(ErrLifeProfessionSpecializationNotEnough\x10\x97\x1c\x120\n" +
	"+ErrLifeProfessionSpecializationUpgradeError\x10\x98\x1c\x12$\n" +
	"\x1fErrLifeProfessionPointNotEnough\x10\x99\x1c\x12%\n" +
	" ErrInvalidLifeProfessionTargetId\x10\x9a\x1c\x12%\n" +
	" ErrLifeProfessionTargetNotEnough\x10\x9b\x1c\x12%\n" +
	" ErrLifeProfessionRewardCanNotGet\x10\x9c\x1c\x12\"\n" +
	"\x1dErrLifeProfessionEnergyChange\x10\x9d\x1c\x12$\n" +
	"\x1fErrLifeProfessionRecipeIsUnlock\x10\x9e\x1c\x12$\n" +
	"\x1fErrLifeProfessionRecipeNotExist\x10\x9f\x1c\x12%\n" +
	" ErrLifeProfessionRecipeNotUnlock\x10\xa0\x1c\x12&\n" +
	"!ErrLifeProfessionMaxRDRecipeCount\x10\xa1\x1c\x12#\n" +
	"\x1eErrLifeProfessionWorkingNotEnd\x10\xa2\x1c\x12$\n" +
	"\x1fErrLifeProfessionAlreadyWorking\x10\xa3\x1c\x12 \n" +
	"\x1bErrLifeProfessionNotWorking\x10\xa4\x1c\x12\"\n" +
	"\x1dErrLifeProfessionWorkingIsEnd\x10\xa5\x1c\x12,\n" +
	"'ErrLifeProfessionUnActiveSpecialization\x10\xa6\x1c\x12\x1e\n" +
	"\x19ErrCurLevelConfigNotExist\x10\xa1\x1f\x12\x18\n" +
	"\x13ErrNeedBreakthrough\x10\xa2\x1f\x12 \n" +
	"\x1bErrExperienceConfigNotExist\x10\xa3\x1f\x12\x1a\n" +
	"\x15ErrExperienceMismatch\x10\xa4\x1f\x12\x1d\n" +
	"\x18ErrNotNeedToBreakthrough\x10\xa5\x1f\x12\x1a\n" +
	"\x15ErrConsumeConfigError\x10\xa6\x1f\x12\x15\n" +
	"\x10ErrSkillNotExist\x10\xa7\x1f\x12\x15\n" +
	"\x10ErrSkillLevelMax\x10\xa8\x1f\x12\x1a\n" +
	"\x15ErrSkillLevelNotExist\x10\xa9\x1f\x12\x18\n" +
	"\x13ErrSkillConfigError\x10\xaa\x1f\x12\x14\n" +
	"\x0fErrStarNotExist\x10\xab\x1f\x12\x0f\n" +
	"\n" +
	"ErrMaxStar\x10\xac\x1f\x12\x10\n" +
	"\vErrMaxLevel\x10\xad\x1f\x12\x1b\n" +
	"\x16ErrSkillLevelNotEnough\x10\xae\x1f\x12\x1f\n" +
	"\x1aErrCanNotChangeActionState\x10\xd3\x1f\x12\x16\n" +
	"\x11ErrActionNotExist\x10\xd4\x1f\x12\x15\n" +
	"\x10ErrIsInteracting\x10\xd5\x1f\x12\r\n" +
	"\bErrState\x10\xd6\x1f\x12\x16\n" +
	"\x11ErrRequestExpired\x10\xd7\x1f\x12\x16\n" +
	"\x11ErrStateSetFailed\x10\xe7\x1f\x12\x16\n" +
	"\x11ErrCollectIdError\x10\xe8\x1f\x12\x1a\n" +
	"\x15ErrCollectStateFailed\x10\xe9\x1f\x12\x17\n" +
	"\x12ErrCollectActorErr\x10\xea\x1f\x12\x17\n" +
	"\x12ErrCollectOutRange\x10\xeb\x1f\x12\x1d\n" +
	"\x18ErrCollectConditionEquip\x10\xec\x1f\x12\x1d\n" +
	"\x18ErrCollectConditionQuest\x10\xed\x1f\x12\x18\n" +
	"\x13ErrAlreadyCollected\x10\xee\x1f\x12\x15\n" +
	"\x10ErrMailGetFailed\x10\x85 \x12\x16\n" +
	"\x11ErrMailIllegality\x10\x86 \x12\x11\n" +
	"\fErrMailIsGet\x10\x87 \x12\x11\n" +
	"\fErrMailIsDel\x10\x88 \x12\x19\n" +
	"\x14ErrMailAcceptorEmpty\x10\x89 \x12\x18\n" +
	"\x13ErrMailTokenInvalid\x10\x8a \x12\x16\n" +
	"\x11ErrUnRegisterType\x10\xe9 \x12\x15\n" +
	"\x10ErrIndexNotFound\x10\xea \x12\x1b\n" +
	"\x16ErrCantOpenTreasureBox\x10\xeb \x12\x18\n" +
	"\x13ErrPersonalStateEnd\x10\xec \x12\x1c\n" +
	"\x17ErrPersonalObjectStatus\x10\xed \x12\v\n" +
	"\x06ErrExp\x10\xcd!\x12\r\n" +
	"\bErrLevel\x10\xce!\x12\r\n" +
	"\bErrAward\x10\xcf!\x12\x1a\n" +
	"\x15ErrReceivedLevelAward\x10\xd0!\x12\x16\n" +
	"\x11ErrLevelNotEnough\x10\xd1!\x12\x1a\n" +
	"\x15ErrRoleLevelNoRewards\x10\xd2!\x12\x19\n" +
	"\x14ErrUnionNotHaveLimit\x10\xb1\"\x12\x18\n" +
	"\x13ErrUnionIsNotMember\x10\xb2\"\x12\x1d\n" +
	"\x18ErrUnionOfficialNotExits\x10\xb3\"\x12\x1c\n" +
	"\x17ErrUnionOfficialTooMany\x10\xb4\"\x12\x10\n" +
	"\vErrUnionHas\x10\xb5\"\x12\x12\n" +
	"\rErrUnionReqCd\x10\xb6\"\x12\x13\n" +
	"\x0eErrUnionReqHas\x10\xb7\"\x12\x11\n" +
	"\fErrUnionFull\x10\xb8\"\x12\x13\n" +
	"\x0eErrUnionFailed\x10\xb9\"\x12\x19\n" +
	"\x14ErrUnionNameWrongful\x10\xba\"\x12\x15\n" +
	"\x10ErrUnionNameUsed\x10\xbb\"\x12\x19\n" +
	"\x14ErrUnionNameOccupied\x10\xbc\"\x12\x10\n" +
	"\vErrApplyMax\x10\xbf\"\x12\x19\n" +
	"\x14ErrUnionChangeNameCD\x10\xc0\"\x12\x1a\n" +
	"\x15ErrUnionNameSizeError\x10\xc1\"\x12\x17\n" +
	"\x12ErrDeclarationSize\x10\xc2\"\x12\x18\n" +
	"\x13ErrDeclarationError\x10\xc3\"\x12\x1a\n" +
	"\x15ErrOfficialNameRepeat\x10\xc4\"\x12\x15\n" +
	"\x10ErrDeclarationCd\x10\xc5\"\x12\x13\n" +
	"\x0eErrUnionInfoCd\x10\xc6\"\x12\x15\n" +
	"\x10ErrUnionNotExist\x10\xc7\"\x12!\n" +
	"\x1cErrUnionIllegalConditionType\x10\xc8\"\x12!\n" +
	"\x1cErrUnionRecruitSloganTooLong\x10\xc9\"\x12&\n" +
	"!ErrUnionRecruitDescriptionTooLong\x10\xca\"\x12\x1b\n" +
	"\x16ErrUnionCreateTooOften\x10\xcb\"\x12\x17\n" +
	"\x12ErrUnionTagNoExist\x10\xcc\"\x12\x18\n" +
	"\x13ErrUnionIconTooMuch\x10\xcd\"\x12\x16\n" +
	"\x11ErrUnionGetListCd\x10\xce\"\x12'\n" +
	"\"ErrUnionBatchSearchUnionIdsTooMuch\x10\xcf\"\x12\x1a\n" +
	"\x15ErrUnionBatchSearchCd\x10\xd0\"\x12\x1e\n" +
	"\x19ErrUnionGetCollectedIdsCd\x10\xd1\"\x12\"\n" +
	"\x1dErrUnionBeyondMaxCollectedNum\x10\xd2\"\x12\x1b\n" +
	"\x16ErrUnionIdHasCollected\x10\xd3\"\x12\x1a\n" +
	"\x15ErrUnionIdNoCollected\x10\xd4\"\x12!\n" +
	"\x1cErrUnionActiveValueNotEnough\x10\xd5\"\x12\x1c\n" +
	"\x17ErrUnionIllegalActiveId\x10\xd6\"\x12\x1e\n" +
	"\x19ErrUnionTooShortForAwards\x10\xd7\"\x12\x1c\n" +
	"\x17ErrUnionHasActiveAwards\x10\xd8\"\x12\x13\n" +
	"\x0eErrUnionNoJoin\x10\xd9\"\x12\x1a\n" +
	"\x15ErrUnionOnlyEnterSelf\x10\xda\"\x12\x1a\n" +
	"\x15ErrUnionNoUnlockScene\x10\xdb\"\x12\x1d\n" +
	"\x18ErrUnionBuildingMaxLevel\x10\xdc\"\x12\x1e\n" +
	"\x19ErrUnionBuildingUpgrading\x10\xdd\"\x12$\n" +
	"\x1fErrUnionBuildingUpgradeNoFinish\x10\xde\"\x12\x1e\n" +
	"\x19ErrUnionPrefixBuildNoMeet\x10\xdf\"\x12\x1f\n" +
	"\x1aErrUnionExperienceNoEnough\x10\xe0\"\x12\x1a\n" +
	"\x15ErrUnionMoneyNoEnough\x10\xe1\"\x12 \n" +
	"\x1bErrUnionBuildingNoUpgrading\x10\xe2\"\x12 \n" +
	"\x1bErrUnionSpeedUpItemNoEnough\x10\xe3\"\x12\x1c\n" +
	"\x17ErrUnionSpeedUpTimesOut\x10\xe4\"\x12\x15\n" +
	"\x10ErrUnionTryLater\x10\xe5\"\x12\x1e\n" +
	"\x19ErrUnionSpeedUpLevelError\x10\xe6\"\x12 \n" +
	"\x1bErrUnionUpgradeHasCompleted\x10\xe7\"\x12\x1d\n" +
	"\x18ErrUnionIllegalBuildIdLv\x10\xe8\"\x12\x18\n" +
	"\x13ErrUnionBeyMaxCount\x10\xe9\"\x12\x18\n" +
	"\x13ErrUnionUserNoApply\x10\xea\"\x12\x1b\n" +
	"\x16ErrUnionNoOneKeyNoMuch\x10\xeb\"\x12\x1d\n" +
	"\x18ErrUnionActivityNotStart\x10\xec\"\x12 \n" +
	"\x1bErrUnionActivityNotProgress\x10\xed\"\x12\x1d\n" +
	"\x18ErrUnionActivityAwardGet\x10\xee\"\x12\x1d\n" +
	"\x18ErrUnionActivityNotEnjoy\x10\xef\"\x12\x1f\n" +
	"\x1aErrUnionCreateTimeTooShort\x10\xf0\"\x12\x19\n" +
	"\x14ErrUnionFunctionLock\x10\xf1\"\x12\x18\n" +
	"\x13ErrUnionEScreenLock\x10\xf2\"\x12 \n" +
	"\x1bErrUnionEScreenPositionLock\x10\xf3\"\x12\x19\n" +
	"\x14ErrUnionEScreenNoSet\x10\xf4\"\x12!\n" +
	"\x1cErrUnionEScreenPositionNoSet\x10\xf5\"\x12\x1b\n" +
	"\x16ErrUnionEffectGridLock\x10\xf6\"\x12\x19\n" +
	"\x14ErrUnionEffectIdLock\x10\xf7\"\x12\x1b\n" +
	"\x16ErrUnionEffectPosNoSet\x10\xf8\"\x12\x1c\n" +
	"\x17ErrUnionEffectPosHasEnd\x10\xf9\"\x12\x1b\n" +
	"\x16ErrUnionCrowFuncHasEnd\x10\xfa\"\x12\x1f\n" +
	"\x1aErrUnionCrowFuncPosHasUsed\x10\xfb\"\x12\x1e\n" +
	"\x19ErrUnionCrowFuncHasJoined\x10\xfc\"\x12\x1c\n" +
	"\x17ErrUnionCrowFuncNoBegin\x10\xfd\"\x12!\n" +
	"\x1cErrUnionNoFinishBaseBuilding\x10\xfe\"\x12#\n" +
	"\x1eErrUnionCrowFuncIllegalFuncPos\x10\xff\"\x12\"\n" +
	"\x1dErrUnionEScreenBeyondMaxTimes\x10\x80#\x12\x1f\n" +
	"\x1aErrUnionTargetFunctionLock\x10\x81#\x12\x13\n" +
	"\x0eErrUnionNoMeet\x10\x82#\x12\x1c\n" +
	"\x17ErrUnionActivityAwardCd\x10\x83#\x12\x1c\n" +
	"\x17ErrUnionManagerNoKicked\x10\x84#\x12\x19\n" +
	"\x14ErrUnionDanceNoBegin\x10\x85#\x12\x15\n" +
	"\x10ErrUnionDanceEnd\x10\x86#\x12\x1a\n" +
	"\x15ErrUnionDanceDrawnBox\x10\x87#\x12\x1a\n" +
	"\x15ErrUnionDanceBoxDrawn\x10\x88#\x12\x1b\n" +
	"\x16ErrUnionDanceNoDanceId\x10\x89#\x12\x18\n" +
	"\x13ErrUnionNoJoinDance\x10\x8a#\x12\x1b\n" +
	"\x16ErrUnionDanceNoDancing\x10\x8b#\x12\x19\n" +
	"\x14ErrUnionRejectInvite\x10\x8c#\x12\x1c\n" +
	"\x17ErrUnionActivityHuntEnd\x10\x8d#\x12\x1a\n" +
	"\x15ErrUnionApplyListFull\x10\x8e#\x12\x1a\n" +
	"\x15ErrUionApplyListExist\x10\x8f#\x12\x18\n" +
	"\x13ErrUnionGroupIvalid\x10\x90#\x12\x17\n" +
	"\x12ErrRepeatedRequest\x10\x95#\x12\x18\n" +
	"\x13ErrHasBeenBlackened\x10\x96#\x12\x18\n" +
	"\x13ErrNotFoundCharInfo\x10\x97#\x12\r\n" +
	"\bErrInner\x10\x98#\x12\r\n" +
	"\bErrParam\x10\x99#\x12\x16\n" +
	"\x11ErrSetShowPicture\x10\x9a#\x12\x14\n" +
	"\x0fErrSetSignature\x10\x9b#\x12\x14\n" +
	"\x0fErrSetHobbyMark\x10\x9c#\x12\x13\n" +
	"\x0eErrSetTimeMark\x10\x9d#\x12\x11\n" +
	"\fErrSetRemind\x10\x9e#\x12\x0e\n" +
	"\tErrSetTop\x10\x9f#\x12\x11\n" +
	"\fErrAddFriend\x10\xa0#\x12\x14\n" +
	"\x0fErrSetProcessed\x10\xa1#\x12\x11\n" +
	"\fErrSetRemark\x10\xa2#\x12\x14\n" +
	"\x0fErrDeleteFriend\x10\xa3#\x12\x15\n" +
	"\x10ErrNotFoundGroup\x10\xa4#\x12\x17\n" +
	"\x12ErrNotExistInGroup\x10\xa5#\x12\x13\n" +
	"\x0eErrChangeGroup\x10\xa6#\x12\x15\n" +
	"\x10ErrPersonalState\x10\xa7#\x12\x16\n" +
	"\x11ErrOtherFriendMax\x10\xa8#\x12\x14\n" +
	"\x0fErrCurFriendMax\x10\xa9#\x12\x0e\n" +
	"\tErrConfig\x10\xaa#\x12\x15\n" +
	"\x10ErrAlreadyFriend\x10\xab#\x12\x12\n" +
	"\rErrSearchSelf\x10\xac#\x12\x14\n" +
	"\x0fErrSuggestionCd\x10\xad#\x12\x10\n" +
	"\vErrGroupMax\x10\xae#\x12\x15\n" +
	"\x10ErrGroupNotExist\x10\xaf#\x12\x16\n" +
	"\x11ErrGroupNameEmpty\x10\xb0#\x12\x18\n" +
	"\x13ErrIllegalCharacter\x10\xb1#\x12\x11\n" +
	"\fErrStringMax\x10\xb2#\x12\x1b\n" +
	"\x16ErrOtherApplicationMax\x10\xb3#\x12\"\n" +
	"\x1dErrFriendlinessAwardHasRecord\x10\xb4#\x12&\n" +
	"!ErrFriendlinessLevelLowAwardLevel\x10\xb5#\x12 \n" +
	"\x1bErrFriendBeyondAllFriendNum\x10\xb6#\x12\x1c\n" +
	"\x17ErrFriendIsNoUserFriend\x10\xb7#\x12%\n" +
	" ErrFriendlinessIllegalAwardLevel\x10\xb8#\x12%\n" +
	" ErrFriendlinessLevelAwardIsEmpty\x10\xb9#\x12!\n" +
	"\x1cErrFriendBeBlackenedByTarget\x10\xba#\x12\x1c\n" +
	"\x17ErrFriendApplyEachOther\x10\xbb#\x12!\n" +
	"\x1cErrFriendCallBySmallerCharId\x10\xbc#\x12 \n" +
	"\x1bErrFriendCallByBiggerCharId\x10\xbd#\x12\"\n" +
	"\x1dErrFriendBeBlackenedBySmaller\x10\xbe#\x12!\n" +
	"\x1cErrFriendBeBlackenedByBigger\x10\xbf#\x12\x15\n" +
	"\x10ErrFriendNoApply\x10\xc0#\x12\x17\n" +
	"\x12ErrFriendApplySelf\x10\xc1#\x12\x16\n" +
	"\x11ErrUserNameFormat\x10\xc2#\x12\x1d\n" +
	"\x18ErrFriendGetBaseTooOften\x10\xc3#\x12!\n" +
	"\x1cErrFriendOnlyGetSelfBaseInfo\x10\xc4#\x12\x16\n" +
	"\x11ErrActorGetFailed\x10\xf9#\x12\x15\n" +
	"\x10ErrPivotIsActive\x10\xfa#\x12\x18\n" +
	"\x13ErrPivotIsNotActive\x10\xfb#\x12\x17\n" +
	"\x12ErrBreakPointIsGet\x10\xfc#\x12\x17\n" +
	"\x12ErrActorIsNotPivot\x10\xfd#\x12\x1c\n" +
	"\x17ErrActorIsNotBreakPoint\x10\xfe#\x12 \n" +
	"\x1bErrActorIsBreakPointNotFull\x10\xff#\x12\x1a\n" +
	"\x15ErrPivotRewardIsGiven\x10\x80$\x12\x12\n" +
	"\rErrNotInsight\x10\x81$\x12\x16\n" +
	"\x11ErrLearnSkillFail\x10\xab$\x12\x17\n" +
	"\x12ErrRemoveSkillFail\x10\xac$\x12\x17\n" +
	"\x12ErrUpdateSkillFail\x10\xad$\x12\x19\n" +
	"\x14ErrSkillOperatorType\x10\xae$\x12\x19\n" +
	"\x14ErrContainerOperator\x10\xaf$\x12\x14\n" +
	"\x0fErrExchangeFail\x10\xb0$\x12\x1c\n" +
	"\x17ErrExchangeFailInCombat\x10\xb1$\x12\"\n" +
	"\x1dErrAvatarBeyondMaxPictureSize\x10\xbf$\x12\x16\n" +
	"\x11ErrGetTokenFailed\x10\xc0$\x12\x1b\n" +
	"\x16ErrPictureVerifyFailed\x10\xc1$\x12\x1a\n" +
	"\x15ErrPictureIllegalType\x10\xc2$\x12\x18\n" +
	"\x13ErrPictureErrorInfo\x10\xc3$\x12\x1f\n" +
	"\x1aErrPictureSizeInconsistent\x10\xc4$\x12\x1e\n" +
	"\x19ErrPictureFuncTypeIllegal\x10\xc5$\x12#\n" +
	"\x1eErrPictureCallBackJudgeIllegal\x10\xc6$\x12\x1b\n" +
	"\x16ErrPictureVerifyNoPass\x10\xc7$\x12%\n" +
	" ErrPictureVerifyBackParamIllegal\x10\xc8$\x12#\n" +
	"\x1eErrPictureCallBackParamIllegal\x10\xc9$\x12\x18\n" +
	"\x13ErrPictureIllegalId\x10\xca$\x12\x18\n" +
	"\x13ErrPictureCosErrors\x10\xcb$\x12\x1a\n" +
	"\x15ErrPictureInnerSysErr\x10\xcc$\x12\"\n" +
	"\x1dErrPictureNoSetEnvCosSecretId\x10\xcd$\x12#\n" +
	"\x1eErrPictureNoSetEnvCosSecretKey\x10\xce$\x12#\n" +
	"\x1eErrPictureCheckInMachineLocked\x10\xcf$\x12\x1b\n" +
	"\x16ErrPictureNoTryOutItem\x10\xd0$\x12\x1b\n" +
	"\x16ErrPictureNoUploadItem\x10\xd1$\x12\x16\n" +
	"\x11ErrPictureNoUnion\x10\xd2$\x12\x15\n" +
	"\x10ErrNameSizeError\x10\xdd$\x12\x18\n" +
	"\x13ErrSensitiveContent\x10\xde$\x12\x16\n" +
	"\x11ErrChangeNameFail\x10\xdf$\x12\x1f\n" +
	"\x1aErrChangeNameCardNotEnough\x10\xe0$\x12\x16\n" +
	"\x11ErrChangeSameName\x10\xe1$\x12\x1c\n" +
	"\x17ErrCheckMuteWordsFailed\x10\xe2$\x12\x1b\n" +
	"\x16ErrCheckMuteWordsEmpty\x10\xe4$\x12\x18\n" +
	"\x13ErrChangeShowIdFail\x10\xe7$\x12\x1e\n" +
	"\x19ErrChangeShowIdDuplicated\x10\xe8$\x12!\n" +
	"\x1cErrChangeShowIdCardNotEnough\x10\xe9$\x12\x14\n" +
	"\x0fErrFaceItemLock\x10\xf1$\x12\x16\n" +
	"\x11ErrFaceItemGender\x10\xf2$\x12\x17\n" +
	"\x12ErrFaceNoUploading\x10\xf3$\x12\x1f\n" +
	"\x1aErrFaceNoSupportFileSuffix\x10\xf4$\x12\x1b\n" +
	"\x16ErrFaceFileSuffixEmpty\x10\xf5$\x12\x19\n" +
	"\x14ErrFaceIllegalCosKey\x10\xf6$\x12\x1d\n" +
	"\x18ErrFaceParseSuffixFailed\x10\xf7$\x12 \n" +
	"\x1bErrFaceParseShortGuidFailed\x10\xf8$\x12\x1d\n" +
	"\x18ErrProficiencyNeedUnlock\x10\x8f%\x12\x19\n" +
	"\x14ErrProficiencyUnlock\x10\x90%\x12\x1b\n" +
	"\x16ErrUnlockItemNotEnough\x10\x91%\x12\x15\n" +
	"\x10ErrTaskNotFinish\x10\xa3%\x12\x19\n" +
	"\x14ErrStickerAwardIsGet\x10\xa4%\x12\x16\n" +
	"\x11ErrBookAwardIsGet\x10\xa5%\x12\f\n" +
	"\aErrInCd\x10\xb7%\x12\x16\n" +
	"\x11ErrMoneyNotEnough\x10\xc1%\x12\x17\n" +
	"\x12ErrShopItemCantBuy\x10\xc2%\x12\x13\n" +
	"\x0eErrShopBuyBusy\x10\xc3%\x12\x1d\n" +
	"\x18ErrPaymentConfigNotFound\x10\xc4%\x12\x1e\n" +
	"\x19ErrRefreshShopCountExceed\x10\xc6%\x12\x1b\n" +
	"\x16ErrShopCouponNotEnough\x10\xc7%\x12\x1a\n" +
	"\x15ErrShopCouponLimitNum\x10\xc8%\x12\x1a\n" +
	"\x15ErrShopCantBuyNoPrice\x10\xc9%\x12\x17\n" +
	"\x12ErrNotFoundMonster\x10\xa5&\x12\x12\n" +
	"\rErrNotMonster\x10\xa6&\x12\x1a\n" +
	"\x15ErrMonsterUnlockExist\x10\xa7&\x12\x19\n" +
	"\x14ErrMonsterAwardIsGet\x10\xa8&\x12\x1e\n" +
	"\x19ErrMonsterTargetNotFinish\x10\xa9&\x12\x1a\n" +
	"\x15ErrDropTypeNotSupport\x10\xaa&\x12\x18\n" +
	"\x13ErrCounterNotEnough\x10\xab&\x12\x1d\n" +
	"\x18ErrDropItemAlreadyPicked\x10\xac&\x12\x18\n" +
	"\x13ErrInteractionDoing\x10\xcd&\x12\x1c\n" +
	"\x17ErrInteractionCondition\x10\xce&\x12\x1a\n" +
	"\x15ErrInteractionNotMore\x10\xcf&\x12\x1b\n" +
	"\x16ErrInteractionExistPos\x10\xd0&\x12\x1b\n" +
	"\x16ErrInteractionNotExist\x10\xd1&\x12!\n" +
	"\x1cErrInteractionEntityNotExist\x10\xd2&\x12!\n" +
	"\x1cErrInteractionHandleNotExist\x10\xd3&\x12\x17\n" +
	"\x12ErrInteractionType\x10\xd4&\x12\x16\n" +
	"\x11ErrInteractionBan\x10\xd5&\x12\x19\n" +
	"\x14ErrInteractionConfig\x10\xd6&\x12\x1d\n" +
	"\x18ErrInteractionNotOneself\x10\xd7&\x12\x1b\n" +
	"\x16ErrInteractionDistance\x10\xd8&\x12!\n" +
	"\x1cErrShowPieceIllegalPieceType\x10\xe1&\x12\x1f\n" +
	"\x1aErrShowPieceIllegalPieceId\x10\xe2&\x12!\n" +
	"\x1cErrShowPieceNoInOftenUseList\x10\xe3&\x12\x1d\n" +
	"\x18ErrShowPieceNoUnlockList\x10\xe4&\x12&\n" +
	"!ErrShowPieceRoulettePositionNoSet\x10\xe5&\x12%\n" +
	" ErrShowPieceBeyondOftenUseMaxLen\x10\xe6&\x12/\n" +
	"*ErrShowPieceBeyondOftenRoulettePositionNum\x10\xe7&\x12\x1e\n" +
	"\x19ErrShowPieceNoCommonPiece\x10\xe8&\x12\x19\n" +
	"\x14ErrShowPieceNoTakeOn\x10\xe9&\x12\x1b\n" +
	"\x16ErrProfessionActivated\x10\x89'\x12\x18\n" +
	"\x13ErrProfessionNotHas\x10\x8a'\x12\x19\n" +
	"\x14ErrProfessionSlotErr\x10\x8b'\x12\x1b\n" +
	"\x16ErrProfessionRemoveErr\x10\x8c'\x12 \n" +
	"\x1bErrProfessionChangePlanFail\x10\x8d'\x12$\n" +
	"\x1fErrProfessionStarConfigNotExist\x10\x8e'\x12 \n" +
	"\x1bErrProfessionStarNodeUnlock\x10\x8f'\x12#\n" +
	"\x1eErrProfessionStarNodeNotUnlock\x10\x90'\x12&\n" +
	"!ErrProfessionReplaceSkillNotExist\x10\x91'\x12+\n" +
	"&ErrProfessionUpgradeNotGreaterCurLevel\x10\x92'\x12$\n" +
	"\x1fErrProfessionProfessionBeForged\x10\x93'\x12\"\n" +
	"\x1dErrProfessionSlotTwoNotUnlock\x10\x94'\x12$\n" +
	"\x1fErrProfessionSkillAlreadyActive\x10\x95'\x12(\n" +
	"#ErrProfessionSkillRemodelLevelWrong\x10\x96'\x12\x1e\n" +
	"\x19ErrAoyiSkillAlreadyActive\x10\x97'\x12&\n" +
	"!ErrAoyiSkillRemodelConfigNotExist\x10\x98'\x12\"\n" +
	"\x1dErrAoyiSkillRemodelLevelWrong\x10\x99'\x12\x1f\n" +
	"\x1aErrProfessionEquipInCombat\x10\x9a'\x12 \n" +
	"\x1bErrProfessionSwitchInCombat\x10\x9b'\x12'\n" +
	"\"ErrProfessionDungeonNotAllowSwitch\x10\x9c'\x12!\n" +
	"\x1cErrTalentIllegalTalentPoolId\x10\xed'\x12'\n" +
	"\"ErrTalentBeyondCurTalentMaxPlanNum\x10\xee'\x12\x1a\n" +
	"\x15ErrTalentPoolNoActive\x10\xf4'\x12\x1a\n" +
	"\x15ErrTalentPlanNoActive\x10\xf5'\x12\x1d\n" +
	"\x18ErrTalentIllegalTalentId\x10\xf6'\x12\x1f\n" +
	"\x1aErrTalentTalentHasUnlocked\x10\xf7'\x12\x1e\n" +
	"\x19ErrTalentTalentNoUnlocked\x10\xf8'\x121\n" +
	",ErrTalentChangeLvPassiveTalentMoreThanInPool\x10\xf9'\x12\x1e\n" +
	"\x19ErrTalentRepeatedTalentId\x10\xfa'\x12!\n" +
	"\x1cErrTalentNoPoolPassiveTalent\x10\xfb'\x12\"\n" +
	"\x1dErrTalentTalentPointsNoEnough\x10\xfc'\x12&\n" +
	"!ErrTalentPassiveTalentListNoEmpty\x10\xfe'\x12 \n" +
	"\x1bErrTalentIllegalTalentLevel\x10\xff'\x12$\n" +
	"\x1fErrTalentNoMeetUpgradeCondition\x10\x80(\x12#\n" +
	"\x1eErrTalentNoSupportDownLevelNow\x10\x81(\x12 \n" +
	"\x1bErrTalentNoMeetPrevTalentLv\x10\x82(\x12#\n" +
	"\x1eErrTalentNoMeetPrevTalentPoint\x10\x83(\x12!\n" +
	"\x1cErrTalentTreeNodeBDExclusive\x10\x84(\x12'\n" +
	"\"ErrTalentTotalTalentPointNotEnough\x10\x85(\x12'\n" +
	"\"ErrTalentPreTalentNodeNotActivated\x10\x86(\x12!\n" +
	"\x1cErrTalentResetTalentInCombat\x10\x87(\x12\x18\n" +
	"\x13ErrCookBookNotExist\x10\x9f(\x12\x19\n" +
	"\x14ErrCookFoodNotEnough\x10\xa0(\x12\x14\n" +
	"\x0fErrCookTypeMore\x10\xa1(\x12\x15\n" +
	"\x10ErrCookCountMore\x10\xa2(\x12\x13\n" +
	"\x0eErrCookHasBook\x10\xa3(\x12\x1c\n" +
	"\x17ErrCookMaterialNotMatch\x10\xa4(\x12$\n" +
	"\x1fErrChatIllegalPrivateChatTarget\x10\xd1(\x12\x1d\n" +
	"\x18ErrChatInTargetBlockList\x10\xd2(\x12!\n" +
	"\x1cErrChatSendMsgBeyondMaxWords\x10\xd3(\x12 \n" +
	"\x1bErrChatWorldChannelIdIsZero\x10\xd4(\x12%\n" +
	" ErrChatWorldChannelIdBeyondMaxId\x10\xd5(\x12\x1e\n" +
	"\x19ErrChatIllegalChannelType\x10\xd6(\x12\x1a\n" +
	"\x15ErrChatIllegalMsgType\x10\xd7(\x12\x1b\n" +
	"\x16ErrChatNoInGoalChannel\x10\xd8(\x12\x1f\n" +
	"\x1aErrChatNeedConfigIdNotZero\x10\xd9(\x12\x1f\n" +
	"\x1aErrChatNeedMsgTextNotEmpty\x10\xda(\x12\x17\n" +
	"\x12ErrChatSendCdNoEnd\x10\xdb(\x12\x1d\n" +
	"\x18ErrChatRecordListIsEmpty\x10\xdc(\x12\"\n" +
	"\x1dErrChatTargetNotInPrivateList\x10\xdd(\x12%\n" +
	" ErrChatMsgIdMoreThanMaxReadMsgId\x10\xde(\x12 \n" +
	"\x1bErrChatBeyondBlockListLimit\x10\xdf(\x12&\n" +
	"!ErrChatWorldChannelIdBeyondMaxNum\x10\xe0(\x12\x1d\n" +
	"\x18ErrChatBeyondMaxRecordId\x10\xe1(\x12\"\n" +
	"\x1dErrChatNoCreatePrivateSession\x10\xe2(\x12!\n" +
	"\x1cErrChatPrivateSessionHasExit\x10\xe3(\x12\x11\n" +
	"\fErrChatBeBan\x10\xe4(\x12\x19\n" +
	"\x14ErrChatFileIdTooLong\x10\xe5(\x12\x17\n" +
	"\x12ErrChatFileIdEmpty\x10\xe6(\x12\x18\n" +
	"\x13ErrChatMsgInfoEmpty\x10\xe7(\x12\x1a\n" +
	"\x15ErrChatNoShareChannel\x10\xe8(\x12\x1c\n" +
	"\x17ErrChatIllegalShareType\x10\xe9(\x12\x1d\n" +
	"\x18ErrChatIllegalHolderType\x10\xea(\x12\x1e\n" +
	"\x19ErrChatNoSupportShareType\x10\xeb(\x12\x1c\n" +
	"\x17ErrChatShareTpeNoChatId\x10\xec(\x12\x1b\n" +
	"\x16ErrChatShareNoFishRank\x10\xed(\x12\x16\n" +
	"\x11ErrChatLevelLimit\x10\xee(\x12!\n" +
	"\x1cErrChatNoFoundBlockListLimit\x10\xef(\x12\"\n" +
	"\x1dErrTalentModTalentTagNotExist\x10\xb5)\x12\x1a\n" +
	"\x15ErrTextCheckForbidden\x10\xe7)\x12\x1c\n" +
	"\x17ErrTextCheckNoSceneType\x10\xe8)\x12\x18\n" +
	"\x13ErrTextCheckIllegal\x10\xe9)\x12\x1a\n" +
	"\x15ErrTextCheckHttpError\x10\xea)\x12\x1d\n" +
	"\x18ErrTextCheckTooManyItems\x10\xeb)\x12\x1a\n" +
	"\x15ErrConditionTimerOpen\x10\x99*\x12\x1b\n" +
	"\x16ErrConditionOpenServer\x10\x9a*\x12\x14\n" +
	"\x0fErrSkillDisable\x10\xc4,\x12\x11\n" +
	"\fErrSkillIsCD\x10\xc5,\x12\x1c\n" +
	"\x17ErrSkillMaxPassiveCount\x10\xc6,\x12\x11\n" +
	"\fErrSkillInit\x10\xc7,\x12\x11\n" +
	"\fErrSkillInfo\x10\xc8,\x12$\n" +
	"\x1fErrUseSkillFightResInsufficient\x10\xc9,\x12\x1d\n" +
	"\x18ErrUseSkillBuffNotEnough\x10\xca,\x12 \n" +
	"\x1bErrUseSkillItemInsufficient\x10\xcb,\x12 \n" +
	"\x1bErrUseSkillAttrInsufficient\x10\xcc,\x12%\n" +
	" ErrUseSkillEnduranceInsufficient\x10\xcd,\x12\x1b\n" +
	"\x16ErrUseSkillStateChange\x10\xce,\x12\x1f\n" +
	"\x1aErrUseSkillClientSkillUuid\x10\xcf,\x12'\n" +
	"\"ErrFightLogicConditionBlockInvalid\x10\xe2,\x12$\n" +
	"\x1fErrFightLogicActionGroupInvalid\x10\xe3,\x12#\n" +
	"\x1eErrFightLogicConditionNotMatch\x10\xe4,\x12 \n" +
	"\x1bErrFightLogicRunDataInvalid\x10\xe5,\x12\x19\n" +
	"\x14ErrSkillStageNotFind\x10\xe6,\x12\x18\n" +
	"\x13ErrConditionCfgSize\x10\xf0.\x12\x1b\n" +
	"\x16ErrConditionDissatisfy\x10\xf1.\x12\x1d\n" +
	"\x18ErrConditionObjectIsNull\x10\xf2.\x12\x1d\n" +
	"\x18ErrConditionTypeNotFound\x10\xf3.\x12\x1c\n" +
	"\x17ErrConditionEntityDeath\x10\xf4.\x12\x1b\n" +
	"\x16ErrConditionUnionLevel\x10\xf5.\x12\x1b\n" +
	"\x16ErrConditionUnionMoney\x10\xf6.\x12\x18\n" +
	"\x13ErrConditionNotMeet\x10\xf7.\x12 \n" +
	"\x1bErrConditionNotInShapeShift\x10\xf8.\x12 \n" +
	"\x1bErrSeasonAchievementNoExist\x10\xd5/\x12!\n" +
	"\x1cErrSeasonAchievementNoFinish\x10\xd6/\x12$\n" +
	"\x1fErrSeasonAchievementHasReceived\x10\xd7/\x12)\n" +
	"$ErrSeasonAchievementPrevIdNoReceived\x10\xd8/\x12&\n" +
	"!ErrSeasonAchievementPrevIdNoExist\x10\xd9/\x12*\n" +
	"%ErrSeasonAchievementTargetConfigError\x10\xda/\x12\x18\n" +
	"\x13ErrSeasonRankHasMax\x10\x870\x12\x1d\n" +
	"\x18ErrSeasonRankHasReceived\x10\x880\x12\x1b\n" +
	"\x16ErrSeasonRankNoAchieve\x10\x890\x12!\n" +
	"\x1cErrSeasonRankCurSeasonIdZero\x10\x8a0\x12!\n" +
	"\x1cErrSeasonRankNoMeetCondition\x10\x8b0\x12\x1e\n" +
	"\x19ErrSeasonRankSeasonNoSame\x10\x8c0\x12\x1a\n" +
	"\x15ErrBattlePassBuyLevel\x10\xb90\x12\x1d\n" +
	"\x18ErrBattlePassBuyMaterial\x10\xba0\x12\x1a\n" +
	"\x15ErrBattlePassAwardGet\x10\xbb0\x12 \n" +
	"\x1bErrBattlePassAwardNotUnlock\x10\xbc0\x12!\n" +
	"\x1cErrBattlePassBuyWeekExpLimit\x10\xbd0\x12\x1c\n" +
	"\x17ErrBattlePassLevelError\x10\xbe0\x12\x16\n" +
	"\x11ErrNoRefreshTimes\x10\xbf0\x12\x1a\n" +
	"\x15ErrTargetNotCompleted\x10\xc00\x12\x1b\n" +
	"\x16ErrOnlinePeriodTooMore\x10\xeb0\x12\x1a\n" +
	"\x15ErrPersonalTagTooMore\x10\xec0\x12\x1b\n" +
	"\x16ErrPersonalTagNotFound\x10\xed0\x12\x1e\n" +
	"\x19ErrPersonalAvatarUnearned\x10\xee0\x12#\n" +
	"\x1eErrPersonalAvatarFrameUnearned\x10\xef0\x12!\n" +
	"\x1cErrPersonalCardStyleUnearned\x10\xf00\x12\x1c\n" +
	"\x17ErrPersonalPhotoTooMore\x10\xf10\x12\x1d\n" +
	"\x18ErrPersonalMedalUnearned\x10\xf20\x12\x1c\n" +
	"\x17ErrPersonalTargetUnlock\x10\xf30\x12 \n" +
	"\x1bErrPersonalTargetAlreadyGet\x10\xf40\x12 \n" +
	"\x1bErrPersonalMedalInvalidSlot\x10\xf50\x12#\n" +
	"\x1eErrPersonalMedalDuplicateValue\x10\xf60\x12\x1d\n" +
	"\x18ErrOnlinePeriodDuplicate\x10\xf70\x12\x1c\n" +
	"\x17ErrPersonalTagDuplicate\x10\xf80\x12 \n" +
	"\x1bErrPersonalPhotoInvalidSlot\x10\xf90\x12#\n" +
	"\x1eErrPersonalPhotoDuplicateValue\x10\xfa0\x12(\n" +
	"#ErrSeasonMedalNoMeetActiveCondition\x10\x9d1\x12)\n" +
	"$ErrSeasonMedalNoMeetUpgradeCondition\x10\x9e1\x12%\n" +
	" ErrSeasonMedalActiveMeetNoEnough\x10\x9f1\x12&\n" +
	"!ErrSeasonMedalUpgradeMeetNoEnough\x10\xa01\x12 \n" +
	"\x1bErrSeasonMedalIllegalNodeId\x10\xa11\x12(\n" +
	"#ErrSeasonMedalChooseNodeIdBeyondMax\x10\xa21\x12\x1e\n" +
	"\x19ErrSeasonMedalHoleNoExist\x10\xa31\x12\x1b\n" +
	"\x16ErrSeasonMedalHoleLock\x10\xa41\x12\x1e\n" +
	"\x19ErrSeasonMedalNodeNoExist\x10\xa51\x12\x1c\n" +
	"\x17ErrSeasonMedalHoleNoGet\x10\xa61\x12\x1f\n" +
	"\x1aErrSeasonMedalMaxHoleLevel\x10\xa71\x12\x1f\n" +
	"\x1aErrSeasonMedalCoreHoleLock\x10\xa81\x12'\n" +
	"\"ErrSeasonMedalUpgradeMoneyNoEnough\x10\xa91\x12\x18\n" +
	"\x13ErrSeasonNoCoreHole\x10\xaa1\x12\x1a\n" +
	"\x15ErrSeasonNoNormalHole\x10\xab1\x12*\n" +
	"%ErrSeasonMedalNoUpgradeNormalHoleItem\x10\xac1\x12\x1a\n" +
	"\x15ErrSceneLineNotExists\x10\xcf1\x12\x1a\n" +
	"\x15ErrSceneLineRefreshCd\x10\xd01\x12\x1d\n" +
	"\x18ErrSceneLineNotSameScene\x10\xd11\x12\x19\n" +
	"\x14ErrSceneLineSameLine\x10\xd21\x12\x1c\n" +
	"\x17ErrSceneLineInteracting\x10\xd31\x12\x19\n" +
	"\x14ErrSceneLineUserDead\x10\xd41\x12\x15\n" +
	"\x10ErrSceneLineFull\x10\xd51\x12\x19\n" +
	"\x14ErrSceneLineChangeCd\x10\xd61\x12\x1b\n" +
	"\x16ErrSceneVersionRecycle\x10\xd71\x12\x15\n" +
	"\x10ErrSceneLineKick\x10\xd81\x12\x19\n" +
	"\x14ErrInstallSlotFailed\x10\x812\x12\x15\n" +
	"\x10ErrUseSlotFailed\x10\x822\x12\x13\n" +
	"\x0eErrUseSlotInCd\x10\x832\x12#\n" +
	"\x1eErrInstatallSlotFailedInCombat\x10\x842\x12\x17\n" +
	"\x12ErrSlotSkillUnLoad\x10\x852\x12\x19\n" +
	"\x14ErrUseCfgSkillFailed\x10\x862\x12\x1a\n" +
	"\x15ErrResonanceNotExists\x10\x872\x12\x17\n" +
	"\x12ErrResonanceUnLoad\x10\x882\x12\x16\n" +
	"\x11ErrUseDodgeFailed\x10\x892\x12\x1b\n" +
	"\x16ErrUseFixedSkillFailed\x10\x8a2\x12\x17\n" +
	"\x12ErrUseBlockedSkill\x10\x8b2\x12\x1b\n" +
	"\x16ErrInstallBlockedSkill\x10\x8c2\x12\x18\n" +
	"\x13ErrExchangeNotFound\x10\xb32\x12\x19\n" +
	"\x14ErrExchangeNotEnough\x10\xb42\x12\x19\n" +
	"\x14ErrExchangeItemLimit\x10\xb52\x12\x19\n" +
	"\x14ErrExchangeStepRange\x10\xb62\x12\x18\n" +
	"\x13ErrExchangeItemFull\x10\xb72\x12\x1b\n" +
	"\x16ErrExchangePackageFull\x10\xb82\x12 \n" +
	"\x1bErrExchangePriceItemNotFind\x10\xb92\x12\x1f\n" +
	"\x1aErrExchangeBuyNumNotEnough\x10\xba2\x12\x1f\n" +
	"\x1aErrExchangeBuyItemNotFound\x10\xbb2\x12!\n" +
	"\x1cErrExchangeTakeFailDelayTime\x10\xbc2\x12\x1f\n" +
	"\x1aErrExchangeTakeFailSellNum\x10\xbd2\x12 \n" +
	"\x1bErrExchangeTakeItemNotFound\x10\xbe2\x12\x1f\n" +
	"\x1aErrExchangeWithdrawNoMoney\x10\xbf2\x12 \n" +
	"\x1bErrExchangeDepositNotEnough\x10\xc02\x12.\n" +
	")ErrExchangeItemNotBindOrCooldownNotExpire\x10\xc12\x12\x14\n" +
	"\x0fErrExchangeInCd\x10\xc22\x12#\n" +
	"\x1eErrExchangeBuyCurrencyNoEnough\x10\xc32\x12!\n" +
	"\x1cErrExchangeItemDelayTimeOver\x10\xc42\x12!\n" +
	"\x1cErrExchangeItemIsNotWithdraw\x10\xc52\x12\x1c\n" +
	"\x17ErrExchangeBuyItemLimit\x10\xc62\x12'\n" +
	"\"ErrExchangeItemIsNotNoticeShopItem\x10\xc72\x12#\n" +
	"\x1eErrExchangeItemIsPreBuyAlready\x10\xc82\x12\x1d\n" +
	"\x18ErrExchangeItemNotPublic\x10\xc92\x12\x1d\n" +
	"\x18ErrExchangeSaleRankExist\x10\xca2\x12\x1c\n" +
	"\x17ErrExchangeSaleItemFull\x10\xcb2\x12$\n" +
	"\x1fErrExchangeSaleDiamondNotEnough\x10\xcc2\x12!\n" +
	"\x1cErrExchangeSaleItemNotExists\x10\xcd2\x12'\n" +
	"\"ErrExchangeBuySaleCurrencyNoEnough\x10\xce2\x12 \n" +
	"\x1bErrExchangeDiamondNotEnough\x10\xcf2\x12\x1d\n" +
	"\x18ErrExchangeSaleTakeOffCd\x10\xd02\x12\x1f\n" +
	"\x1aErrExchangeSaleRateInvalid\x10\xd12\x12\x1b\n" +
	"\x16ErrExchangePreItemFull\x10\xd22\x12\x1e\n" +
	"\x19ErrExchangeSaleNumInvalid\x10\xd32\x12\x1f\n" +
	"\x1aErrExchangeCareItemAlready\x10\xd42\x12\x1a\n" +
	"\x15ErrExchangePriceRange\x10\xd52\x12\x1c\n" +
	"\x17ErrExchangeRequestLimit\x10\xd62\x12\x1a\n" +
	"\x15ErrExchangeItemBanned\x10\xd72\x12\x1b\n" +
	"\x16ErrExchangePriceNotLow\x10\xd82\x12\x1b\n" +
	"\x16ErrExchangeItemNotFind\x10\xd92\x12!\n" +
	"\x1cErrExchangeItemExistMinPrice\x10\xda2\x12\x1d\n" +
	"\x18ErrExchangeNoticeItemMin\x10\xdb2\x12\x1e\n" +
	"\x19ErrExchangePreBuyUserFull\x10\xdc2\x12\x18\n" +
	"\x13ErrModHoleNotUnlock\x10\xe52\x12\x13\n" +
	"\x0eErrModNotExist\x10\xe62\x12\x1a\n" +
	"\x15ErrModSimilarRepeated\x10\xe72\x12\x1c\n" +
	"\x17ErrModTypeLimitExceeded\x10\xe82\x12\x17\n" +
	"\x12ErrModPartNotExist\x10\xe92\x12\x1b\n" +
	"\x16ErrModPartEnhanceLimit\x10\xea2\x12\x10\n" +
	"\vErrModInUse\x10\xeb2\x12\x1b\n" +
	"\x16ErrModAlreadyInstalled\x10\xec2\x12\x1d\n" +
	"\x18ErrModInitConfigNotExist\x10\xed2\x12\x17\n" +
	"\x12ErrModPartOverflow\x10\xee2\x12\x15\n" +
	"\x10ErrModCanNotLink\x10\xef2\x12\x19\n" +
	"\x14ErrFishingNotUseBait\x10\x973\x12\x1b\n" +
	"\x16ErrFishingRandomFailed\x10\x983\x12!\n" +
	"\x1cErrFishingAlreadyGetFishItem\x10\x993\x12\x1d\n" +
	"\x18ErrFishingGetFishIdWrong\x10\x9a3\x12\x15\n" +
	"\x10ErrFishingNotGet\x10\x9b3\x12\x1d\n" +
	"\x18ErrFishingNotResearchYet\x10\x9c3\x12\x18\n" +
	"\x13ErrFishingNotUseRod\x10\x9d3\x12\x15\n" +
	"\x10ErrFishingNoSeat\x10\x9e3\x12\x1b\n" +
	"\x16ErrFishingCantResearch\x10\x9f3\x12\x1b\n" +
	"\x16ErrFishDrawnLevelAward\x10\xa03\x12 \n" +
	"\x1bErrFishCannotDrawLevelAward\x10\xa13\x12\x1d\n" +
	"\x18ErrFishDrawnNoLevelAward\x10\xa23\x12\x1d\n" +
	"\x18ErrFreightNoRefreshGoods\x10\xc93\x12\x1d\n" +
	"\x18ErrFreightBeyondMaxValue\x10\xca3\x12\x1b\n" +
	"\x16ErrFreightDownMinValue\x10\xcb3\x12\x18\n" +
	"\x13ErrFreightHasSetOff\x10\xcc3\x12\x17\n" +
	"\x12ErrFreightNoSetOff\x10\xcd3\x12\x18\n" +
	"\x13ErrFreightHasReward\x10\xce3\x12\x1d\n" +
	"\x18ErrFreightIllegalGoodsId\x10\xcf3\x12\x1b\n" +
	"\x16ErrFreightItemNoEnough\x10\xd03\x12\x1d\n" +
	"\x18ErrFreightNoUpSetOffTime\x10\xd13\x12\x1d\n" +
	"\x18ErrFreightNoUpRewardTime\x10\xd23\x12\x19\n" +
	"\x14ErrFreightAutoSetOff\x10\xd33\x12!\n" +
	"\x1cErrTrialRoadAwardNotFinished\x10\xfb3\x12\x1d\n" +
	"\x18ErrTrialRoadAwardRoomGet\x10\xfc3\x12\x12\n" +
	"\rErrNotCanRide\x10\xad4\x12\x1a\n" +
	"\x15ErrCombatStateNotRide\x10\xae4\x12\x13\n" +
	"\x0eErrAlreadyRide\x10\xaf4\x12\x15\n" +
	"\x10ErrRideNotEnough\x10\xb04\x12 \n" +
	"\x1bErrCreateVehicleActorFailed\x10\xb14\x12\x17\n" +
	"\x12ErrNotVehicleOwner\x10\xb24\x12\x1c\n" +
	"\x17ErrVehicleHasController\x10\xb34\x12\x15\n" +
	"\x10ErrVehicleNoSeat\x10\xb44\x12\x16\n" +
	"\x11ErrVehicleHasSeat\x10\xb54\x12\x16\n" +
	"\x11ErrNotRideVehicle\x10\xb64\x12\x17\n" +
	"\x12ErrVehicleNotExits\x10\xb74\x12\x1f\n" +
	"\x1aErrInvalidRidePropertyType\x10\xb84\x12#\n" +
	"\x1eErrRideApplyTargetUserNotExist\x10\xb94\x12\x19\n" +
	"\x14ErrRideConfigNotFind\x10\xba4\x12\x15\n" +
	"\x10ErrRideNotUnlock\x10\xbb4\x12\x13\n" +
	"\x0eErrRideNotFind\x10\xbc4\x12\x17\n" +
	"\x12ErrInvalidRideType\x10\xbd4\x12\x1d\n" +
	"\x18ErrRideApplyAlreadyExist\x10\xbe4\x12\x1f\n" +
	"\x1aErrRideApplyNotRideVehicle\x10\xbf4\x12\x1f\n" +
	"\x1aErrRideApplyVehicleNotSeat\x10\xc04\x12\x17\n" +
	"\x12ErrRideAlReadyRide\x10\xc14\x12\x1d\n" +
	"\x18ErrRideApplyTargetTooFar\x10\xc24\x12\x13\n" +
	"\x0eErrRideNotTake\x10\xc34\x12\x17\n" +
	"\x12ErrRideInteracting\x10\xc44\x12\x19\n" +
	"\x14ErrShapeshiftNotRide\x10\xc54\x12\x16\n" +
	"\x11ErrFishingNotRide\x10\xc64\x12\x17\n" +
	"\x12ErrRideStateReject\x10\xc74\x12\x1a\n" +
	"\x15ErrRideTypeNotSupport\x10\xc84\x12\x16\n" +
	"\x11ErrRideNotControl\x10\xc94\x12\x17\n" +
	"\x12ErrRideNotFunction\x10\xca4\x12\x1a\n" +
	"\x15ErrRideSkinNotSupport\x10\xcb4\x12\x19\n" +
	"\x14ErrRideSkinNotUnlock\x10\xcc4\x12\x1d\n" +
	"\x18ErrRideSkinDataAddFailed\x10\xcd4\x12\x17\n" +
	"\x12ErrRideSkinNotSkin\x10\xce4\x12\x1f\n" +
	"\x1aErrRideSkinAlreadyActivate\x10\xcf4\x12\x14\n" +
	"\x0fErrWarehouseHas\x10\xd86\x12\x16\n" +
	"\x11ErrWarehouseNoHas\x10\xd96\x12\x16\n" +
	"\x11ErrWarehouseNoMem\x10\xda6\x12\x1c\n" +
	"\x17ErrWarehouseNoPresident\x10\xdb6\x12\x1a\n" +
	"\x15ErrWarehouseNoHasItem\x10\xdc6\x12\x1e\n" +
	"\x19ErrWarehouseItemNoDeposit\x10\xdd6\x12\x1f\n" +
	"\x1aErrWarehouseGridPosNoExist\x10\xde6\x12$\n" +
	"\x1fErrWarehouseGridPosItemNoEnough\x10\xdf6\x12\x1d\n" +
	"\x18ErrWarehouseNoInviteSelf\x10\xe06\x12\x1c\n" +
	"\x17ErrWarehouseInviteesHas\x10\xe16\x12\x1d\n" +
	"\x18ErrWarehouseMemBeyondMax\x10\xe26\x12\x1e\n" +
	"\x19ErrWarehouseGridBeyondMax\x10\xe36\x12\x17\n" +
	"\x12ErrWarehouseNoSelf\x10\xe46\x12\x16\n" +
	"\x11ErrWarehouseIsMem\x10\xe56\x12\x18\n" +
	"\x13ErrWarehouseNoExist\x10\xe66\x12!\n" +
	"\x1cErrWarehouseDepositBeyondMax\x10\xe76\x12!\n" +
	"\x1cErrWarehouseTakeOutBeyondMax\x10\xe86\x12\x1e\n" +
	"\x19ErrWarehouseItemIdNotSame\x10\xe96\x12\x17\n" +
	"\x12ErrWarehouseParams\x10\xea6\x12\x1b\n" +
	"\x16ErrWarehouseNoKickSelf\x10\xeb6\x12 \n" +
	"\x1bErrWarehousePresidentNoExit\x10\xec6\x12\x16\n" +
	"\x11ErrGashaDrawCount\x10\xed6\x12\x16\n" +
	"\x11ErrGashaDrawLimit\x10\xee6\x12\x1a\n" +
	"\x15ErrGashaInvalidWishId\x10\xef6\x12\x19\n" +
	"\x14EErGashaWishRepeated\x10\xf26\x12\x1e\n" +
	"\x19EErGashaWishCountNoEnough\x10\xf36\x12\x1a\n" +
	"\x15ErrWarehouseAuthority\x10\xf46\x12\x1a\n" +
	"\x15ErrEquipCantDecompose\x10\x8b7\x12\x1c\n" +
	"\x17ErrEquipNotRecastRecord\x10\x8c7\x12$\n" +
	"\x1fErrEquipOnCantUsedRecastConsume\x10\x8d7\x12%\n" +
	" ErrEquipWeaponNotEqualProfession\x10\x8e7\x12\"\n" +
	"\x1dErrEquipSlotRefineBlessNotFit\x10\x8f7\x12\x16\n" +
	"\x11ErrEquipNotRecast\x10\x907\x12 \n" +
	"\x1bErrEquipEnchantItemMismatch\x10\x917\x12$\n" +
	"\x1fErrEquipEnchantAlreadyEnchanted\x10\x927\x12\x1c\n" +
	"\x17ErrEquipAnyItemMismatch\x10\x937\x12&\n" +
	"!ErrEquipSlotRefineBlessNumTooMuch\x10\x947\x12\x1d\n" +
	"\x18ErrEquipNameGroupNoMatch\x10\x957\x12\x1e\n" +
	"\x19ErrEquipPerfectionNoMatch\x10\x967\x12\x15\n" +
	"\x10ErrEquipNotBreak\x10\x977\x12\x15\n" +
	"\x10ErrEquipPutOnIng\x10\x987\x12\x16\n" +
	"\x11ErrUserIsMatching\x10\xbd7\x12\x19\n" +
	"\x14ErrUserNotInMatching\x10\xbe7\x12\x17\n" +
	"\x12ErrUseNotWaitReady\x10\xbf7\x12\x18\n" +
	"\x13ErrDungeonCantMatch\x10\xc07\x12\x16\n" +
	"\x11ErrMatchQueueFull\x10\xc17\x12\x1e\n" +
	"\x19ErrCommonAwardCantReceive\x10\xef7\x12\x1e\n" +
	"\x19ErrCommonAwardHasReceived\x10\xf07\x12\x1c\n" +
	"\x17ErrCraftEnergyNotEnough\x10\xa18\x12\x17\n" +
	"\x12ErrCraftEnergyFull\x10\xa28\x12\x1c\n" +
	"\x17ErrRecommendPlayNotOpen\x10\xd28\x12\x1a\n" +
	"\x15ErrWeeklyTowerNoStart\x10\xd38\x12\x19\n" +
	"\x14ErrWeeklyTowerHasEnd\x10\xd48\x12 \n" +
	"\x1bErrWeeklyNoMeetProcessAward\x10\xd58\x12#\n" +
	"\x1eErrWeeklyHasRewardProcessAward\x10\xd68\x12\x1f\n" +
	"\x1aErrWeeklyNoLayerStageAward\x10\xd78\x12\x1e\n" +
	"\x19ErrWeekOnlyCurSeasonAward\x10\xd88\x12#\n" +
	"\x1eErrWeeklyTowerCannotEnterLayer\x10\xd98\x12\x1d\n" +
	"\x18ErrWeeklyTowerBoxHasOpen\x10\xda8\x12\x18\n" +
	"\x13ErrWeeklyTowerNoBox\x10\xdb8\x12\x1f\n" +
	"\x1aErrWeeklyTowerNoStageAward\x10\xdc8\x12!\n" +
	"\x1cErrWeeklyTowerNoTowerDungeon\x10\xdd8\x12\x17\n" +
	"\x12ErrFunctionNoAward\x10\xe78\x12\x18\n" +
	"\x13ErrFunctionHasDrawn\x10\xe88\x12\x1d\n" +
	"\x18ErrTLogIllegalExportArea\x10\xf18\x12\x14\n" +
	"\x0fErrPayOrderFail\x10\x849\x12\x18\n" +
	"\x13ErrPayCostNotEnough\x10\x859\x12\x12\n" +
	"\rErrPayCantBuy\x10\x869\x12\x16\n" +
	"\x11ErrPayCantExplore\x10\x879\x12\x17\n" +
	"\x12ErrActivityNotFind\x10\xb69\x12\x17\n" +
	"\x12ErrActivityOffline\x10\xb79\x12\x17\n" +
	"\x12ErrActivityNotOpen\x10\xb89\x12\x1e\n" +
	"\x19ErrActivityRewardNotFound\x10\xb99\x12\"\n" +
	"\x1dErrActivityConditionNotFinish\x10\xba9\x12\x1d\n" +
	"\x18ErrActivityAlreadyObtain\x10\xbb9\x12\x19\n" +
	"\x14ErrActivityNotUnlock\x10\xbc9\x12\x18\n" +
	"\x13ErrEmojiConfigError\x10\xe99\x12\x1a\n" +
	"\x15ErrEmojiAlreadyUnlock\x10\xea9\x12\x1c\n" +
	"\x17ErrEmojiUnlockItemError\x10\xeb9\x12)\n" +
	"$ErrEmojiUnlockItemErrorItemNotEnough\x10\xec9\x12\x13\n" +
	"\x0eErrEmojiUnlock\x10\xed9\x12\x1f\n" +
	"\x1aErrGlobalConditionNotFound\x10\xee9\x12$\n" +
	"\x1fErrGlobalConditionNotLuckyValue\x10\xef9\x12\x17\n" +
	"\x12ErrPathFindingCant\x10\xf49\x12\x1c\n" +
	"\x17ErrPathFindingDataError\x10\xf59\x12\x1e\n" +
	"\x19ErrPathFindingEndPosError\x10\xf69\x12 \n" +
	"\x1bErrPathFindingStartPosError\x10\xf79\x12\x19\n" +
	"\x14ErrPathFindingNoPath\x10\xf89\x12\x13\n" +
	"\x0eErrSignNotOpen\x10\xfd9\x12\x15\n" +
	"\x10ErrSignNotSigned\x10\xfe9\x12\x19\n" +
	"\x14ErrSignAlreadySigned\x10\xff9\x12\x15\n" +
	"\x10ErrSignTimeError\x10\x80:\x12\x18\n" +
	"\x13ErrTokenBucketLimit\x10\x8eN\x12\x0f\n" +
	"\n" +
	"ErrUnknown\x10\x8fN*N\n" +
	"\x10EQuestStepStatus\x12\x12\n" +
	"\x0eQuestStepGoing\x10\x00\x12\x13\n" +
	"\x0fQuestStepFinish\x10\x01\x12\x11\n" +
	"\rQuestStepFail\x10\x02*\x7f\n" +
	"\x11EEquipEnchantType\x12\x15\n" +
	"\x11EEquipEnchantNone\x10\x00\x12\x19\n" +
	"\x15EEquipEnchantOrdinary\x10\x01\x12\x1d\n" +
	"\x19EEquipEnchantIntermediate\x10\x02\x12\x19\n" +
	"\x15EEquipEnchantAdvanced\x10\x03*\x83\x01\n" +
	"\x0eEShowPieceType\x12\x11\n" +
	"\rShowPieceNull\x10\x00\x12\x19\n" +
	"\x15ShowPieceNormalAction\x10\x01\x12\x12\n" +
	"\x0eShowPieceEmote\x10\x02\x12\x19\n" +
	"\x15ShowPieceDoubleAction\x10\x03\x12\x14\n" +
	"\x10ShowPieceSticker\x10\x04*k\n" +
	"\x12MonsterTargetAward\x12\x1a\n" +
	"\x16MonsterTargetAwardNull\x10\x00\x12\x19\n" +
	"\x15MonsterTargetAwardGet\x10\x01\x12\x1e\n" +
	"\x1aMonsterTargetAwardReceived\x10\x02*\x80\x01\n" +
	"\x14EReceiveRewardStatus\x12\"\n" +
	"\x1eEReceiveRewardStatusNotReceive\x10\x00\x12\"\n" +
	"\x1eEReceiveRewardStatusCanReceive\x10\x01\x12 \n" +
	"\x1cEReceiveRewardStatusReceived\x10\x02*{\n" +
	"\x11ERidePropertyType\x12\x18\n" +
	"\x14RidePropertyTypeNone\x10\x00\x12\x18\n" +
	"\x14RidePropertyTypeLand\x10\v\x12\x19\n" +
	"\x15RidePropertyTypeWater\x10\f\x12\x17\n" +
	"\x13RidePropertyTypeMax\x10\r*C\n" +
	"\rEItemBindFlag\x12\x10\n" +
	"\fItemBindNone\x10\x00\x12\x0f\n" +
	"\vItemNotBind\x10\x01\x12\x0f\n" +
	"\vItemBindAll\x10\x02B\x06Z\x04./pbb\x06proto3"

var (
	file_pb_bp_proto_rawDescOnce sync.Once
	file_pb_bp_proto_rawDescData []byte
)

func file_pb_bp_proto_rawDescGZIP() []byte {
	file_pb_bp_proto_rawDescOnce.Do(func() {
		file_pb_bp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pb_bp_proto_rawDesc), len(file_pb_bp_proto_rawDesc)))
	})
	return file_pb_bp_proto_rawDescData
}

var file_pb_bp_proto_enumTypes = make([]protoimpl.EnumInfo, 25)
var file_pb_bp_proto_msgTypes = make([]protoimpl.MessageInfo, 561)
var file_pb_bp_proto_goTypes = []any{
	(EBodySize)(0),                            // 0: EBodySize
	(SystemType)(0),                           // 1: SystemType
	(LaunchPlatform)(0),                       // 2: LaunchPlatform
	(EUserTransferType)(0),                    // 3: EUserTransferType
	(ESceneLineStatus)(0),                     // 4: ESceneLineStatus
	(BodyPartState)(0),                        // 5: BodyPartState
	(EBuffEffectLogicPbType)(0),               // 6: EBuffEffectLogicPbType
	(EDamageSource)(0),                        // 7: EDamageSource
	(EDamageProperty)(0),                      // 8: EDamageProperty
	(EDamageMode)(0),                          // 9: EDamageMode
	(EDamageType)(0),                          // 10: EDamageType
	(EBuffEventType)(0),                       // 11: EBuffEventType
	(ESkillCDType)(0),                         // 12: ESkillCDType
	(EEntityType)(0),                          // 13: EEntityType
	(EAppearType)(0),                          // 14: EAppearType
	(EDisappearType)(0),                       // 15: EDisappearType
	(EGender)(0),                              // 16: EGender
	(EErrorCode)(0),                           // 17: EErrorCode
	(EQuestStepStatus)(0),                     // 18: EQuestStepStatus
	(EEquipEnchantType)(0),                    // 19: EEquipEnchantType
	(EShowPieceType)(0),                       // 20: EShowPieceType
	(MonsterTargetAward)(0),                   // 21: MonsterTargetAward
	(EReceiveRewardStatus)(0),                 // 22: EReceiveRewardStatus
	(ERidePropertyType)(0),                    // 23: ERidePropertyType
	(EItemBindFlag)(0),                        // 24: EItemBindFlag
	(*BasicData)(nil),                         // 25: BasicData
	(*PictureVerify)(nil),                     // 26: PictureVerify
	(*PictureInfo)(nil),                       // 27: PictureInfo
	(*AvatarInfo)(nil),                        // 28: AvatarInfo
	(*IntVec3)(nil),                           // 29: IntVec3
	(*Vector3)(nil),                           // 30: Vector3
	(*Vector2)(nil),                           // 31: Vector2
	(*FaceData)(nil),                          // 32: FaceData
	(*ProfessionData)(nil),                    // 33: ProfessionData
	(*EquipNine)(nil),                         // 34: EquipNine
	(*EquipData)(nil),                         // 35: EquipData
	(*FashionColorInfo)(nil),                  // 36: FashionColorInfo
	(*FashionInfo)(nil),                       // 37: FashionInfo
	(*FashionData)(nil),                       // 38: FashionData
	(*SettingData)(nil),                       // 39: SettingData
	(*Position)(nil),                          // 40: Position
	(*LastSceneData)(nil),                     // 41: LastSceneData
	(*SyncSceneData)(nil),                     // 42: SyncSceneData
	(*SceneData)(nil),                         // 43: SceneData
	(*UserAttrData)(nil),                      // 44: UserAttrData
	(*UserSceneInfo)(nil),                     // 45: UserSceneInfo
	(*PersonalZoneShow)(nil),                  // 46: PersonalZoneShow
	(*TeamMemberSocialData)(nil),              // 47: TeamMemberSocialData
	(*TeamMemData)(nil),                       // 48: TeamMemData
	(*CharTeam)(nil),                          // 49: CharTeam
	(*UnionData)(nil),                         // 50: UnionData
	(*AccountData)(nil),                       // 51: AccountData
	(*FunctionData)(nil),                      // 52: FunctionData
	(*ActionInfo)(nil),                        // 53: ActionInfo
	(*EditorUIPosition)(nil),                  // 54: EditorUIPosition
	(*FashionQualityCollectInfo)(nil),         // 55: FashionQualityCollectInfo
	(*RideQualityCollectInfo)(nil),            // 56: RideQualityCollectInfo
	(*PersonalZone)(nil),                      // 57: PersonalZone
	(*WarehouseData)(nil),                     // 58: WarehouseData
	(*SeasonRankData)(nil),                    // 59: SeasonRankData
	(*FishRecord)(nil),                        // 60: FishRecord
	(*FishSocialData)(nil),                    // 61: FishSocialData
	(*CommunityData)(nil),                     // 62: CommunityData
	(*PrivilegeData)(nil),                     // 63: PrivilegeData
	(*MasterModeDungeonData)(nil),             // 64: MasterModeDungeonData
	(*SocialData)(nil),                        // 65: SocialData
	(*GetSocialDataReply)(nil),                // 66: GetSocialDataReply
	(*ReturnMessageWrapper)(nil),              // 67: ReturnMessageWrapper
	(*ScenePointInfo)(nil),                    // 68: ScenePointInfo
	(*ScenePosIdInfo)(nil),                    // 69: ScenePosIdInfo
	(*CutScenePointInfo)(nil),                 // 70: CutScenePointInfo
	(*SceneLineData)(nil),                     // 71: SceneLineData
	(*PositionParam)(nil),                     // 72: PositionParam
	(*TransferParam)(nil),                     // 73: TransferParam
	(*NotifyEnterWorldRequest)(nil),           // 74: NotifyEnterWorldRequest
	(*NotifyEnterWorld)(nil),                  // 75: NotifyEnterWorld
	(*Attr)(nil),                              // 76: Attr
	(*MapAttrValue)(nil),                      // 77: MapAttrValue
	(*MapAttr)(nil),                           // 78: MapAttr
	(*AttrCollection)(nil),                    // 79: AttrCollection
	(*TempAttr)(nil),                          // 80: TempAttr
	(*TempAttrCollection)(nil),                // 81: TempAttrCollection
	(*EventData)(nil),                         // 82: EventData
	(*EventDataList)(nil),                     // 83: EventDataList
	(*BulletEvent)(nil),                       // 84: BulletEvent
	(*ActorBodyPartInfos)(nil),                // 85: ActorBodyPartInfos
	(*ActorBodyPartInfo)(nil),                 // 86: ActorBodyPartInfo
	(*PassiveSkillInfo)(nil),                  // 87: PassiveSkillInfo
	(*SeqPassiveSkillInfo)(nil),               // 88: SeqPassiveSkillInfo
	(*SeqPassiveSkillEndInfo)(nil),            // 89: SeqPassiveSkillEndInfo
	(*BuffInfoSync)(nil),                      // 90: BuffInfoSync
	(*BuffInfo)(nil),                          // 91: BuffInfo
	(*FightSourceInfo)(nil),                   // 92: FightSourceInfo
	(*BuffEffectLogicInfo)(nil),               // 93: BuffEffectLogicInfo
	(*ClientHitPartInfo)(nil),                 // 94: ClientHitPartInfo
	(*SyncDamageInfo)(nil),                    // 95: SyncDamageInfo
	(*SkillEffect)(nil),                       // 96: SkillEffect
	(*BuffEffect)(nil),                        // 97: BuffEffect
	(*BuffEffectSync)(nil),                    // 98: BuffEffectSync
	(*FakeBulletInfo)(nil),                    // 99: FakeBulletInfo
	(*PassengerChangeParam)(nil),              // 100: PassengerChangeParam
	(*MagneticRidePassengerChangeInfo)(nil),   // 101: MagneticRidePassengerChangeInfo
	(*PathPointChangeParam)(nil),              // 102: PathPointChangeParam
	(*MagneticRidePathPointChangeInfo)(nil),   // 103: MagneticRidePathPointChangeInfo
	(*MagneticRideQueueChangeInfo)(nil),       // 104: MagneticRideQueueChangeInfo
	(*AoiSyncDelta)(nil),                      // 105: AoiSyncDelta
	(*SkillCD)(nil),                           // 106: SkillCD
	(*FightResCD)(nil),                        // 107: FightResCD
	(*AoiSyncToMeDelta)(nil),                  // 108: AoiSyncToMeDelta
	(*SyncNearDeltaInfo)(nil),                 // 109: SyncNearDeltaInfo
	(*SyncToMeDeltaInfo)(nil),                 // 110: SyncToMeDeltaInfo
	(*SyncNearEntities)(nil),                  // 111: SyncNearEntities
	(*MagneticQueueAppearInfo)(nil),           // 112: MagneticQueueAppearInfo
	(*Entity)(nil),                            // 113: Entity
	(*DisappearEntity)(nil),                   // 114: DisappearEntity
	(*UnionHistoryActive)(nil),                // 115: UnionHistoryActive
	(*UserUnionHuntInfo)(nil),                 // 116: UserUnionHuntInfo
	(*UnionDanceHistory)(nil),                 // 117: UnionDanceHistory
	(*UserUnion)(nil),                         // 118: UserUnion
	(*ProfileInfo)(nil),                       // 119: ProfileInfo
	(*CharBaseInfo)(nil),                      // 120: CharBaseInfo
	(*SceneLuaData)(nil),                      // 121: SceneLuaData
	(*PioneerData)(nil),                       // 122: PioneerData
	(*PioneerInfo)(nil),                       // 123: PioneerInfo
	(*BuffDBInfo)(nil),                        // 124: BuffDBInfo
	(*BuffDBData)(nil),                        // 125: BuffDBData
	(*ItemPackage)(nil),                       // 126: ItemPackage
	(*Package)(nil),                           // 127: Package
	(*QuestData)(nil),                         // 128: QuestData
	(*QuestHistory)(nil),                      // 129: QuestHistory
	(*WorldQuestInfo)(nil),                    // 130: WorldQuestInfo
	(*WorldQuestList)(nil),                    // 131: worldQuestList
	(*QuestDataList)(nil),                     // 132: QuestDataList
	(*MiscInfo)(nil),                          // 133: MiscInfo
	(*ExchangeItem)(nil),                      // 134: ExchangeItem
	(*ExchangeInfo)(nil),                      // 135: ExchangeInfo
	(*ExchangeData)(nil),                      // 136: ExchangeData
	(*EquipInfo)(nil),                         // 137: EquipInfo
	(*EquipEnchantInfo)(nil),                  // 138: EquipEnchantInfo
	(*EquipSuitInfo)(nil),                     // 139: EquipSuitInfo
	(*EquipList)(nil),                         // 140: EquipList
	(*EnergyItem)(nil),                        // 141: EnergyItem
	(*EnergyInfo)(nil),                        // 142: EnergyInfo
	(*EnergyItemInfo)(nil),                    // 143: EnergyItemInfo
	(*MapData)(nil),                           // 144: MapData
	(*MarkData)(nil),                          // 145: MarkData
	(*MarkInfo)(nil),                          // 146: MarkInfo
	(*MarkPosition)(nil),                      // 147: MarkPosition
	(*DungeonEnterLimit)(nil),                 // 148: DungeonEnterLimit
	(*DungeonEnterCount)(nil),                 // 149: DungeonEnterCount
	(*DungeonWeekTargetList)(nil),             // 150: DungeonWeekTargetList
	(*DungeonTargetProgress)(nil),             // 151: DungeonTargetProgress
	(*RaidRecord)(nil),                        // 152: RaidRecord
	(*BossProgress)(nil),                      // 153: BossProgress
	(*DungeonList)(nil),                       // 154: DungeonList
	(*UserFightAttr)(nil),                     // 155: UserFightAttr
	(*SkillCDInfo)(nil),                       // 156: SkillCDInfo
	(*UnlockColorInfo)(nil),                   // 157: UnlockColorInfo
	(*FashionAdvanceInfo)(nil),                // 158: FashionAdvanceInfo
	(*FashionMgr)(nil),                        // 159: FashionMgr
	(*ProfileList)(nil),                       // 160: ProfileList
	(*PlayHelper)(nil),                        // 161: PlayHelper
	(*CounterList)(nil),                       // 162: CounterList
	(*CounterInfo)(nil),                       // 163: CounterInfo
	(*PersonalObject)(nil),                    // 164: PersonalObject
	(*ScenePersonalObject)(nil),               // 165: ScenePersonalObject
	(*ServerStateObjectInteractionParam)(nil), // 166: ServerStateObjectInteractionParam
	(*RoleLevel)(nil),                         // 167: RoleLevel
	(*LevelProficiency)(nil),                  // 168: LevelProficiency
	(*UnlockProficiency)(nil),                 // 169: UnlockProficiency
	(*Pivot)(nil),                             // 170: Pivot
	(*PivotInfo)(nil),                         // 171: PivotInfo
	(*TransferPoint)(nil),                     // 172: TransferPoint
	(*PlanetMemory)(nil),                      // 173: PlanetMemory
	(*SeasonTarget)(nil),                      // 174: SeasonTarget
	(*SeasonTargetInfo)(nil),                  // 175: SeasonTargetInfo
	(*RedDotData)(nil),                        // 176: RedDotData
	(*Resonance)(nil),                         // 177: Resonance
	(*CutsState)(nil),                         // 178: CutsState
	(*InvestigateList)(nil),                   // 179: InvestigateList
	(*InvestigateData)(nil),                   // 180: InvestigateData
	(*InvestigateStep)(nil),                   // 181: InvestigateStep
	(*AnswerList)(nil),                        // 182: AnswerList
	(*ParkourRecordList)(nil),                 // 183: ParkourRecordList
	(*ParkourRecord)(nil),                     // 184: ParkourRecord
	(*InteractionInfo)(nil),                   // 185: InteractionInfo
	(*SeasonQuestList)(nil),                   // 186: SeasonQuestList
	(*SeasonQuestData)(nil),                   // 187: SeasonQuestData
	(*RoleFace)(nil),                          // 188: RoleFace
	(*MapBookInfoList)(nil),                   // 189: MapBookInfoList
	(*MapBookInfo)(nil),                       // 190: MapBookInfo
	(*MapStickerInfo)(nil),                    // 191: MapStickerInfo
	(*MapStickerTaskInfo)(nil),                // 192: MapStickerTaskInfo
	(*AntiAddictionInfo)(nil),                 // 193: AntiAddictionInfo
	(*MonsterExploreList)(nil),                // 194: MonsterExploreList
	(*MonsterExploreInfo)(nil),                // 195: MonsterExploreInfo
	(*ShowPieceData)(nil),                     // 196: ShowPieceData
	(*ShowPiecePair)(nil),                     // 197: ShowPiecePair
	(*ShowPieceIdList)(nil),                   // 198: ShowPieceIdList
	(*CollectionBook)(nil),                    // 199: CollectionBook
	(*NotGetProceedAwardInfo)(nil),            // 200: NotGetProceedAwardInfo
	(*CookList)(nil),                          // 201: CookList
	(*CookBook)(nil),                          // 202: CookBook
	(*TimerRefreshDataList)(nil),              // 203: TimerRefreshDataList
	(*TimerRefreshList)(nil),                  // 204: TimerRefreshList
	(*TimerRefreshInfo)(nil),                  // 205: TimerRefreshInfo
	(*ChallengeDungeonInfo)(nil),              // 206: ChallengeDungeonInfo
	(*DungeonTargetAward)(nil),                // 207: DungeonTargetAward
	(*SyncAwardData)(nil),                     // 208: SyncAwardData
	(*LevelUpAward)(nil),                      // 209: LevelUpAward
	(*SeasonAchievementList)(nil),             // 210: SeasonAchievementList
	(*SeasonAchievement)(nil),                 // 211: SeasonAchievement
	(*Achievement)(nil),                       // 212: Achievement
	(*SeasonRankList)(nil),                    // 213: SeasonRankList
	(*SeasonRankInfo)(nil),                    // 214: SeasonRankInfo
	(*SeasonCenter)(nil),                      // 215: SeasonCenter
	(*SeasonBpQuestList)(nil),                 // 216: SeasonBpQuestList
	(*SeasonCenterHistory)(nil),               // 217: SeasonCenterHistory
	(*SeasonBpQuestData)(nil),                 // 218: SeasonBpQuestData
	(*SeasonMedalInfo)(nil),                   // 219: SeasonMedalInfo
	(*MedalNode)(nil),                         // 220: MedalNode
	(*MedalHole)(nil),                         // 221: MedalHole
	(*CommunityHomeData)(nil),                 // 222: CommunityHomeData
	(*CommunityHomelandRecipe)(nil),           // 223: CommunityHomelandRecipe
	(*SeasonActivation)(nil),                  // 224: SeasonActivation
	(*SeasonActivationTarget)(nil),            // 225: SeasonActivationTarget
	(*Slot)(nil),                              // 226: Slot
	(*SlotInfo)(nil),                          // 227: SlotInfo
	(*MonsterHuntInfo)(nil),                   // 228: MonsterHuntInfo
	(*MonsterHuntTarget)(nil),                 // 229: MonsterHuntTarget
	(*MonsterTargetInfo)(nil),                 // 230: MonsterTargetInfo
	(*Mod)(nil),                               // 231: Mod
	(*ModInfo)(nil),                           // 232: ModInfo
	(*WorldEventMap)(nil),                     // 233: WorldEventMap
	(*WorldEventData)(nil),                    // 234: worldEventData
	(*FishSetting)(nil),                       // 235: FishSetting
	(*FreightData)(nil),                       // 236: FreightData
	(*ProfessionList)(nil),                    // 237: ProfessionList
	(*ProfessionTalentInfo)(nil),              // 238: ProfessionTalentInfo
	(*ProfessionInfo)(nil),                    // 239: ProfessionInfo
	(*ProfessionSkillInfo)(nil),               // 240: ProfessionSkillInfo
	(*TrialRoad)(nil),                         // 241: TrialRoad
	(*TrialRoadTargetAward)(nil),              // 242: TrialRoadTargetAward
	(*TrialRoadRoomTargetAward)(nil),          // 243: TrialRoadRoomTargetAward
	(*TrialRoadTargetProgress)(nil),           // 244: TrialRoadTargetProgress
	(*GashaData)(nil),                         // 245: GashaData
	(*GashaGuaranteeInfo)(nil),                // 246: GashaGuaranteeInfo
	(*GashaInfo)(nil),                         // 247: GashaInfo
	(*ShopData)(nil),                          // 248: ShopData
	(*ShopCompensationData)(nil),              // 249: ShopCompensationData
	(*ShopCompensationInfo)(nil),              // 250: ShopCompensationInfo
	(*PlayerBuyRecord)(nil),                   // 251: PlayerBuyRecord
	(*ShopRefreshRecord)(nil),                 // 252: ShopRefreshRecord
	(*PlayerRefreshShopRecord)(nil),           // 253: PlayerRefreshShopRecord
	(*PersonalWorldBossInfo)(nil),             // 254: PersonalWorldBossInfo
	(*CommonAwardInfo)(nil),                   // 255: CommonAwardInfo
	(*CraftEnergyRecord)(nil),                 // 256: CraftEnergyRecord
	(*WeeklyTowerRecord)(nil),                 // 257: WeeklyTowerRecord
	(*CutSceneInfos)(nil),                     // 258: CutSceneInfos
	(*CutSceneInfo)(nil),                      // 259: CutSceneInfo
	(*UserRecommendPlayData)(nil),             // 260: UserRecommendPlayData
	(*RideList)(nil),                          // 261: RideList
	(*RideSkinContainer)(nil),                 // 262: RideSkinContainer
	(*RideSkinData)(nil),                      // 263: RideSkinData
	(*RideData)(nil),                          // 264: RideData
	(*PayOrderList)(nil),                      // 265: PayOrderList
	(*PayData)(nil),                           // 266: PayData
	(*FirstPayInfo)(nil),                      // 267: FirstPayInfo
	(*LifeProfession)(nil),                    // 268: LifeProfession
	(*LifeProfessionAlchemyInfo)(nil),         // 269: LifeProfessionAlchemyInfo
	(*LifeProfessionBasic)(nil),               // 270: LifeProfessionBasic
	(*LiftProfessionSpecialization)(nil),      // 271: LiftProfessionSpecialization
	(*LifeProfessionRecipe)(nil),              // 272: LifeProfessionRecipe
	(*LifeProfessionTargetInfo)(nil),          // 273: LifeProfessionTargetInfo
	(*LifeProfessionWork)(nil),                // 274: LifeProfessionWork
	(*LifeProfessionWorkInfo)(nil),            // 275: LifeProfessionWorkInfo
	(*UserActivityList)(nil),                  // 276: UserActivityList
	(*UserActivityInfo)(nil),                  // 277: UserActivityInfo
	(*UserActivityRewardInfo)(nil),            // 278: UserActivityRewardInfo
	(*GameFunctionData)(nil),                  // 279: GameFunctionData
	(*FunctionTimeData)(nil),                  // 280: FunctionTimeData
	(*PlayerRecord)(nil),                      // 281: PlayerRecord
	(*PlayerRecordInfo)(nil),                  // 282: PlayerRecordInfo
	(*PlayerRecordSingle)(nil),                // 283: PlayerRecordSingle
	(*DropContainerInfo)(nil),                 // 284: DropContainerInfo
	(*DropContainerSingle)(nil),               // 285: DropContainerSingle
	(*DropAwardHistory)(nil),                  // 286: DropAwardHistory
	(*MonthlyCard)(nil),                       // 287: MonthlyCard
	(*MonthlyCardInfo)(nil),                   // 288: MonthlyCardInfo
	(*MonthCardItem)(nil),                     // 289: MonthCardItem
	(*MonthlyCardBuyList)(nil),                // 290: MonthlyCardBuyList
	(*FashionBenefit)(nil),                    // 291: FashionBenefit
	(*FashionBenefitCollectionHistory)(nil),   // 292: FashionBenefitCollectionHistory
	(*FashionBenefitTaskInfo)(nil),            // 293: FashionBenefitTaskInfo
	(*ItemCurrency)(nil),                      // 294: ItemCurrency
	(*CurrencyData)(nil),                      // 295: CurrencyData
	(*PrivilegeEffectData)(nil),               // 296: PrivilegeEffectData
	(*SyncContainerData)(nil),                 // 297: SyncContainerData
	(*CharSerialize)(nil),                     // 298: CharSerialize
	(*Treasure)(nil),                          // 299: Treasure
	(*TreasureItemRow)(nil),                   // 300: TreasureItemRow
	(*TreasureItemTarget)(nil),                // 301: TreasureItemTarget
	(*TreasureItem)(nil),                      // 302: TreasureItem
	(*Item)(nil),                              // 303: Item
	(*AffixData)(nil),                         // 304: AffixData
	(*ItemExtendData)(nil),                    // 305: ItemExtendData
	(*ModNewAttr)(nil),                        // 306: ModNewAttr
	(*ModPartUpgradeRecord)(nil),              // 307: ModPartUpgradeRecord
	(*ModAttr)(nil),                           // 308: ModAttr
	(*ModAttrInfo)(nil),                       // 309: ModAttrInfo
	(*EquipAttr)(nil),                         // 310: EquipAttr
	(*EquipAttrSet)(nil),                      // 311: EquipAttrSet
	(*UnlockEmojiData)(nil),                   // 312: UnlockEmojiData
	(*PlayerOrderComtainerInfo)(nil),          // 313: PlayerOrderComtainerInfo
	(*PlayerBox)(nil),                         // 314: PlayerBox
	(*PlayerBoxData)(nil),                     // 315: PlayerBoxData
	(*LaunchPrivilegeData)(nil),               // 316: LaunchPrivilegeData
	(*BattlePassData)(nil),                    // 317: BattlePassData
	(*BattlePass)(nil),                        // 318: BattlePass
	(*BattlePassAwardInfo)(nil),               // 319: BattlePassAwardInfo
	(*RechargeData)(nil),                      // 320: RechargeData
	(*LuckyValueMgr)(nil),                     // 321: LuckyValueMgr
	(*LuckyValueInfo)(nil),                    // 322: LuckyValueInfo
	(*HandbookData)(nil),                      // 323: HandbookData
	(*HandBookStruct)(nil),                    // 324: HandBookStruct
	(*MasterModeDungeonInfo)(nil),             // 325: MasterModeDungeonInfo
	(*SeasonMasterModeDungeonInfo)(nil),       // 326: SeasonMasterModeDungeonInfo
	(*MasterModeDiffDungeonInfo)(nil),         // 327: MasterModeDiffDungeonInfo
	(*DungeonInfo)(nil),                       // 328: DungeonInfo
	(*StatisticsData)(nil),                    // 329: StatisticsData
	(*StatRecord)(nil),                        // 330: StatRecord
	(*SceneRecord)(nil),                       // 331: SceneRecord
	(*CompensationStatistics)(nil),            // 332: CompensationStatistics
	(*CompensationSeasonStatistics)(nil),      // 333: CompensationSeasonStatistics
	(*CompensationRecord)(nil),                // 334: CompensationRecord
	(*CompensationData)(nil),                  // 335: CompensationData
	(*BubbleInfo)(nil),                        // 336: BubbleInfo
	(*BubbleActData)(nil),                     // 337: BubbleActData
	(*MailClaimedInfo)(nil),                   // 338: MailClaimedInfo
	(*NewbieData)(nil),                        // 339: NewbieData
	(*FightPoint)(nil),                        // 340: FightPoint
	(*FightPointData)(nil),                    // 341: FightPointData
	(*FightPointSubData)(nil),                 // 342: FightPointSubData
	(*SignInfo)(nil),                          // 343: SignInfo
	(*SignStatusList)(nil),                    // 344: SignStatusList
	(*SignStatus)(nil),                        // 345: SignStatus
	(*CharStatisticsData)(nil),                // 346: CharStatisticsData
	nil,                                       // 347: FaceData.FaceInfoEntry
	nil,                                       // 348: FaceData.ColorInfoEntry
	nil,                                       // 349: FashionColorInfo.ColorsEntry
	nil,                                       // 350: FashionColorInfo.AttachmentColorEntry
	nil,                                       // 351: SettingData.SettingMapEntry
	nil,                                       // 352: SceneData.RecordIdEntry
	nil,                                       // 353: PersonalZoneShow.MedalsEntry
	nil,                                       // 354: CharTeam.TeamMemberDataEntry
	nil,                                       // 355: FunctionData.UnlockedMapEntry
	nil,                                       // 356: FashionQualityCollectInfo.QualityCountEntry
	nil,                                       // 357: RideQualityCollectInfo.QualityCountEntry
	nil,                                       // 358: PersonalZone.MedalsEntry
	nil,                                       // 359: PersonalZone.FashionCollectQualityCountEntry
	nil,                                       // 360: PersonalZone.UnlockTargetRecordEntry
	nil,                                       // 361: PersonalZone.UnlockGetRewardRecordEntry
	nil,                                       // 362: PersonalZone.RideCollectQualityCountEntry
	nil,                                       // 363: PersonalZone.PhotosWallEntry
	nil,                                       // 364: SeasonRankData.SeasonRanksEntry
	nil,                                       // 365: FishRecord.StarCntsEntry
	nil,                                       // 366: FishSocialData.FishRecordsEntry
	nil,                                       // 367: Entity.MagneticRideQueueChangeInfoEntry
	nil,                                       // 368: UserUnion.ReqUnionTimesEntry
	nil,                                       // 369: SceneLuaData.SceneLuaInfoEntry
	nil,                                       // 370: PioneerData.InfoMapEntry
	nil,                                       // 371: PioneerInfo.TargetsEntry
	nil,                                       // 372: PioneerInfo.AwardsEntry
	nil,                                       // 373: PioneerInfo.EnteredZonesEntry
	nil,                                       // 374: BuffDBInfo.AllBuffDbDataEntry
	nil,                                       // 375: ItemPackage.PackagesEntry
	nil,                                       // 376: ItemPackage.UnlockItemsEntry
	nil,                                       // 377: ItemPackage.UseGroupCdEntry
	nil,                                       // 378: Package.ItemCdEntry
	nil,                                       // 379: Package.ItemsEntry
	nil,                                       // 380: QuestData.TargetNumEntry
	nil,                                       // 381: QuestData.TargetMaxNumEntry
	nil,                                       // 382: QuestData.TargetTypeEntry
	nil,                                       // 383: QuestHistory.StepHistoryEntry
	nil,                                       // 384: QuestDataList.QuestMapEntry
	nil,                                       // 385: QuestDataList.FinishQuestEntry
	nil,                                       // 386: QuestDataList.FinishResetQuestEntry
	nil,                                       // 387: QuestDataList.HistoryMapEntry
	nil,                                       // 388: QuestDataList.WorldQuestInfoEntry
	nil,                                       // 389: QuestDataList.AllWorldQuestListEntry
	nil,                                       // 390: QuestDataList.BlueWorldQuestMapEntry
	nil,                                       // 391: QuestDataList.FilterEventIdEntry
	nil,                                       // 392: QuestDataList.TrackOptionalQuestEntry
	nil,                                       // 393: QuestDataList.FinishResetQuestCountEntry
	nil,                                       // 394: QuestDataList.AcceptQuestMapEntry
	nil,                                       // 395: MiscInfo.ExpressionIdsLearnedEntry
	nil,                                       // 396: ExchangeItem.ExchangeInfoEntry
	nil,                                       // 397: ExchangeInfo.ExchangeDataEntry
	nil,                                       // 398: EquipSuitInfo.SuitAttrEntry
	nil,                                       // 399: EquipList.EquipListEntry
	nil,                                       // 400: EquipList.EquipRecastInfoEntry
	nil,                                       // 401: EquipList.EquipEnchantEntry
	nil,                                       // 402: EquipList.SuitInfoDictEntry
	nil,                                       // 403: EnergyItem.EnergyInfoEntry
	nil,                                       // 404: EnergyInfo.EnergyItemInfoEntry
	nil,                                       // 405: MapData.MarkDataMapEntry
	nil,                                       // 406: MapData.AresMapEntry
	nil,                                       // 407: MarkData.MarkInfoMapEntry
	nil,                                       // 408: DungeonEnterLimit.EnterCountEntry
	nil,                                       // 409: DungeonWeekTargetList.WeekTargetEntry
	nil,                                       // 410: RaidRecord.BossProgressEntry
	nil,                                       // 411: DungeonList.CompleteDungeonEntry
	nil,                                       // 412: DungeonList.RaidRecordTableEntry
	nil,                                       // 413: UnlockColorInfo.ColorInfoMapEntry
	nil,                                       // 414: UnlockColorInfo.ColorBlockInfoMapEntry
	nil,                                       // 415: FashionMgr.WearInfoEntry
	nil,                                       // 416: FashionMgr.FashionDatasEntry
	nil,                                       // 417: FashionMgr.UnlockColorEntry
	nil,                                       // 418: FashionMgr.FashionRewardEntry
	nil,                                       // 419: FashionMgr.AllFashionEntry
	nil,                                       // 420: FashionMgr.AllRideEntry
	nil,                                       // 421: FashionMgr.AllWeaponSkinEntry
	nil,                                       // 422: FashionMgr.FashionAdvanceEntry
	nil,                                       // 423: FashionMgr.AllFashionNumEntry
	nil,                                       // 424: FashionMgr.AllRideNumEntry
	nil,                                       // 425: FashionMgr.AllWeaponSkinNumEntry
	nil,                                       // 426: ProfileList.UnlockProfileListEntry
	nil,                                       // 427: PlayHelper.DisplayedHelperListEntry
	nil,                                       // 428: PlayHelper.CompletedGuideEntry
	nil,                                       // 429: CounterList.CounterMapEntry
	nil,                                       // 430: PersonalObject.SceneObjDataEntry
	nil,                                       // 431: ScenePersonalObject.PersonalObjDataEntry
	nil,                                       // 432: RoleLevel.ReceivedLevelListEntry
	nil,                                       // 433: RoleLevel.ActiveExpMapEntry
	nil,                                       // 434: LevelProficiency.UsingProficiencyMapEntry
	nil,                                       // 435: LevelProficiency.UnlockProficiencyMapEntry
	nil,                                       // 436: Pivot.PivotsEntry
	nil,                                       // 437: Pivot.MapPivotsEntry
	nil,                                       // 438: TransferPoint.PointsEntry
	nil,                                       // 439: SeasonTarget.TargetInfoEntry
	nil,                                       // 440: RedDotData.PermanentClosedRedDotEntry
	nil,                                       // 441: RedDotData.RedDotCountEntry
	nil,                                       // 442: Resonance.ResonancesEntry
	nil,                                       // 443: CutsState.StateInfoEntry
	nil,                                       // 444: InvestigateList.InvestigateMapEntry
	nil,                                       // 445: InvestigateList.CompInvestigateMapEntry
	nil,                                       // 446: InvestigateData.StepIdsEntry
	nil,                                       // 447: InvestigateStep.ReasoningMapEntry
	nil,                                       // 448: ParkourRecordList.RecordListEntry
	nil,                                       // 449: SeasonQuestList.SeasonMapEntry
	nil,                                       // 450: RoleFace.UnlockItemMapEntry
	nil,                                       // 451: MapBookInfoList.MapBookMapEntry
	nil,                                       // 452: MapBookInfo.MapStickerMapEntry
	nil,                                       // 453: MapStickerInfo.StickerMapEntry
	nil,                                       // 454: MapStickerTaskInfo.TargetNumEntry
	nil,                                       // 455: MonsterExploreList.MonsterExploreListEntry
	nil,                                       // 456: MonsterExploreInfo.TargetNumEntry
	nil,                                       // 457: ShowPieceData.OftenUseTypeListEntry
	nil,                                       // 458: ShowPieceData.UnlockTypeListEntry
	nil,                                       // 459: ShowPieceData.RoulettePosPieceInfoEntry
	nil,                                       // 460: CollectionBook.ModBookMapEntry
	nil,                                       // 461: NotGetProceedAwardInfo.AwardIdTimesEntry
	nil,                                       // 462: CookList.BookDataEntry
	nil,                                       // 463: TimerRefreshDataList.RefreshDataListEntry
	nil,                                       // 464: TimerRefreshList.RefreshDataEntry
	nil,                                       // 465: ChallengeDungeonInfo.DungeonInfoEntry
	nil,                                       // 466: ChallengeDungeonInfo.DungeonTargetAwardEntry
	nil,                                       // 467: DungeonTargetAward.DungeonTargetProgressEntry
	nil,                                       // 468: SyncAwardData.LevelUpAwardInfosEntry
	nil,                                       // 469: SeasonAchievementList.SeasonAchievementListEntry
	nil,                                       // 470: SeasonAchievementList.HasInitDonesEntry
	nil,                                       // 471: SeasonAchievement.SeasonAchievementEntry
	nil,                                       // 472: SeasonRankList.SeasonRankListEntry
	nil,                                       // 473: SeasonCenter.SeasonHistoryEntry
	nil,                                       // 474: SeasonBpQuestList.SeasonMapEntry
	nil,                                       // 475: SeasonMedalInfo.NormalHoleInfosEntry
	nil,                                       // 476: SeasonMedalInfo.CoreHoleNodeInfosEntry
	nil,                                       // 477: CommunityHomeData.UnlockedRecipesEntry
	nil,                                       // 478: SeasonActivation.ActivationTargetsEntry
	nil,                                       // 479: SeasonActivation.StageRewardStatusEntry
	nil,                                       // 480: Slot.SlotsEntry
	nil,                                       // 481: MonsterHuntInfo.MonsterHuntListEntry
	nil,                                       // 482: MonsterHuntInfo.LevelAwardFlagEntry
	nil,                                       // 483: MonsterHuntInfo.MonsterHuntRefrshTimeEntry
	nil,                                       // 484: MonsterHuntTarget.TargetInfoListEntry
	nil,                                       // 485: Mod.ModSlotsEntry
	nil,                                       // 486: Mod.ModInfosEntry
	nil,                                       // 487: WorldEventMap.EventMapEntry
	nil,                                       // 488: FishSetting.FishRecordsEntry
	nil,                                       // 489: FishSetting.FishRodDurabilityEntry
	nil,                                       // 490: FishSetting.LevelRewardEntry
	nil,                                       // 491: FishSetting.ZeroFishTimesEntry
	nil,                                       // 492: ProfessionList.ProfessionListEntry
	nil,                                       // 493: ProfessionList.AoyiSkillInfoMapEntry
	nil,                                       // 494: ProfessionList.TalentListEntry
	nil,                                       // 495: ProfessionInfo.SkillInfoMapEntry
	nil,                                       // 496: ProfessionInfo.SlotSkillInfoMapEntry
	nil,                                       // 497: ProfessionSkillInfo.ActiveSkillSkinsEntry
	nil,                                       // 498: TrialRoad.RoomTargetAwardEntry
	nil,                                       // 499: TrialRoadTargetAward.TargetProgressEntry
	nil,                                       // 500: TrialRoadRoomTargetAward.TargetProgressEntry
	nil,                                       // 501: GashaData.GashaInfosEntry
	nil,                                       // 502: GashaData.GashaGuaranteeInfosEntry
	nil,                                       // 503: ShopData.RefreshListEntry
	nil,                                       // 504: ShopData.NormalShopRecordsEntry
	nil,                                       // 505: ShopData.SeasonShopRecordsEntry
	nil,                                       // 506: ShopCompensationData.ItemsEntry
	nil,                                       // 507: ShopRefreshRecord.ShopRefreshRecordsEntry
	nil,                                       // 508: PersonalWorldBossInfo.ScoreAwardInfoEntry
	nil,                                       // 509: PersonalWorldBossInfo.BossAwardInfoEntry
	nil,                                       // 510: CraftEnergyRecord.RecordsEntry
	nil,                                       // 511: CutSceneInfos.CutSceneInfosEntry
	nil,                                       // 512: CutSceneInfos.FinishedCutScenesEntry
	nil,                                       // 513: CutSceneInfos.FinishedInfosEntry
	nil,                                       // 514: UserRecommendPlayData.PlayMailEntry
	nil,                                       // 515: RideList.RidesEntry
	nil,                                       // 516: RideList.SkinDataEntry
	nil,                                       // 517: RideSkinContainer.SinksEntry
	nil,                                       // 518: PayOrderList.OrderListEntry
	nil,                                       // 519: PayOrderList.OrderIndexListEntry
	nil,                                       // 520: PayData.PayDataEntry
	nil,                                       // 521: LifeProfession.ProfessionInfoEntry
	nil,                                       // 522: LifeProfession.LifeTargetInfoEntry
	nil,                                       // 523: LifeProfession.LifeProfessionRecipeEntry
	nil,                                       // 524: LifeProfession.SpareEnergyEntry
	nil,                                       // 525: LifeProfessionBasic.SpecializationEntry
	nil,                                       // 526: UserActivityList.ActivitiesEntry
	nil,                                       // 527: UserActivityInfo.RewardsEntry
	nil,                                       // 528: UserActivityRewardInfo.FunctionsEntry
	nil,                                       // 529: GameFunctionData.FunctionTimesEntry
	nil,                                       // 530: PlayerRecord.PlayerRecordInfosEntry
	nil,                                       // 531: PlayerRecordInfo.PlayerRecordsEntry
	nil,                                       // 532: DropContainerInfo.DropContainersEntry
	nil,                                       // 533: DropContainerInfo.DropAwardHistoriesEntry
	nil,                                       // 534: MonthlyCard.MonthlyCardInfoEntry
	nil,                                       // 535: MonthlyCard.MonthlyCardBuyListEntry
	nil,                                       // 536: FashionBenefit.TaskListEntry
	nil,                                       // 537: ItemCurrency.CurrencyDatasEntry
	nil,                                       // 538: PrivilegeEffectData.NormalPassIdMapEntry
	nil,                                       // 539: PrivilegeEffectData.PrimePassIdMapEntry
	nil,                                       // 540: Treasure.RowsEntry
	nil,                                       // 541: Treasure.HistoryRowsEntry
	nil,                                       // 542: TreasureItemRow.MainTargetsEntry
	nil,                                       // 543: TreasureItemRow.SubTargetsEntry
	nil,                                       // 544: Item.ExtendAttrEntry
	nil,                                       // 545: Item.GeneSequenceEntry
	nil,                                       // 546: ModAttrInfo.EffectParameterEntry
	nil,                                       // 547: EquipAttr.BaseAttrsEntry
	nil,                                       // 548: EquipAttr.BasicAttrEntry
	nil,                                       // 549: EquipAttr.AdvanceAttrEntry
	nil,                                       // 550: EquipAttr.RecastAttrEntry
	nil,                                       // 551: EquipAttr.RareQualityAttrEntry
	nil,                                       // 552: EquipAttrSet.BasicAttrEntry
	nil,                                       // 553: EquipAttrSet.AdvanceAttrEntry
	nil,                                       // 554: EquipAttrSet.RecastAttrEntry
	nil,                                       // 555: EquipAttrSet.RareQualityAttrEntry
	nil,                                       // 556: UnlockEmojiData.UnlockMapEntry
	nil,                                       // 557: PlayerBox.ScenesEntry
	nil,                                       // 558: PlayerBoxData.BoxsEntry
	nil,                                       // 559: BattlePassData.BattleMapEntry
	nil,                                       // 560: BattlePass.AwardEntry
	nil,                                       // 561: LuckyValueMgr.LuckValueInfoEntry
	nil,                                       // 562: HandbookData.UnlockNoteImportantRoleMapEntry
	nil,                                       // 563: HandbookData.UnlockNoteReadingBookMapEntry
	nil,                                       // 564: HandbookData.UnlockNoteDictionaryMapEntry
	nil,                                       // 565: HandbookData.UnlockNotePostCardMapEntry
	nil,                                       // 566: HandbookData.UnlockNoteMonthCardMapEntry
	nil,                                       // 567: MasterModeDungeonInfo.MasterModeDungeonInfoEntry
	nil,                                       // 568: SeasonMasterModeDungeonInfo.MasterModeDiffInfoEntry
	nil,                                       // 569: SeasonMasterModeDungeonInfo.SeasonAwardsEntry
	nil,                                       // 570: MasterModeDiffDungeonInfo.DungeonInfoEntry
	nil,                                       // 571: StatisticsData.StatRecordMapEntry
	nil,                                       // 572: StatRecord.GroupCntsEntry
	nil,                                       // 573: StatRecord.SceneRecordsEntry
	nil,                                       // 574: SceneRecord.GroupCntsEntry
	nil,                                       // 575: CompensationStatistics.SeasonDataEntry
	nil,                                       // 576: CompensationStatistics.LastWeekEntry
	nil,                                       // 577: CompensationSeasonStatistics.WeekDataEntry
	nil,                                       // 578: CompensationSeasonStatistics.CompensationEntry
	nil,                                       // 579: CompensationRecord.CompensationDataEntry
	nil,                                       // 580: BubbleActData.BubbleInfoEntry
	nil,                                       // 581: MailClaimedInfo.ClaimedMailsEntry
	nil,                                       // 582: FightPoint.FightPointDataEntry
	nil,                                       // 583: FightPointData.SubFunctionDataEntry
	nil,                                       // 584: SignInfo.SignInfoEntry
	nil,                                       // 585: SignStatusList.SignStatusDataEntry
}
var file_pb_bp_proto_depIdxs = []int32{
	0,   // 0: BasicData.BodySize:type_name -> EBodySize
	26,  // 1: PictureInfo.Verify:type_name -> PictureVerify
	27,  // 2: AvatarInfo.Profile:type_name -> PictureInfo
	27,  // 3: AvatarInfo.HalfBody:type_name -> PictureInfo
	347, // 4: FaceData.FaceInfo:type_name -> FaceData.FaceInfoEntry
	348, // 5: FaceData.ColorInfo:type_name -> FaceData.ColorInfoEntry
	34,  // 6: EquipData.EquipInfos:type_name -> EquipNine
	349, // 7: FashionColorInfo.Colors:type_name -> FashionColorInfo.ColorsEntry
	350, // 8: FashionColorInfo.AttachmentColor:type_name -> FashionColorInfo.AttachmentColorEntry
	36,  // 9: FashionInfo.Colors:type_name -> FashionColorInfo
	37,  // 10: FashionData.FashionInfos:type_name -> FashionInfo
	351, // 11: SettingData.SettingMap:type_name -> SettingData.SettingMapEntry
	40,  // 12: LastSceneData.Pos:type_name -> Position
	40,  // 13: SceneData.Pos:type_name -> Position
	40,  // 14: SceneData.LevelPos:type_name -> Position
	352, // 15: SceneData.RecordId:type_name -> SceneData.RecordIdEntry
	40,  // 16: SceneData.BeforeFallPos:type_name -> Position
	41,  // 17: SceneData.LastSceneData:type_name -> LastSceneData
	353, // 18: PersonalZoneShow.Medals:type_name -> PersonalZoneShow.MedalsEntry
	25,  // 19: TeamMemberSocialData.BasicData:type_name -> BasicData
	28,  // 20: TeamMemberSocialData.AvatarInfo:type_name -> AvatarInfo
	32,  // 21: TeamMemberSocialData.FaceData:type_name -> FaceData
	33,  // 22: TeamMemberSocialData.ProfessionData:type_name -> ProfessionData
	35,  // 23: TeamMemberSocialData.EquipData:type_name -> EquipData
	38,  // 24: TeamMemberSocialData.FashionData:type_name -> FashionData
	45,  // 25: TeamMemberSocialData.UserSceneInfo:type_name -> UserSceneInfo
	44,  // 26: TeamMemberSocialData.UserAttrData:type_name -> UserAttrData
	46,  // 27: TeamMemberSocialData.PersonalZone:type_name -> PersonalZoneShow
	47,  // 28: TeamMemData.SocialData:type_name -> TeamMemberSocialData
	354, // 29: CharTeam.TeamMemberData:type_name -> CharTeam.TeamMemberDataEntry
	1,   // 30: AccountData.Os:type_name -> SystemType
	355, // 31: FunctionData.UnlockedMap:type_name -> FunctionData.UnlockedMapEntry
	356, // 32: FashionQualityCollectInfo.QualityCount:type_name -> FashionQualityCollectInfo.QualityCountEntry
	357, // 33: RideQualityCollectInfo.QualityCount:type_name -> RideQualityCollectInfo.QualityCountEntry
	358, // 34: PersonalZone.medals:type_name -> PersonalZone.MedalsEntry
	53,  // 35: PersonalZone.action_info:type_name -> ActionInfo
	54,  // 36: PersonalZone.ui_position:type_name -> EditorUIPosition
	359, // 37: PersonalZone.fashion_collect_quality_count:type_name -> PersonalZone.FashionCollectQualityCountEntry
	360, // 38: PersonalZone.unlock_target_record:type_name -> PersonalZone.UnlockTargetRecordEntry
	361, // 39: PersonalZone.unlock_get_reward_record:type_name -> PersonalZone.UnlockGetRewardRecordEntry
	362, // 40: PersonalZone.ride_collect_quality_count:type_name -> PersonalZone.RideCollectQualityCountEntry
	363, // 41: PersonalZone.photos_wall:type_name -> PersonalZone.PhotosWallEntry
	364, // 42: SeasonRankData.SeasonRanks:type_name -> SeasonRankData.SeasonRanksEntry
	365, // 43: FishRecord.StarCnts:type_name -> FishRecord.StarCntsEntry
	366, // 44: FishSocialData.FishRecords:type_name -> FishSocialData.FishRecordsEntry
	2,   // 45: PrivilegeData.launchPlatform:type_name -> LaunchPlatform
	25,  // 46: SocialData.BasicData:type_name -> BasicData
	28,  // 47: SocialData.AvatarInfo:type_name -> AvatarInfo
	32,  // 48: SocialData.FaceData:type_name -> FaceData
	33,  // 49: SocialData.ProfessionData:type_name -> ProfessionData
	35,  // 50: SocialData.EquipData:type_name -> EquipData
	38,  // 51: SocialData.FashionData:type_name -> FashionData
	39,  // 52: SocialData.SettingData:type_name -> SettingData
	43,  // 53: SocialData.SceneData:type_name -> SceneData
	44,  // 54: SocialData.UserAttrData:type_name -> UserAttrData
	49,  // 55: SocialData.TeamData:type_name -> CharTeam
	50,  // 56: SocialData.UnionData:type_name -> UnionData
	51,  // 57: SocialData.AccountData:type_name -> AccountData
	52,  // 58: SocialData.FunctionData:type_name -> FunctionData
	57,  // 59: SocialData.PersonalZone:type_name -> PersonalZone
	58,  // 60: SocialData.Warehouse:type_name -> WarehouseData
	59,  // 61: SocialData.SeasonRank:type_name -> SeasonRankData
	61,  // 62: SocialData.FishData:type_name -> FishSocialData
	62,  // 63: SocialData.CommunityData:type_name -> CommunityData
	63,  // 64: SocialData.PrivilegeData:type_name -> PrivilegeData
	64,  // 65: SocialData.MasterModeDungeonData:type_name -> MasterModeDungeonData
	65,  // 66: GetSocialDataReply.Data:type_name -> SocialData
	66,  // 67: ReturnMessageWrapper.Message:type_name -> GetSocialDataReply
	40,  // 68: ScenePointInfo.Position:type_name -> Position
	4,   // 69: SceneLineData.Status:type_name -> ESceneLineStatus
	68,  // 70: PositionParam.ScenePointInfo:type_name -> ScenePointInfo
	69,  // 71: PositionParam.ScenePosInfo:type_name -> ScenePosIdInfo
	70,  // 72: PositionParam.CutScenePointInfo:type_name -> CutScenePointInfo
	3,   // 73: TransferParam.TransferType:type_name -> EUserTransferType
	72,  // 74: TransferParam.PositionParam:type_name -> PositionParam
	73,  // 75: NotifyEnterWorldRequest.Transform:type_name -> TransferParam
	71,  // 76: NotifyEnterWorldRequest.SceneLineData:type_name -> SceneLineData
	74,  // 77: NotifyEnterWorld.VRequest:type_name -> NotifyEnterWorldRequest
	77,  // 78: MapAttr.Attrs:type_name -> MapAttrValue
	76,  // 79: AttrCollection.Attrs:type_name -> Attr
	78,  // 80: AttrCollection.MapAttrs:type_name -> MapAttr
	80,  // 81: TempAttrCollection.Attrs:type_name -> TempAttr
	82,  // 82: EventDataList.Events:type_name -> EventData
	86,  // 83: ActorBodyPartInfos.Infos:type_name -> ActorBodyPartInfo
	5,   // 84: ActorBodyPartInfo.State:type_name -> BodyPartState
	87,  // 85: SeqPassiveSkillInfo.PassiveInfos:type_name -> PassiveSkillInfo
	91,  // 86: BuffInfoSync.BuffInfos:type_name -> BuffInfo
	92,  // 87: BuffInfo.FightSourceInfo:type_name -> FightSourceInfo
	93,  // 88: BuffInfo.LogicEffect:type_name -> BuffEffectLogicInfo
	6,   // 89: BuffEffectLogicInfo.EffectType:type_name -> EBuffEffectLogicPbType
	30,  // 90: ClientHitPartInfo.DamagePos:type_name -> Vector3
	7,   // 91: SyncDamageInfo.DamageSource:type_name -> EDamageSource
	10,  // 92: SyncDamageInfo.Type:type_name -> EDamageType
	8,   // 93: SyncDamageInfo.Property:type_name -> EDamageProperty
	30,  // 94: SyncDamageInfo.DamagePos:type_name -> Vector3
	94,  // 95: SyncDamageInfo.PartInfos:type_name -> ClientHitPartInfo
	31,  // 96: SyncDamageInfo.DamageWeight:type_name -> Vector2
	9,   // 97: SyncDamageInfo.DamageMode:type_name -> EDamageMode
	95,  // 98: SkillEffect.Damages:type_name -> SyncDamageInfo
	11,  // 99: BuffEffect.Type:type_name -> EBuffEventType
	93,  // 100: BuffEffect.LogicEffect:type_name -> BuffEffectLogicInfo
	97,  // 101: BuffEffectSync.BuffEffects:type_name -> BuffEffect
	30,  // 102: FakeBulletInfo.Offset:type_name -> Vector3
	30,  // 103: FakeBulletInfo.Rotate:type_name -> Vector3
	100, // 104: MagneticRidePassengerChangeInfo.PassengerChangeList:type_name -> PassengerChangeParam
	40,  // 105: PathPointChangeParam.AddPoint:type_name -> Position
	102, // 106: MagneticRidePathPointChangeInfo.PathPointChangeList:type_name -> PathPointChangeParam
	101, // 107: MagneticRideQueueChangeInfo.PassengerChangeInfo:type_name -> MagneticRidePassengerChangeInfo
	103, // 108: MagneticRideQueueChangeInfo.PathPointChangeInfo:type_name -> MagneticRidePathPointChangeInfo
	79,  // 109: AoiSyncDelta.Attrs:type_name -> AttrCollection
	81,  // 110: AoiSyncDelta.TempAttrs:type_name -> TempAttrCollection
	83,  // 111: AoiSyncDelta.EventDataList:type_name -> EventDataList
	84,  // 112: AoiSyncDelta.BulletEvent:type_name -> BulletEvent
	85,  // 113: AoiSyncDelta.BodyPartInfos:type_name -> ActorBodyPartInfos
	96,  // 114: AoiSyncDelta.SkillEffects:type_name -> SkillEffect
	88,  // 115: AoiSyncDelta.PassiveSkillInfos:type_name -> SeqPassiveSkillInfo
	89,  // 116: AoiSyncDelta.PassiveSkillEndInfos:type_name -> SeqPassiveSkillEndInfo
	90,  // 117: AoiSyncDelta.BuffInfos:type_name -> BuffInfoSync
	98,  // 118: AoiSyncDelta.BuffEffect:type_name -> BuffEffectSync
	99,  // 119: AoiSyncDelta.FakeBullets:type_name -> FakeBulletInfo
	104, // 120: AoiSyncDelta.MagneticRideQueueChangeInfoList:type_name -> MagneticRideQueueChangeInfo
	12,  // 121: SkillCD.SkillCDType:type_name -> ESkillCDType
	105, // 122: AoiSyncToMeDelta.BaseDelta:type_name -> AoiSyncDelta
	106, // 123: AoiSyncToMeDelta.SyncSkillCDs:type_name -> SkillCD
	107, // 124: AoiSyncToMeDelta.FightResCDs:type_name -> FightResCD
	105, // 125: SyncNearDeltaInfo.DeltaInfos:type_name -> AoiSyncDelta
	108, // 126: SyncToMeDeltaInfo.DeltaInfo:type_name -> AoiSyncToMeDelta
	113, // 127: SyncNearEntities.Appear:type_name -> Entity
	114, // 128: SyncNearEntities.Disappear:type_name -> DisappearEntity
	13,  // 129: Entity.EntityType:type_name -> EEntityType
	79,  // 130: Entity.Attrs:type_name -> AttrCollection
	81,  // 131: Entity.TempAttrs:type_name -> TempAttrCollection
	85,  // 132: Entity.BodyInfos:type_name -> ActorBodyPartInfos
	88,  // 133: Entity.SeqPassiveSkillInfo:type_name -> SeqPassiveSkillInfo
	90,  // 134: Entity.BuffInfos:type_name -> BuffInfoSync
	14,  // 135: Entity.AppearType:type_name -> EAppearType
	367, // 136: Entity.MagneticRideQueueChangeInfo:type_name -> Entity.MagneticRideQueueChangeInfoEntry
	15,  // 137: DisappearEntity.DisappearType:type_name -> EDisappearType
	368, // 138: UserUnion.req_union_times:type_name -> UserUnion.ReqUnionTimesEntry
	115, // 139: UserUnion.history_active_points:type_name -> UnionHistoryActive
	117, // 140: UserUnion.dance_record:type_name -> UnionDanceHistory
	116, // 141: UserUnion.user_union_hunt_info:type_name -> UserUnionHuntInfo
	16,  // 142: CharBaseInfo.gender:type_name -> EGender
	32,  // 143: CharBaseInfo.face_data:type_name -> FaceData
	119, // 144: CharBaseInfo.profile_info:type_name -> ProfileInfo
	49,  // 145: CharBaseInfo.team_info:type_name -> CharTeam
	0,   // 146: CharBaseInfo.body_size:type_name -> EBodySize
	118, // 147: CharBaseInfo.union_info:type_name -> UserUnion
	28,  // 148: CharBaseInfo.avatar_info:type_name -> AvatarInfo
	369, // 149: SceneLuaData.scene_lua_info:type_name -> SceneLuaData.SceneLuaInfoEntry
	370, // 150: PioneerData.info_map:type_name -> PioneerData.InfoMapEntry
	371, // 151: PioneerInfo.targets:type_name -> PioneerInfo.TargetsEntry
	372, // 152: PioneerInfo.awards:type_name -> PioneerInfo.AwardsEntry
	373, // 153: PioneerInfo.entered_zones:type_name -> PioneerInfo.EnteredZonesEntry
	17,  // 154: PioneerInfo.err_code:type_name -> EErrorCode
	374, // 155: BuffDBInfo.all_buff_db_data:type_name -> BuffDBInfo.AllBuffDbDataEntry
	375, // 156: ItemPackage.packages:type_name -> ItemPackage.PackagesEntry
	376, // 157: ItemPackage.unlock_items:type_name -> ItemPackage.UnlockItemsEntry
	377, // 158: ItemPackage.use_group_cd:type_name -> ItemPackage.UseGroupCdEntry
	378, // 159: Package.item_cd:type_name -> Package.ItemCdEntry
	379, // 160: Package.items:type_name -> Package.ItemsEntry
	380, // 161: QuestData.target_num:type_name -> QuestData.TargetNumEntry
	381, // 162: QuestData.target_max_num:type_name -> QuestData.TargetMaxNumEntry
	18,  // 163: QuestData.step_status:type_name -> EQuestStepStatus
	382, // 164: QuestData.target_type:type_name -> QuestData.TargetTypeEntry
	383, // 165: QuestHistory.step_history:type_name -> QuestHistory.StepHistoryEntry
	384, // 166: QuestDataList.quest_map:type_name -> QuestDataList.QuestMapEntry
	385, // 167: QuestDataList.finish_quest:type_name -> QuestDataList.FinishQuestEntry
	386, // 168: QuestDataList.finish_reset_quest:type_name -> QuestDataList.FinishResetQuestEntry
	387, // 169: QuestDataList.history_map:type_name -> QuestDataList.HistoryMapEntry
	388, // 170: QuestDataList.world_quest_info:type_name -> QuestDataList.WorldQuestInfoEntry
	389, // 171: QuestDataList.all_world_quest_list:type_name -> QuestDataList.AllWorldQuestListEntry
	390, // 172: QuestDataList.blue_world_quest_map:type_name -> QuestDataList.BlueWorldQuestMapEntry
	391, // 173: QuestDataList.filter_event_id:type_name -> QuestDataList.FilterEventIdEntry
	392, // 174: QuestDataList.track_optional_quest:type_name -> QuestDataList.TrackOptionalQuestEntry
	393, // 175: QuestDataList.finish_reset_quest_count:type_name -> QuestDataList.FinishResetQuestCountEntry
	394, // 176: QuestDataList.accept_quest_map:type_name -> QuestDataList.AcceptQuestMapEntry
	395, // 177: MiscInfo.expression_ids_learned:type_name -> MiscInfo.ExpressionIdsLearnedEntry
	396, // 178: ExchangeItem.exchange_info:type_name -> ExchangeItem.ExchangeInfoEntry
	397, // 179: ExchangeInfo.exchange_data:type_name -> ExchangeInfo.ExchangeDataEntry
	19,  // 180: EquipEnchantInfo.enchant_type:type_name -> EEquipEnchantType
	398, // 181: EquipSuitInfo.suit_attr:type_name -> EquipSuitInfo.SuitAttrEntry
	399, // 182: EquipList.equip_list:type_name -> EquipList.EquipListEntry
	310, // 183: EquipList.equip_attr:type_name -> EquipAttr
	400, // 184: EquipList.equip_recast_info:type_name -> EquipList.EquipRecastInfoEntry
	401, // 185: EquipList.equip_enchant:type_name -> EquipList.EquipEnchantEntry
	402, // 186: EquipList.suit_info_dict:type_name -> EquipList.SuitInfoDictEntry
	403, // 187: EnergyItem.energy_info:type_name -> EnergyItem.EnergyInfoEntry
	404, // 188: EnergyInfo.energy_item_info:type_name -> EnergyInfo.EnergyItemInfoEntry
	405, // 189: MapData.mark_data_map:type_name -> MapData.MarkDataMapEntry
	406, // 190: MapData.ares_map:type_name -> MapData.AresMapEntry
	407, // 191: MarkData.mark_info_map:type_name -> MarkData.MarkInfoMapEntry
	147, // 192: MarkInfo.position:type_name -> MarkPosition
	408, // 193: DungeonEnterLimit.enter_count:type_name -> DungeonEnterLimit.EnterCountEntry
	409, // 194: DungeonWeekTargetList.week_target:type_name -> DungeonWeekTargetList.WeekTargetEntry
	410, // 195: RaidRecord.boss_progress:type_name -> RaidRecord.BossProgressEntry
	411, // 196: DungeonList.complete_dungeon:type_name -> DungeonList.CompleteDungeonEntry
	148, // 197: DungeonList.dungeon_enter_limit:type_name -> DungeonEnterLimit
	150, // 198: DungeonList.week_target:type_name -> DungeonWeekTargetList
	412, // 199: DungeonList.raid_record_table:type_name -> DungeonList.RaidRecordTableEntry
	156, // 200: UserFightAttr.cd_info:type_name -> SkillCDInfo
	413, // 201: UnlockColorInfo.color_info_map:type_name -> UnlockColorInfo.ColorInfoMapEntry
	414, // 202: UnlockColorInfo.color_block_info_map:type_name -> UnlockColorInfo.ColorBlockInfoMapEntry
	415, // 203: FashionMgr.wear_info:type_name -> FashionMgr.WearInfoEntry
	416, // 204: FashionMgr.fashion_datas:type_name -> FashionMgr.FashionDatasEntry
	417, // 205: FashionMgr.unlock_color:type_name -> FashionMgr.UnlockColorEntry
	418, // 206: FashionMgr.fashion_reward:type_name -> FashionMgr.FashionRewardEntry
	419, // 207: FashionMgr.all_fashion:type_name -> FashionMgr.AllFashionEntry
	420, // 208: FashionMgr.all_ride:type_name -> FashionMgr.AllRideEntry
	421, // 209: FashionMgr.all_weapon_skin:type_name -> FashionMgr.AllWeaponSkinEntry
	422, // 210: FashionMgr.fashion_advance:type_name -> FashionMgr.FashionAdvanceEntry
	423, // 211: FashionMgr.all_fashion_num:type_name -> FashionMgr.AllFashionNumEntry
	424, // 212: FashionMgr.all_ride_num:type_name -> FashionMgr.AllRideNumEntry
	425, // 213: FashionMgr.all_weapon_skin_num:type_name -> FashionMgr.AllWeaponSkinNumEntry
	426, // 214: ProfileList.unlock_profile_list:type_name -> ProfileList.UnlockProfileListEntry
	427, // 215: PlayHelper.displayed_helper_list:type_name -> PlayHelper.DisplayedHelperListEntry
	428, // 216: PlayHelper.completed_guide:type_name -> PlayHelper.CompletedGuideEntry
	429, // 217: CounterList.counter_map:type_name -> CounterList.CounterMapEntry
	430, // 218: PersonalObject.scene_obj_data:type_name -> PersonalObject.SceneObjDataEntry
	431, // 219: ScenePersonalObject.personal_obj_data:type_name -> ScenePersonalObject.PersonalObjDataEntry
	432, // 220: RoleLevel.received_level_list:type_name -> RoleLevel.ReceivedLevelListEntry
	168, // 221: RoleLevel.proficiency_info:type_name -> LevelProficiency
	433, // 222: RoleLevel.active_exp_map:type_name -> RoleLevel.ActiveExpMapEntry
	434, // 223: LevelProficiency.using_proficiency_map:type_name -> LevelProficiency.UsingProficiencyMapEntry
	435, // 224: LevelProficiency.unlock_proficiency_map:type_name -> LevelProficiency.UnlockProficiencyMapEntry
	436, // 225: Pivot.pivots:type_name -> Pivot.PivotsEntry
	437, // 226: Pivot.map_pivots:type_name -> Pivot.MapPivotsEntry
	438, // 227: TransferPoint.points:type_name -> TransferPoint.PointsEntry
	439, // 228: SeasonTarget.target_info:type_name -> SeasonTarget.TargetInfoEntry
	440, // 229: RedDotData.permanent_closed_red_dot:type_name -> RedDotData.PermanentClosedRedDotEntry
	441, // 230: RedDotData.red_dot_count:type_name -> RedDotData.RedDotCountEntry
	442, // 231: Resonance.resonances:type_name -> Resonance.ResonancesEntry
	443, // 232: CutsState.state_info:type_name -> CutsState.StateInfoEntry
	444, // 233: InvestigateList.investigate_map:type_name -> InvestigateList.InvestigateMapEntry
	445, // 234: InvestigateList.comp_investigate_map:type_name -> InvestigateList.CompInvestigateMapEntry
	446, // 235: InvestigateData.step_ids:type_name -> InvestigateData.StepIdsEntry
	447, // 236: InvestigateStep.reasoning_map:type_name -> InvestigateStep.ReasoningMapEntry
	448, // 237: ParkourRecordList.record_list:type_name -> ParkourRecordList.RecordListEntry
	449, // 238: SeasonQuestList.season_map:type_name -> SeasonQuestList.SeasonMapEntry
	450, // 239: RoleFace.unlock_item_map:type_name -> RoleFace.UnlockItemMapEntry
	451, // 240: MapBookInfoList.map_book_map:type_name -> MapBookInfoList.MapBookMapEntry
	452, // 241: MapBookInfo.map_sticker_map:type_name -> MapBookInfo.MapStickerMapEntry
	453, // 242: MapStickerInfo.sticker_map:type_name -> MapStickerInfo.StickerMapEntry
	454, // 243: MapStickerTaskInfo.target_num:type_name -> MapStickerTaskInfo.TargetNumEntry
	455, // 244: MonsterExploreList.monster_explore_list:type_name -> MonsterExploreList.MonsterExploreListEntry
	456, // 245: MonsterExploreInfo.target_num:type_name -> MonsterExploreInfo.TargetNumEntry
	457, // 246: ShowPieceData.often_use_type_list:type_name -> ShowPieceData.OftenUseTypeListEntry
	458, // 247: ShowPieceData.unlock_type_list:type_name -> ShowPieceData.UnlockTypeListEntry
	459, // 248: ShowPieceData.roulette_pos_piece_info:type_name -> ShowPieceData.RoulettePosPieceInfoEntry
	20,  // 249: ShowPiecePair.piece_type:type_name -> EShowPieceType
	460, // 250: CollectionBook.mod_book_map:type_name -> CollectionBook.ModBookMapEntry
	461, // 251: NotGetProceedAwardInfo.award_id_times:type_name -> NotGetProceedAwardInfo.AwardIdTimesEntry
	462, // 252: CookList.book_data:type_name -> CookList.BookDataEntry
	463, // 253: TimerRefreshDataList.refresh_data_list:type_name -> TimerRefreshDataList.RefreshDataListEntry
	464, // 254: TimerRefreshList.refresh_data:type_name -> TimerRefreshList.RefreshDataEntry
	465, // 255: ChallengeDungeonInfo.dungeon_info:type_name -> ChallengeDungeonInfo.DungeonInfoEntry
	466, // 256: ChallengeDungeonInfo.dungeon_target_award:type_name -> ChallengeDungeonInfo.DungeonTargetAwardEntry
	467, // 257: DungeonTargetAward.dungeon_target_progress:type_name -> DungeonTargetAward.DungeonTargetProgressEntry
	468, // 258: SyncAwardData.level_up_award_infos:type_name -> SyncAwardData.LevelUpAwardInfosEntry
	469, // 259: SeasonAchievementList.season_achievement_list:type_name -> SeasonAchievementList.SeasonAchievementListEntry
	470, // 260: SeasonAchievementList.has_init_dones:type_name -> SeasonAchievementList.HasInitDonesEntry
	471, // 261: SeasonAchievement.season_achievement:type_name -> SeasonAchievement.SeasonAchievementEntry
	472, // 262: SeasonRankList.season_rank_list:type_name -> SeasonRankList.SeasonRankListEntry
	318, // 263: SeasonCenter.battle_pass:type_name -> BattlePass
	216, // 264: SeasonCenter.bp_quest_list:type_name -> SeasonBpQuestList
	473, // 265: SeasonCenter.season_history:type_name -> SeasonCenter.SeasonHistoryEntry
	474, // 266: SeasonBpQuestList.season_map:type_name -> SeasonBpQuestList.SeasonMapEntry
	318, // 267: SeasonCenterHistory.battle_pass:type_name -> BattlePass
	216, // 268: SeasonCenterHistory.bp_quest_list:type_name -> SeasonBpQuestList
	475, // 269: SeasonMedalInfo.normal_hole_infos:type_name -> SeasonMedalInfo.NormalHoleInfosEntry
	221, // 270: SeasonMedalInfo.core_hole_info:type_name -> MedalHole
	476, // 271: SeasonMedalInfo.core_hole_node_infos:type_name -> SeasonMedalInfo.CoreHoleNodeInfosEntry
	477, // 272: CommunityHomeData.unlocked_recipes:type_name -> CommunityHomeData.UnlockedRecipesEntry
	478, // 273: SeasonActivation.activation_targets:type_name -> SeasonActivation.ActivationTargetsEntry
	479, // 274: SeasonActivation.stage_reward_status:type_name -> SeasonActivation.StageRewardStatusEntry
	480, // 275: Slot.slots:type_name -> Slot.SlotsEntry
	481, // 276: MonsterHuntInfo.monster_hunt_list:type_name -> MonsterHuntInfo.MonsterHuntListEntry
	482, // 277: MonsterHuntInfo.level_award_flag:type_name -> MonsterHuntInfo.LevelAwardFlagEntry
	483, // 278: MonsterHuntInfo.monster_hunt_refrsh_time:type_name -> MonsterHuntInfo.MonsterHuntRefrshTimeEntry
	484, // 279: MonsterHuntTarget.target_info_list:type_name -> MonsterHuntTarget.TargetInfoListEntry
	21,  // 280: MonsterTargetInfo.award_flag:type_name -> MonsterTargetAward
	485, // 281: Mod.mod_slots:type_name -> Mod.ModSlotsEntry
	486, // 282: Mod.mod_infos:type_name -> Mod.ModInfosEntry
	307, // 283: ModInfo.upgrade_records:type_name -> ModPartUpgradeRecord
	487, // 284: WorldEventMap.event_map:type_name -> WorldEventMap.EventMapEntry
	488, // 285: FishSetting.fish_records:type_name -> FishSetting.FishRecordsEntry
	489, // 286: FishSetting.fish_rod_durability:type_name -> FishSetting.FishRodDurabilityEntry
	490, // 287: FishSetting.level_reward:type_name -> FishSetting.LevelRewardEntry
	491, // 288: FishSetting.zero_fish_times:type_name -> FishSetting.ZeroFishTimesEntry
	492, // 289: ProfessionList.profession_list:type_name -> ProfessionList.ProfessionListEntry
	493, // 290: ProfessionList.aoyi_skill_info_map:type_name -> ProfessionList.AoyiSkillInfoMapEntry
	494, // 291: ProfessionList.talent_list:type_name -> ProfessionList.TalentListEntry
	495, // 292: ProfessionInfo.skill_info_map:type_name -> ProfessionInfo.SkillInfoMapEntry
	496, // 293: ProfessionInfo.slot_skill_info_map:type_name -> ProfessionInfo.SlotSkillInfoMapEntry
	497, // 294: ProfessionSkillInfo.active_skill_skins:type_name -> ProfessionSkillInfo.ActiveSkillSkinsEntry
	498, // 295: TrialRoad.room_target_award:type_name -> TrialRoad.RoomTargetAwardEntry
	242, // 296: TrialRoad.target_award:type_name -> TrialRoadTargetAward
	499, // 297: TrialRoadTargetAward.target_progress:type_name -> TrialRoadTargetAward.TargetProgressEntry
	500, // 298: TrialRoadRoomTargetAward.target_progress:type_name -> TrialRoadRoomTargetAward.TargetProgressEntry
	501, // 299: GashaData.gasha_infos:type_name -> GashaData.GashaInfosEntry
	502, // 300: GashaData.gasha_guarantee_infos:type_name -> GashaData.GashaGuaranteeInfosEntry
	503, // 301: ShopData.refresh_list:type_name -> ShopData.RefreshListEntry
	504, // 302: ShopData.normal_shop_records:type_name -> ShopData.NormalShopRecordsEntry
	505, // 303: ShopData.season_shop_records:type_name -> ShopData.SeasonShopRecordsEntry
	249, // 304: ShopData.compensation_item_data:type_name -> ShopCompensationData
	506, // 305: ShopCompensationData.items:type_name -> ShopCompensationData.ItemsEntry
	507, // 306: ShopRefreshRecord.shop_refresh_records:type_name -> ShopRefreshRecord.ShopRefreshRecordsEntry
	508, // 307: PersonalWorldBossInfo.score_award_info:type_name -> PersonalWorldBossInfo.ScoreAwardInfoEntry
	509, // 308: PersonalWorldBossInfo.boss_award_info:type_name -> PersonalWorldBossInfo.BossAwardInfoEntry
	22,  // 309: CommonAwardInfo.award_status:type_name -> EReceiveRewardStatus
	510, // 310: CraftEnergyRecord.records:type_name -> CraftEnergyRecord.RecordsEntry
	511, // 311: CutSceneInfos.cut_scene_infos:type_name -> CutSceneInfos.CutSceneInfosEntry
	512, // 312: CutSceneInfos.finished_cut_scenes:type_name -> CutSceneInfos.FinishedCutScenesEntry
	513, // 313: CutSceneInfos.finished_infos:type_name -> CutSceneInfos.FinishedInfosEntry
	82,  // 314: CutSceneInfo.event_data:type_name -> EventData
	514, // 315: UserRecommendPlayData.play_mail:type_name -> UserRecommendPlayData.PlayMailEntry
	515, // 316: RideList.rides:type_name -> RideList.RidesEntry
	23,  // 317: RideList.type:type_name -> ERidePropertyType
	516, // 318: RideList.skin_data:type_name -> RideList.SkinDataEntry
	517, // 319: RideSkinContainer.sinks:type_name -> RideSkinContainer.SinksEntry
	266, // 320: PayOrderList.first_pay:type_name -> PayData
	518, // 321: PayOrderList.order_list:type_name -> PayOrderList.OrderListEntry
	519, // 322: PayOrderList.order_index_list:type_name -> PayOrderList.OrderIndexListEntry
	520, // 323: PayData.pay_data:type_name -> PayData.PayDataEntry
	521, // 324: LifeProfession.profession_info:type_name -> LifeProfession.ProfessionInfoEntry
	522, // 325: LifeProfession.life_target_info:type_name -> LifeProfession.LifeTargetInfoEntry
	523, // 326: LifeProfession.life_profession_recipe:type_name -> LifeProfession.LifeProfessionRecipeEntry
	269, // 327: LifeProfession.life_profession_alchemy_info:type_name -> LifeProfessionAlchemyInfo
	524, // 328: LifeProfession.spare_energy:type_name -> LifeProfession.SpareEnergyEntry
	525, // 329: LifeProfessionBasic.specialization:type_name -> LifeProfessionBasic.SpecializationEntry
	275, // 330: LifeProfessionWork.life_profession_work_info:type_name -> LifeProfessionWorkInfo
	275, // 331: LifeProfessionWork.life_profession_work_history_info:type_name -> LifeProfessionWorkInfo
	303, // 332: LifeProfessionWorkInfo.reward:type_name -> Item
	526, // 333: UserActivityList.activities:type_name -> UserActivityList.ActivitiesEntry
	527, // 334: UserActivityInfo.rewards:type_name -> UserActivityInfo.RewardsEntry
	528, // 335: UserActivityRewardInfo.functions:type_name -> UserActivityRewardInfo.FunctionsEntry
	529, // 336: GameFunctionData.function_times:type_name -> GameFunctionData.FunctionTimesEntry
	530, // 337: PlayerRecord.player_record_infos:type_name -> PlayerRecord.PlayerRecordInfosEntry
	531, // 338: PlayerRecordInfo.player_records:type_name -> PlayerRecordInfo.PlayerRecordsEntry
	532, // 339: DropContainerInfo.drop_containers:type_name -> DropContainerInfo.DropContainersEntry
	533, // 340: DropContainerInfo.drop_award_histories:type_name -> DropContainerInfo.DropAwardHistoriesEntry
	534, // 341: MonthlyCard.monthly_card_info:type_name -> MonthlyCard.MonthlyCardInfoEntry
	303, // 342: MonthlyCard.items:type_name -> Item
	535, // 343: MonthlyCard.monthly_card_buy_list:type_name -> MonthlyCard.MonthlyCardBuyListEntry
	22,  // 344: MonthlyCardInfo.limit_award_status:type_name -> EReceiveRewardStatus
	22,  // 345: MonthlyCardInfo.award_status:type_name -> EReceiveRewardStatus
	289, // 346: MonthlyCardInfo.month_card_item:type_name -> MonthCardItem
	536, // 347: FashionBenefit.task_list:type_name -> FashionBenefit.TaskListEntry
	292, // 348: FashionBenefit.collection_history:type_name -> FashionBenefitCollectionHistory
	537, // 349: ItemCurrency.currency_datas:type_name -> ItemCurrency.CurrencyDatasEntry
	538, // 350: PrivilegeEffectData.normal_pass_id_map:type_name -> PrivilegeEffectData.NormalPassIdMapEntry
	539, // 351: PrivilegeEffectData.prime_pass_id_map:type_name -> PrivilegeEffectData.PrimePassIdMapEntry
	298, // 352: SyncContainerData.VData:type_name -> CharSerialize
	120, // 353: CharSerialize.char_base:type_name -> CharBaseInfo
	43,  // 354: CharSerialize.scene_data:type_name -> SceneData
	121, // 355: CharSerialize.scene_lua_data:type_name -> SceneLuaData
	122, // 356: CharSerialize.pioneer_data:type_name -> PioneerData
	124, // 357: CharSerialize.buff_info:type_name -> BuffDBInfo
	126, // 358: CharSerialize.item_package:type_name -> ItemPackage
	132, // 359: CharSerialize.quest_list:type_name -> QuestDataList
	39,  // 360: CharSerialize.setting_data:type_name -> SettingData
	133, // 361: CharSerialize.misc_info:type_name -> MiscInfo
	134, // 362: CharSerialize.exchange_items:type_name -> ExchangeItem
	140, // 363: CharSerialize.equip:type_name -> EquipList
	141, // 364: CharSerialize.energy_item:type_name -> EnergyItem
	144, // 365: CharSerialize.map_data:type_name -> MapData
	154, // 366: CharSerialize.dungeon_list:type_name -> DungeonList
	155, // 367: CharSerialize.attr:type_name -> UserFightAttr
	159, // 368: CharSerialize.fashion:type_name -> FashionMgr
	160, // 369: CharSerialize.profile_list:type_name -> ProfileList
	161, // 370: CharSerialize.help:type_name -> PlayHelper
	162, // 371: CharSerialize.counter_list:type_name -> CounterList
	164, // 372: CharSerialize.personal_obj:type_name -> PersonalObject
	167, // 373: CharSerialize.role_level:type_name -> RoleLevel
	170, // 374: CharSerialize.pivot:type_name -> Pivot
	172, // 375: CharSerialize.transfer_point:type_name -> TransferPoint
	173, // 376: CharSerialize.planet_memory:type_name -> PlanetMemory
	174, // 377: CharSerialize.planet_memory_target:type_name -> SeasonTarget
	176, // 378: CharSerialize.red_dot:type_name -> RedDotData
	177, // 379: CharSerialize.resonance:type_name -> Resonance
	178, // 380: CharSerialize.cuts_state:type_name -> CutsState
	179, // 381: CharSerialize.investigate_list:type_name -> InvestigateList
	183, // 382: CharSerialize.records:type_name -> ParkourRecordList
	185, // 383: CharSerialize.interaction:type_name -> InteractionInfo
	186, // 384: CharSerialize.season_quest_list:type_name -> SeasonQuestList
	188, // 385: CharSerialize.role_face:type_name -> RoleFace
	189, // 386: CharSerialize.map_book_list:type_name -> MapBookInfoList
	52,  // 387: CharSerialize.function_data:type_name -> FunctionData
	193, // 388: CharSerialize.anti_info:type_name -> AntiAddictionInfo
	194, // 389: CharSerialize.monster_explore_list:type_name -> MonsterExploreList
	196, // 390: CharSerialize.show_piece_data:type_name -> ShowPieceData
	199, // 391: CharSerialize.collection_book:type_name -> CollectionBook
	200, // 392: CharSerialize.not_get_proceed_award_times:type_name -> NotGetProceedAwardInfo
	201, // 393: CharSerialize.cook_list:type_name -> CookList
	203, // 394: CharSerialize.refresh_data_list:type_name -> TimerRefreshDataList
	206, // 395: CharSerialize.challenge_dungeon_info:type_name -> ChallengeDungeonInfo
	208, // 396: CharSerialize.sync_award_data:type_name -> SyncAwardData
	210, // 397: CharSerialize.season_achievement_list:type_name -> SeasonAchievementList
	213, // 398: CharSerialize.season_rank_list:type_name -> SeasonRankList
	215, // 399: CharSerialize.season_center:type_name -> SeasonCenter
	57,  // 400: CharSerialize.personal_zone:type_name -> PersonalZone
	219, // 401: CharSerialize.season_medal_info:type_name -> SeasonMedalInfo
	222, // 402: CharSerialize.community_home_info:type_name -> CommunityHomeData
	224, // 403: CharSerialize.season_activation:type_name -> SeasonActivation
	226, // 404: CharSerialize.slots:type_name -> Slot
	228, // 405: CharSerialize.monster_hunt_info:type_name -> MonsterHuntInfo
	231, // 406: CharSerialize.mod:type_name -> Mod
	233, // 407: CharSerialize.world_event_map:type_name -> WorldEventMap
	235, // 408: CharSerialize.fish_setting:type_name -> FishSetting
	236, // 409: CharSerialize.freight_data:type_name -> FreightData
	237, // 410: CharSerialize.profession_list:type_name -> ProfessionList
	241, // 411: CharSerialize.trial_road:type_name -> TrialRoad
	245, // 412: CharSerialize.gasha_data:type_name -> GashaData
	248, // 413: CharSerialize.shop_data:type_name -> ShopData
	254, // 414: CharSerialize.personal_world_boss_info:type_name -> PersonalWorldBossInfo
	256, // 415: CharSerialize.craft_energy:type_name -> CraftEnergyRecord
	257, // 416: CharSerialize.weekly_tower:type_name -> WeeklyTowerRecord
	258, // 417: CharSerialize.cut_scene_infos:type_name -> CutSceneInfos
	260, // 418: CharSerialize.recommend_play_data:type_name -> UserRecommendPlayData
	261, // 419: CharSerialize.ride_list:type_name -> RideList
	265, // 420: CharSerialize.pay_order_list:type_name -> PayOrderList
	268, // 421: CharSerialize.life_profession:type_name -> LifeProfession
	274, // 422: CharSerialize.life_profession_work:type_name -> LifeProfessionWork
	276, // 423: CharSerialize.user_activity_list:type_name -> UserActivityList
	281, // 424: CharSerialize.player_record:type_name -> PlayerRecord
	284, // 425: CharSerialize.drop_container:type_name -> DropContainerInfo
	287, // 426: CharSerialize.monthly_card:type_name -> MonthlyCard
	291, // 427: CharSerialize.fashion_benefit:type_name -> FashionBenefit
	294, // 428: CharSerialize.item_currency:type_name -> ItemCurrency
	296, // 429: CharSerialize.privilege_effect_data:type_name -> PrivilegeEffectData
	299, // 430: CharSerialize.treasure:type_name -> Treasure
	312, // 431: CharSerialize.unlock_emoji_data:type_name -> UnlockEmojiData
	313, // 432: CharSerialize.player_order_comtainer_info:type_name -> PlayerOrderComtainerInfo
	314, // 433: CharSerialize.player_box:type_name -> PlayerBox
	316, // 434: CharSerialize.launch_privilege_data:type_name -> LaunchPrivilegeData
	317, // 435: CharSerialize.battle_pass_data:type_name -> BattlePassData
	320, // 436: CharSerialize.recharge_data:type_name -> RechargeData
	321, // 437: CharSerialize.lucky_value_mgr:type_name -> LuckyValueMgr
	323, // 438: CharSerialize.handbook_data:type_name -> HandbookData
	325, // 439: CharSerialize.master_mode_dungeon_info:type_name -> MasterModeDungeonInfo
	329, // 440: CharSerialize.statistics_data:type_name -> StatisticsData
	332, // 441: CharSerialize.compenstion_statistics:type_name -> CompensationStatistics
	337, // 442: CharSerialize.bubble_act_data:type_name -> BubbleActData
	338, // 443: CharSerialize.mail_claimed_info:type_name -> MailClaimedInfo
	339, // 444: CharSerialize.newbie_data:type_name -> NewbieData
	340, // 445: CharSerialize.fight_point:type_name -> FightPoint
	343, // 446: CharSerialize.sign:type_name -> SignInfo
	346, // 447: CharSerialize.char_statistics_data:type_name -> CharStatisticsData
	540, // 448: Treasure.rows:type_name -> Treasure.RowsEntry
	541, // 449: Treasure.history_rows:type_name -> Treasure.HistoryRowsEntry
	542, // 450: TreasureItemRow.main_targets:type_name -> TreasureItemRow.MainTargetsEntry
	543, // 451: TreasureItemRow.sub_targets:type_name -> TreasureItemRow.SubTargetsEntry
	302, // 452: TreasureItemTarget.reward:type_name -> TreasureItem
	303, // 453: TreasureItem.items:type_name -> Item
	24,  // 454: Item.bind_flag:type_name -> EItemBindFlag
	310, // 455: Item.equip_attr:type_name -> EquipAttr
	308, // 456: Item.mod_attr:type_name -> ModAttr
	306, // 457: Item.mod_new_attr:type_name -> ModNewAttr
	304, // 458: Item.affix_data:type_name -> AffixData
	544, // 459: Item.extend_attr:type_name -> Item.ExtendAttrEntry
	545, // 460: Item.gene_sequence:type_name -> Item.GeneSequenceEntry
	307, // 461: ModNewAttr.upgrade_records:type_name -> ModPartUpgradeRecord
	309, // 462: ModAttr.mod_attr_info:type_name -> ModAttrInfo
	546, // 463: ModAttrInfo.effect_parameter:type_name -> ModAttrInfo.EffectParameterEntry
	547, // 464: EquipAttr.base_attrs:type_name -> EquipAttr.BaseAttrsEntry
	548, // 465: EquipAttr.basic_attr:type_name -> EquipAttr.BasicAttrEntry
	549, // 466: EquipAttr.advance_attr:type_name -> EquipAttr.AdvanceAttrEntry
	550, // 467: EquipAttr.recast_attr:type_name -> EquipAttr.RecastAttrEntry
	551, // 468: EquipAttr.rare_quality_attr:type_name -> EquipAttr.RareQualityAttrEntry
	311, // 469: EquipAttr.equip_attr_set:type_name -> EquipAttrSet
	552, // 470: EquipAttrSet.basic_attr:type_name -> EquipAttrSet.BasicAttrEntry
	553, // 471: EquipAttrSet.advance_attr:type_name -> EquipAttrSet.AdvanceAttrEntry
	554, // 472: EquipAttrSet.recast_attr:type_name -> EquipAttrSet.RecastAttrEntry
	555, // 473: EquipAttrSet.rare_quality_attr:type_name -> EquipAttrSet.RareQualityAttrEntry
	556, // 474: UnlockEmojiData.unlock_map:type_name -> UnlockEmojiData.UnlockMapEntry
	557, // 475: PlayerBox.scenes:type_name -> PlayerBox.ScenesEntry
	558, // 476: PlayerBoxData.boxs:type_name -> PlayerBoxData.BoxsEntry
	2,   // 477: LaunchPrivilegeData.launch_platform:type_name -> LaunchPlatform
	2,   // 478: LaunchPrivilegeData.bak_launch_platform:type_name -> LaunchPlatform
	559, // 479: BattlePassData.battle_map:type_name -> BattlePassData.BattleMapEntry
	560, // 480: BattlePass.award:type_name -> BattlePass.AwardEntry
	561, // 481: LuckyValueMgr.luck_value_info:type_name -> LuckyValueMgr.LuckValueInfoEntry
	562, // 482: HandbookData.unlock_note_important_role_map:type_name -> HandbookData.UnlockNoteImportantRoleMapEntry
	563, // 483: HandbookData.unlock_note_reading_book_map:type_name -> HandbookData.UnlockNoteReadingBookMapEntry
	564, // 484: HandbookData.unlock_note_dictionary_map:type_name -> HandbookData.UnlockNoteDictionaryMapEntry
	565, // 485: HandbookData.unlock_note_post_card_map:type_name -> HandbookData.UnlockNotePostCardMapEntry
	566, // 486: HandbookData.unlock_note_month_card_map:type_name -> HandbookData.UnlockNoteMonthCardMapEntry
	567, // 487: MasterModeDungeonInfo.master_mode_dungeon_info:type_name -> MasterModeDungeonInfo.MasterModeDungeonInfoEntry
	568, // 488: SeasonMasterModeDungeonInfo.master_mode_diff_info:type_name -> SeasonMasterModeDungeonInfo.MasterModeDiffInfoEntry
	569, // 489: SeasonMasterModeDungeonInfo.season_awards:type_name -> SeasonMasterModeDungeonInfo.SeasonAwardsEntry
	570, // 490: MasterModeDiffDungeonInfo.dungeon_info:type_name -> MasterModeDiffDungeonInfo.DungeonInfoEntry
	571, // 491: StatisticsData.stat_record_map:type_name -> StatisticsData.StatRecordMapEntry
	572, // 492: StatRecord.group_cnts:type_name -> StatRecord.GroupCntsEntry
	573, // 493: StatRecord.scene_records:type_name -> StatRecord.SceneRecordsEntry
	574, // 494: SceneRecord.group_cnts:type_name -> SceneRecord.GroupCntsEntry
	575, // 495: CompensationStatistics.season_data:type_name -> CompensationStatistics.SeasonDataEntry
	576, // 496: CompensationStatistics.last_week:type_name -> CompensationStatistics.LastWeekEntry
	577, // 497: CompensationSeasonStatistics.week_data:type_name -> CompensationSeasonStatistics.WeekDataEntry
	578, // 498: CompensationSeasonStatistics.compensation:type_name -> CompensationSeasonStatistics.CompensationEntry
	579, // 499: CompensationRecord.compensation_data:type_name -> CompensationRecord.CompensationDataEntry
	580, // 500: BubbleActData.bubble_info:type_name -> BubbleActData.BubbleInfoEntry
	581, // 501: MailClaimedInfo.claimed_mails:type_name -> MailClaimedInfo.ClaimedMailsEntry
	582, // 502: FightPoint.fight_point_data:type_name -> FightPoint.FightPointDataEntry
	583, // 503: FightPointData.sub_function_data:type_name -> FightPointData.SubFunctionDataEntry
	584, // 504: SignInfo.sign_info:type_name -> SignInfo.SignInfoEntry
	585, // 505: SignStatusList.sign_status_data:type_name -> SignStatusList.SignStatusDataEntry
	29,  // 506: FaceData.ColorInfoEntry.value:type_name -> IntVec3
	29,  // 507: FashionColorInfo.ColorsEntry.value:type_name -> IntVec3
	29,  // 508: FashionColorInfo.AttachmentColorEntry.value:type_name -> IntVec3
	48,  // 509: CharTeam.TeamMemberDataEntry.value:type_name -> TeamMemData
	55,  // 510: PersonalZone.FashionCollectQualityCountEntry.value:type_name -> FashionQualityCollectInfo
	56,  // 511: PersonalZone.RideCollectQualityCountEntry.value:type_name -> RideQualityCollectInfo
	60,  // 512: FishSocialData.FishRecordsEntry.value:type_name -> FishRecord
	112, // 513: Entity.MagneticRideQueueChangeInfoEntry.value:type_name -> MagneticQueueAppearInfo
	123, // 514: PioneerData.InfoMapEntry.value:type_name -> PioneerInfo
	125, // 515: BuffDBInfo.AllBuffDbDataEntry.value:type_name -> BuffDBData
	127, // 516: ItemPackage.PackagesEntry.value:type_name -> Package
	303, // 517: Package.ItemsEntry.value:type_name -> Item
	128, // 518: QuestDataList.QuestMapEntry.value:type_name -> QuestData
	129, // 519: QuestDataList.HistoryMapEntry.value:type_name -> QuestHistory
	130, // 520: QuestDataList.WorldQuestInfoEntry.value:type_name -> WorldQuestInfo
	131, // 521: QuestDataList.FilterEventIdEntry.value:type_name -> worldQuestList
	135, // 522: ExchangeItem.ExchangeInfoEntry.value:type_name -> ExchangeInfo
	136, // 523: ExchangeInfo.ExchangeDataEntry.value:type_name -> ExchangeData
	137, // 524: EquipList.EquipListEntry.value:type_name -> EquipInfo
	310, // 525: EquipList.EquipRecastInfoEntry.value:type_name -> EquipAttr
	138, // 526: EquipList.EquipEnchantEntry.value:type_name -> EquipEnchantInfo
	139, // 527: EquipList.SuitInfoDictEntry.value:type_name -> EquipSuitInfo
	142, // 528: EnergyItem.EnergyInfoEntry.value:type_name -> EnergyInfo
	143, // 529: EnergyInfo.EnergyItemInfoEntry.value:type_name -> EnergyItemInfo
	145, // 530: MapData.MarkDataMapEntry.value:type_name -> MarkData
	146, // 531: MarkData.MarkInfoMapEntry.value:type_name -> MarkInfo
	149, // 532: DungeonEnterLimit.EnterCountEntry.value:type_name -> DungeonEnterCount
	151, // 533: DungeonWeekTargetList.WeekTargetEntry.value:type_name -> DungeonTargetProgress
	153, // 534: RaidRecord.BossProgressEntry.value:type_name -> BossProgress
	328, // 535: DungeonList.CompleteDungeonEntry.value:type_name -> DungeonInfo
	152, // 536: DungeonList.RaidRecordTableEntry.value:type_name -> RaidRecord
	36,  // 537: FashionMgr.FashionDatasEntry.value:type_name -> FashionColorInfo
	157, // 538: FashionMgr.UnlockColorEntry.value:type_name -> UnlockColorInfo
	158, // 539: FashionMgr.FashionAdvanceEntry.value:type_name -> FashionAdvanceInfo
	163, // 540: CounterList.CounterMapEntry.value:type_name -> CounterInfo
	165, // 541: PersonalObject.SceneObjDataEntry.value:type_name -> ScenePersonalObject
	166, // 542: ScenePersonalObject.PersonalObjDataEntry.value:type_name -> ServerStateObjectInteractionParam
	169, // 543: LevelProficiency.UnlockProficiencyMapEntry.value:type_name -> UnlockProficiency
	171, // 544: Pivot.PivotsEntry.value:type_name -> PivotInfo
	171, // 545: Pivot.MapPivotsEntry.value:type_name -> PivotInfo
	175, // 546: SeasonTarget.TargetInfoEntry.value:type_name -> SeasonTargetInfo
	180, // 547: InvestigateList.InvestigateMapEntry.value:type_name -> InvestigateData
	181, // 548: InvestigateData.StepIdsEntry.value:type_name -> InvestigateStep
	182, // 549: InvestigateStep.ReasoningMapEntry.value:type_name -> AnswerList
	184, // 550: ParkourRecordList.RecordListEntry.value:type_name -> ParkourRecord
	187, // 551: SeasonQuestList.SeasonMapEntry.value:type_name -> SeasonQuestData
	190, // 552: MapBookInfoList.MapBookMapEntry.value:type_name -> MapBookInfo
	191, // 553: MapBookInfo.MapStickerMapEntry.value:type_name -> MapStickerInfo
	192, // 554: MapStickerInfo.StickerMapEntry.value:type_name -> MapStickerTaskInfo
	195, // 555: MonsterExploreList.MonsterExploreListEntry.value:type_name -> MonsterExploreInfo
	198, // 556: ShowPieceData.OftenUseTypeListEntry.value:type_name -> ShowPieceIdList
	198, // 557: ShowPieceData.UnlockTypeListEntry.value:type_name -> ShowPieceIdList
	197, // 558: ShowPieceData.RoulettePosPieceInfoEntry.value:type_name -> ShowPiecePair
	202, // 559: CookList.BookDataEntry.value:type_name -> CookBook
	204, // 560: TimerRefreshDataList.RefreshDataListEntry.value:type_name -> TimerRefreshList
	205, // 561: TimerRefreshList.RefreshDataEntry.value:type_name -> TimerRefreshInfo
	328, // 562: ChallengeDungeonInfo.DungeonInfoEntry.value:type_name -> DungeonInfo
	207, // 563: ChallengeDungeonInfo.DungeonTargetAwardEntry.value:type_name -> DungeonTargetAward
	151, // 564: DungeonTargetAward.DungeonTargetProgressEntry.value:type_name -> DungeonTargetProgress
	209, // 565: SyncAwardData.LevelUpAwardInfosEntry.value:type_name -> LevelUpAward
	211, // 566: SeasonAchievementList.SeasonAchievementListEntry.value:type_name -> SeasonAchievement
	212, // 567: SeasonAchievement.SeasonAchievementEntry.value:type_name -> Achievement
	214, // 568: SeasonRankList.SeasonRankListEntry.value:type_name -> SeasonRankInfo
	217, // 569: SeasonCenter.SeasonHistoryEntry.value:type_name -> SeasonCenterHistory
	218, // 570: SeasonBpQuestList.SeasonMapEntry.value:type_name -> SeasonBpQuestData
	221, // 571: SeasonMedalInfo.NormalHoleInfosEntry.value:type_name -> MedalHole
	220, // 572: SeasonMedalInfo.CoreHoleNodeInfosEntry.value:type_name -> MedalNode
	223, // 573: CommunityHomeData.UnlockedRecipesEntry.value:type_name -> CommunityHomelandRecipe
	225, // 574: SeasonActivation.ActivationTargetsEntry.value:type_name -> SeasonActivationTarget
	227, // 575: Slot.SlotsEntry.value:type_name -> SlotInfo
	229, // 576: MonsterHuntInfo.MonsterHuntListEntry.value:type_name -> MonsterHuntTarget
	230, // 577: MonsterHuntTarget.TargetInfoListEntry.value:type_name -> MonsterTargetInfo
	232, // 578: Mod.ModInfosEntry.value:type_name -> ModInfo
	234, // 579: WorldEventMap.EventMapEntry.value:type_name -> worldEventData
	60,  // 580: FishSetting.FishRecordsEntry.value:type_name -> FishRecord
	239, // 581: ProfessionList.ProfessionListEntry.value:type_name -> ProfessionInfo
	240, // 582: ProfessionList.AoyiSkillInfoMapEntry.value:type_name -> ProfessionSkillInfo
	238, // 583: ProfessionList.TalentListEntry.value:type_name -> ProfessionTalentInfo
	240, // 584: ProfessionInfo.SkillInfoMapEntry.value:type_name -> ProfessionSkillInfo
	243, // 585: TrialRoad.RoomTargetAwardEntry.value:type_name -> TrialRoadRoomTargetAward
	244, // 586: TrialRoadTargetAward.TargetProgressEntry.value:type_name -> TrialRoadTargetProgress
	244, // 587: TrialRoadRoomTargetAward.TargetProgressEntry.value:type_name -> TrialRoadTargetProgress
	247, // 588: GashaData.GashaInfosEntry.value:type_name -> GashaInfo
	246, // 589: GashaData.GashaGuaranteeInfosEntry.value:type_name -> GashaGuaranteeInfo
	252, // 590: ShopData.RefreshListEntry.value:type_name -> ShopRefreshRecord
	251, // 591: ShopData.NormalShopRecordsEntry.value:type_name -> PlayerBuyRecord
	251, // 592: ShopData.SeasonShopRecordsEntry.value:type_name -> PlayerBuyRecord
	250, // 593: ShopCompensationData.ItemsEntry.value:type_name -> ShopCompensationInfo
	253, // 594: ShopRefreshRecord.ShopRefreshRecordsEntry.value:type_name -> PlayerRefreshShopRecord
	255, // 595: PersonalWorldBossInfo.ScoreAwardInfoEntry.value:type_name -> CommonAwardInfo
	255, // 596: PersonalWorldBossInfo.BossAwardInfoEntry.value:type_name -> CommonAwardInfo
	259, // 597: CutSceneInfos.CutSceneInfosEntry.value:type_name -> CutSceneInfo
	264, // 598: RideList.RidesEntry.value:type_name -> RideData
	262, // 599: RideList.SkinDataEntry.value:type_name -> RideSkinContainer
	263, // 600: RideSkinContainer.SinksEntry.value:type_name -> RideSkinData
	267, // 601: PayData.PayDataEntry.value:type_name -> FirstPayInfo
	270, // 602: LifeProfession.ProfessionInfoEntry.value:type_name -> LifeProfessionBasic
	273, // 603: LifeProfession.LifeTargetInfoEntry.value:type_name -> LifeProfessionTargetInfo
	272, // 604: LifeProfession.LifeProfessionRecipeEntry.value:type_name -> LifeProfessionRecipe
	271, // 605: LifeProfessionBasic.SpecializationEntry.value:type_name -> LiftProfessionSpecialization
	277, // 606: UserActivityList.ActivitiesEntry.value:type_name -> UserActivityInfo
	278, // 607: UserActivityInfo.RewardsEntry.value:type_name -> UserActivityRewardInfo
	279, // 608: UserActivityRewardInfo.FunctionsEntry.value:type_name -> GameFunctionData
	280, // 609: GameFunctionData.FunctionTimesEntry.value:type_name -> FunctionTimeData
	282, // 610: PlayerRecord.PlayerRecordInfosEntry.value:type_name -> PlayerRecordInfo
	283, // 611: PlayerRecordInfo.PlayerRecordsEntry.value:type_name -> PlayerRecordSingle
	285, // 612: DropContainerInfo.DropContainersEntry.value:type_name -> DropContainerSingle
	286, // 613: DropContainerInfo.DropAwardHistoriesEntry.value:type_name -> DropAwardHistory
	288, // 614: MonthlyCard.MonthlyCardInfoEntry.value:type_name -> MonthlyCardInfo
	290, // 615: MonthlyCard.MonthlyCardBuyListEntry.value:type_name -> MonthlyCardBuyList
	293, // 616: FashionBenefit.TaskListEntry.value:type_name -> FashionBenefitTaskInfo
	295, // 617: ItemCurrency.CurrencyDatasEntry.value:type_name -> CurrencyData
	300, // 618: Treasure.RowsEntry.value:type_name -> TreasureItemRow
	300, // 619: Treasure.HistoryRowsEntry.value:type_name -> TreasureItemRow
	301, // 620: TreasureItemRow.MainTargetsEntry.value:type_name -> TreasureItemTarget
	301, // 621: TreasureItemRow.SubTargetsEntry.value:type_name -> TreasureItemTarget
	305, // 622: Item.ExtendAttrEntry.value:type_name -> ItemExtendData
	315, // 623: PlayerBox.ScenesEntry.value:type_name -> PlayerBoxData
	318, // 624: BattlePassData.BattleMapEntry.value:type_name -> BattlePass
	319, // 625: BattlePass.AwardEntry.value:type_name -> BattlePassAwardInfo
	322, // 626: LuckyValueMgr.LuckValueInfoEntry.value:type_name -> LuckyValueInfo
	324, // 627: HandbookData.UnlockNoteImportantRoleMapEntry.value:type_name -> HandBookStruct
	324, // 628: HandbookData.UnlockNoteReadingBookMapEntry.value:type_name -> HandBookStruct
	324, // 629: HandbookData.UnlockNoteDictionaryMapEntry.value:type_name -> HandBookStruct
	324, // 630: HandbookData.UnlockNotePostCardMapEntry.value:type_name -> HandBookStruct
	324, // 631: HandbookData.UnlockNoteMonthCardMapEntry.value:type_name -> HandBookStruct
	326, // 632: MasterModeDungeonInfo.MasterModeDungeonInfoEntry.value:type_name -> SeasonMasterModeDungeonInfo
	327, // 633: SeasonMasterModeDungeonInfo.MasterModeDiffInfoEntry.value:type_name -> MasterModeDiffDungeonInfo
	328, // 634: MasterModeDiffDungeonInfo.DungeonInfoEntry.value:type_name -> DungeonInfo
	330, // 635: StatisticsData.StatRecordMapEntry.value:type_name -> StatRecord
	331, // 636: StatRecord.SceneRecordsEntry.value:type_name -> SceneRecord
	333, // 637: CompensationStatistics.SeasonDataEntry.value:type_name -> CompensationSeasonStatistics
	334, // 638: CompensationSeasonStatistics.WeekDataEntry.value:type_name -> CompensationRecord
	335, // 639: CompensationRecord.CompensationDataEntry.value:type_name -> CompensationData
	336, // 640: BubbleActData.BubbleInfoEntry.value:type_name -> BubbleInfo
	341, // 641: FightPoint.FightPointDataEntry.value:type_name -> FightPointData
	342, // 642: FightPointData.SubFunctionDataEntry.value:type_name -> FightPointSubData
	344, // 643: SignInfo.SignInfoEntry.value:type_name -> SignStatusList
	345, // 644: SignStatusList.SignStatusDataEntry.value:type_name -> SignStatus
	645, // [645:645] is the sub-list for method output_type
	645, // [645:645] is the sub-list for method input_type
	645, // [645:645] is the sub-list for extension type_name
	645, // [645:645] is the sub-list for extension extendee
	0,   // [0:645] is the sub-list for field type_name
}

func init() { file_pb_bp_proto_init() }
func file_pb_bp_proto_init() {
	if File_pb_bp_proto != nil {
		return
	}
	file_pb_bp_proto_msgTypes[0].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[1].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[2].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[3].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[4].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[5].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[6].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[7].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[8].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[9].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[11].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[12].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[15].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[16].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[17].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[18].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[19].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[20].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[22].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[23].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[24].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[25].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[26].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[28].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[29].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[33].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[35].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[37].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[38].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[39].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[40].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[41].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[43].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[44].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[45].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[46].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[47].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[48].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[49].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[51].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[52].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[53].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[54].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[55].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[57].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[58].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[59].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[60].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[61].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[62].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[63].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[64].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[65].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[66].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[67].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[68].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[69].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[70].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[71].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[72].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[73].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[74].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[75].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[77].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[79].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[80].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[81].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[82].OneofWrappers = []any{}
	file_pb_bp_proto_msgTypes[83].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pb_bp_proto_rawDesc), len(file_pb_bp_proto_rawDesc)),
			NumEnums:      25,
			NumMessages:   561,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_bp_proto_goTypes,
		DependencyIndexes: file_pb_bp_proto_depIdxs,
		EnumInfos:         file_pb_bp_proto_enumTypes,
		MessageInfos:      file_pb_bp_proto_msgTypes,
	}.Build()
	File_pb_bp_proto = out.File
	file_pb_bp_proto_goTypes = nil
	file_pb_bp_proto_depIdxs = nil
}
